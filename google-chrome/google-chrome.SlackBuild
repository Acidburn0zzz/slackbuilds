#!/bin/sh
#-- google-chrome for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ google-chrome.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008, 2009 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.google.com/chrome

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=google-chrome
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-4.0.249.30}
# x86 or x86_64
ARCH=${ARCH:-x86}
if [ "${ARCH}" = "x86_64" ] ;then
  PARCH=${ARCH}
else
  ARCH=x86
  PARCH=i386
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${NAME}-beta_current_${PARCH}.rpm

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://dl.google.com/linux/direct/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1

if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rpm2cpio ${CWD}/${SRCARCHIVE} | ( cd ${PKG} && cpio -imdv --no-absolute-filenames )
cd ${PKG} || exit 1

find ${PKG} -type d | xargs chmod 0755 2> /dev/null
chmod -R u+w,go+r-w,a-s ${PKG}

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}
mv ${PKG}/opt/google/chrome ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME} || exit 1

sed -i -e 's|/opt/google/chrome/||g' \
  ${PKG}/usr/share/gnome-control-center/default-apps/${NAME}.xml \
   ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/default-app-block || exit 1

# I hate have to do this, but...
sed -i 's,libnss3.so.1d,libnss3.so\x00\x00\x00,g;
  s,libnssutil3.so.1d,libnssutil3.so\x00\x00\x00,g;
  s,libsmime3.so.1d,libsmime3.so\x00\x00\x00,g;
  s,libssl3.so.1d,libssl3.so\x00\x00\x00,g;
  s,libplds4.so.0d,libplds4.so\x00\x00\x00,g;
  s,libplc4.so.0d,libplc4.so\x00\x00\x00,g;
  s,libnspr4.so.0d,libnspr4.so\x00\x00\x00,g;' \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/chrome || return 1

rm -f ${PKG}/usr/bin/*
zcat ${CWD}/${NAME}.sh.gz > ${PKG}/usr/bin/${NAME} || exit 1
chmod 0755 ${PKG}/usr/bin/${NAME}

mv ${PKG}/usr/share/man ${PKG}/usr/ || exit 1

rm -rf ${PKG}/etc ${PKG}/opt
rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/{xdg-settings,*.xpm,${NAME}}

sed -i \
  -e 's|/opt/google/chrome/||g' \
  -e "/^Icon=/s|=.*$|=${NAME}|g" \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/*.desktop || exit 1

mkdir -p ${PKG}/usr/share/applications
desktop-file-install --delete-original --vendor="" \
  --dir ${PKG}/usr/share/applications \
  --remove-key="Encoding" \
  --remove-category="Application" \
  --add-category="GNOME" \
  --add-category="GTK" \
  --add-mime-type="application/xhtml+xml" \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/${NAME}.desktop || exit 1

for res in 16 32 48 256 ;do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
  mkdir -p ${dir}
  mv ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/product_logo_${res}.png \
    ${dir}/${NAME}.png || exit 1
done

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/${NAME}.sh.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
