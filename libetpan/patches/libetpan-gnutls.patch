--- src/data-types/mailstream_ssl.c.orig	2014-02-06 18:02:34.299401584 -0200
+++ src/data-types/mailstream_ssl.c	2014-02-06 18:31:20.596177063 -0200
@@ -104,9 +104,15 @@ struct mailstream_ssl_context
   X509* client_x509;
   EVP_PKEY *client_pkey;
 #else
+#if GNUTLS_VERSION_NUMBER <= 0x020c00
   gnutls_session session;
   gnutls_x509_crt client_x509;
   gnutls_x509_privkey client_pkey;
+#else
+  gnutls_session_t session;
+  gnutls_x509_crt_t client_x509;
+  gnutls_x509_privkey_t client_pkey;
+#endif
   gnutls_certificate_credentials_t gnutls_credentials;
 #endif
 #endif
@@ -124,7 +130,11 @@ struct mailstream_ssl_data {
 #else
 struct mailstream_ssl_data {
   int fd;
+#if GNUTLS_VERSION_NUMBER <= 0x020c00
   gnutls_session session;
+#else
+  gnutls_session_t session;
+#endif
   gnutls_certificate_credentials_t xcred;
   struct mailstream_cancel * cancel;
 };
@@ -153,6 +163,7 @@ static int openssl_init_done = 0;
 #endif
 
 // Used to make OpenSSL thread safe
+#ifndef USE_GNUTLS
 #if defined (HAVE_PTHREAD_H) && !defined (WIN32) && defined (USE_SSL) && defined (LIBETPAN_REENTRANT)
   struct CRYPTO_dynlock_value
   {
@@ -223,6 +234,7 @@ static int openssl_init_done = 0;
     CRYPTO_set_dynlock_destroy_callback(dyn_destroy_function);
   }
 #endif
+#endif
 
 void mailstream_ssl_init_lock(void)
 {
@@ -481,16 +493,31 @@ static struct mailstream_ssl_data * tls_
 
 #else
 
-static struct mailstream_ssl_context * mailstream_ssl_context_new(gnutls_session session, int fd);
+#if GNUTLS_VERSION_NUMBER <= 0x020c00
+  static struct mailstream_ssl_context * mailstream_ssl_context_new(gnutls_session session, int fd);
+#else
+  static struct mailstream_ssl_context * mailstream_ssl_context_new(gnutls_session_t session, int fd);
+#endif
 static void mailstream_ssl_context_free(struct mailstream_ssl_context * ssl_ctx);
 
+#if GNUTLS_VERSION_NUMBER <= 0x020c00
 static int mailstream_gnutls_client_cert_cb(gnutls_session session,
                                const gnutls_datum *req_ca_rdn, int nreqs,
                                const gnutls_pk_algorithm *sign_algos,
                                int sign_algos_length, gnutls_retr_st *st)
+#else
+static int mailstream_gnutls_client_cert_cb(gnutls_session_t session,
+                               const gnutls_datum_t *req_ca_rdn, int nreqs,
+                               const gnutls_pk_algorithm_t *sign_algos,
+                               int sign_algos_length, gnutls_retr2_st *st)
+#endif
 {
 	struct mailstream_ssl_context * ssl_context = (struct mailstream_ssl_context *)gnutls_session_get_ptr(session);
+#if GNUTLS_VERSION_NUMBER <= 0x020c00
 	gnutls_certificate_type type = gnutls_certificate_type_get(session);
+#else
+	gnutls_certificate_type_t type = gnutls_certificate_type_get(session);
+#endif
 
 	st->ncerts = 0;
 
@@ -499,7 +526,11 @@ static int mailstream_gnutls_client_cert
 
 	if (type == GNUTLS_CRT_X509 && ssl_context->client_x509 && ssl_context->client_pkey) {
 		st->ncerts = 1;
+#if GNUTLS_VERSION_NUMBER <= 0x020c00
 		st->type = type;
+#else
+		st->key_type = type;
+#endif
 		st->cert.x509 = &(ssl_context->client_x509);
 		st->key.x509 = ssl_context->client_pkey;
 		st->deinit_all = 0;
@@ -511,11 +542,16 @@ static struct mailstream_ssl_data * ssl_
   void (* callback)(struct mailstream_ssl_context * ssl_context, void * cb_data), void * cb_data)
 {
   struct mailstream_ssl_data * ssl_data;
+#if GNUTLS_VERSION_NUMBER <= 0x020c00
   gnutls_session session;
+#else
+  gnutls_session_t session;
+#endif
   struct mailstream_cancel * cancel;
   gnutls_certificate_credentials_t xcred;
   int r;
   struct mailstream_ssl_context * ssl_context = NULL;
+  unsigned int timeout_value;
   
   mailstream_ssl_init();
   
@@ -533,26 +569,35 @@ static struct mailstream_ssl_data * ssl_
   
   gnutls_session_set_ptr(session, ssl_context);
   gnutls_credentials_set(session, GNUTLS_CRD_CERTIFICATE, xcred);
+#if GNUTLS_VERSION_NUMBER <= 0x020c00
   gnutls_certificate_client_set_retrieve_function(xcred, mailstream_gnutls_client_cert_cb);
-
+#else
+  gnutls_certificate_set_retrieve_function(xcred, mailstream_gnutls_client_cert_cb);
+#endif
   gnutls_set_default_priority(session);
   gnutls_priority_set_direct(session, "NORMAL", NULL);
 
   gnutls_record_disable_padding(session);
   gnutls_dh_set_prime_bits(session, 512);
 
+#if GNUTLS_VERSION_NUMBER <= 0x020c00
   gnutls_transport_set_ptr(session, (gnutls_transport_ptr) fd);
+#else
+  gnutls_transport_set_ptr(session, (gnutls_transport_ptr_t) fd);
+#endif
 
   /* lower limits on server key length restriction */
   gnutls_dh_set_prime_bits(session, 512);
   
   if (timeout == 0) {
-		timeout_value = mailstream_network_delay.tv_sec * 1000 + timeout.tv_usec / 1000;
+		timeout_value = mailstream_network_delay.tv_sec * 1000 + mailstream_network_delay.tv_usec / 1000;
   }
   else {
 		timeout_value = timeout;
   }
+#if GNUTLS_VERSION_NUMBER >= 0x030100
 	gnutls_handshake_set_timeout(session, timeout_value);
+#endif
 
   do {
     r = gnutls_handshake(session);
@@ -1057,10 +1102,19 @@ ssize_t mailstream_ssl_get_certificate(m
   SSL *ssl_conn = NULL;
   X509 *cert = NULL;
 #else
+#if GNUTLS_VERSION_NUMBER <= 0x020c00
   gnutls_session session = NULL;
   const gnutls_datum *raw_cert_list;
+#else
+  gnutls_session_t session = NULL;
+  const gnutls_datum_t *raw_cert_list;
+#endif
   unsigned int raw_cert_list_length;
+#if GNUTLS_VERSION_NUMBER <= 0x020c00
   gnutls_x509_crt cert = NULL;
+#else
+  gnutls_x509_crt_t cert = NULL;
+#endif
   char output[10*1024];
   size_t cert_size;
 #endif
@@ -1185,7 +1239,11 @@ int mailstream_ssl_set_client_certificat
   ssl_context->client_x509 = (X509 *)x509;
   return 0;
 #else
+#if GNUTLS_VERSION_NUMBER <= 0x020c00
   gnutls_datum tmp;
+#else
+  gnutls_datum_t tmp;
+#endif
   int r;
   ssl_context->client_x509 = NULL;
   if (len == 0)
@@ -1214,7 +1272,11 @@ int mailstream_ssl_set_client_private_ke
   ssl_context->client_pkey = (EVP_PKEY *)pkey;
   return 0;
 #else
+#if GNUTLS_VERSION_NUMBER <= 0x020c00
   gnutls_datum tmp;
+#else
+  gnutls_datum_t tmp;
+#endif
   int r;
   ssl_context->client_pkey = NULL;
   if (len == 0)
@@ -1277,7 +1339,12 @@ static void mailstream_ssl_context_free(
     free(ssl_ctx);
 }
 #else
-static struct mailstream_ssl_context * mailstream_ssl_context_new(gnutls_session session, int fd)
+
+#if GNUTLS_VERSION_NUMBER <= 0x020c00
+  static struct mailstream_ssl_context * mailstream_ssl_context_new(gnutls_session session, int fd)
+#else
+  static struct mailstream_ssl_context * mailstream_ssl_context_new(gnutls_session_t session, int fd)
+#endif
 {
   struct mailstream_ssl_context * ssl_ctx;
   
