#!/bin/sh

# smartmontools init file for smartd
# Copyright (C) 2002-4 Bruce Allen <smartmontools-support@lists.sourceforge.net>
# $Id: smartd.initd,v 1.2 2004/09/17 11:55:28 arjanv Exp $

# For RedHat and cousins:
# chkconfig: 2345 99 01
# description: Self Monitoring and Reporting Technology (SMART) Daemon
# processname: smartd 

# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2, or (at your option) any later
# version. 
# You should have received a copy of the GNU General Public License (for
# example COPYING); if not, write to the Free Software Foundation, Inc., 675
# Mass Ave, Cambridge, MA 02139, USA.
# This code was originally developed as a Senior Thesis by Michael Cornwell
# at the Concurrent Systems Laboratory (now part of the Storage Systems
# Research Center), Jack Baskin School of Engineering, University of
# California, Santa Cruz. http://ssrc.soe.ucsc.edu/.

# Uncomment the line below to pass options to smartd on startup. 
# Note that distribution specific configuration files like
# /etc/{default,sysconfig}/smartmontools might override these
#smartd_opts="--interval=1800"

SMARTD_BIN=/usr/sbin/smartd
prog=$(basename ${SMARTD_BIN})
lockfile=/var/lock/subsys/${prog}

[ -x "${SMARTD_BIN}" ] || exit 0

[ -e /etc/default/smartmontools ] && . /etc/default/smartmontools

RETVAL=0

PID=$(/sbin/pidof -o %PPID ${SMARTD_BIN})

genconfig() {
  if [ -x /usr/sbin/smartd-conf.py ]; then
    GEN_CONF="*SMARTD*AUTOGENERATED*"
    [ ! -f /etc/smartd.conf ] || read DUMMY GEN_CONF DUMMY </etc/smartd.conf \
    && [ "$GEN_CONF" == "*SMARTD*AUTOGENERATED*" ] \
    && smartd-conf.py 2>/dev/null >/etc/smartd.conf.new-autogenerated \
    && mv -f /etc/smartd.conf.new-autogenerated /etc/smartd.conf
  fi
}

start() {
  echo -n "Starting ${prog}: "
  if [ -z "${PID}" ] ;then 
    ${SMARTD_BIN} ${smartd_opts}
    RETVAL=$?
  else
    RETVAL=1
  fi
  if [ ${RETVAL} -eq 0 ] && touch ${lockfile} ; then
    echo -e "\t\t\t\t\t\t[  OK  ]\r"
  else
    echo -e "\t\t\t\t\t\t[FAILED]\r"
  fi
  return ${RETVAL}
}

stop() {
  echo -n "Stopping ${prog}: "
  if [ -n "${PID}" ] ;then
    kill ${PID} &>/dev/null
    RETVAL=$?
  else
    RETVAL=1
  fi
  if [ ${RETVAL} -eq 0 ] && rm -f ${lockfile} ; then
    echo -e "\t\t\t\t\t\t[  OK  ]\r"
  else
    echo -e "\t\t\t\t\t\t[FAILED]\r"
  fi
  return ${RETVAL}
}

reload() {
  echo -n "Reloading ${prog} daemon configuration: "
  if [ -n "${PID}" ] ;then
    kill -HUP ${PID} &>/dev/null
    RETVAL=$?
  else
    RETVAL=1
  fi
  if [ ${RETVAL} -eq 0 ] ; then
    echo -e "\t\t\t\t[  OK  ]\r"
  else
    echo -e "\t\t\t\t[FAILED]\r"
  fi
  return ${RETVAL}
}

restart() {
  stop
  genconfig
  unset PID
  start
}

report() {
  echo -n "Checking SMART devices now: "
  kill -USR1 ${PID} 
  RETVAL=$?
  if [ ${RETVAL} -eq 0 ] ; then
    echo -e "\t\t\t\t\t[  OK  ]\r"
  else
    echo -e "\t\t\t\t\t[FAILED]\r"
  fi
  return ${RETVAL}
}

status() {
  if [ -f ${lockfile} ]; then
    echo "${prog} is running in pid ${PID}."
  else
    echo "${prog} is not running."
  fi
}

case "$1" in
  start|reload)
    genconfig
    $1
    ;;
  stop|report|status)
    $1
    ;;
  restart)
    restart
    ;;
  try-restart)
    if [ -f ${lockfile} ]; then
      stop
      genconfig
      start
    fi
    ;;
  force-reload)
    genconfig
    reload || (stop; start)
    ;;
  *)
    echo "Usage: $0 {start|stop|reload|force-reload|report|restart|try-restart|status}"
    exit 1
    ;;
esac
