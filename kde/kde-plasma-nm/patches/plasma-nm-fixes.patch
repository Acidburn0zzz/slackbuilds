diff --git a/applet/declarative/contents/ui/CompactRepresentation.qml b/applet/declarative/contents/ui/CompactRepresentation.qml
index 3bdf765..24fb602 100644
--- a/applet/declarative/contents/ui/CompactRepresentation.qml
+++ b/applet/declarative/contents/ui/CompactRepresentation.qml
@@ -27,6 +27,14 @@ import org.kde.networkmanagement 0.1 as PlasmaNM
 Item {
     id: panelIconWidget;
 
+    PlasmaNM.NetworkStatus {
+        id: networkStatus;
+    }
+
+    PlasmaNM.ConnectionIcon {
+        id: connectionIconProvider;
+    }
+
     PlasmaCore.Svg {
         id: svgIcons;
 
@@ -39,14 +47,7 @@ Item {
 
         anchors.fill: parent;
         svg: svgIcons;
-        elementId: "network-wired";
-    }
-
-    QIconItem {
-        id: staticIcon;
-
-        anchors.fill: parent;
-        visible: false;
+        elementId: connectionIconProvider.connectionSvgIcon;
     }
 
     QIconItem {
@@ -58,25 +59,17 @@ Item {
             bottom: parent.bottom;
             right: parent.right;
         }
-        visible: false;
+        icon: connectionIconProvider.connectionIndicatorIcon;
     }
 
     PlasmaComponents.BusyIndicator {
         id: connectingIndicator;
 
         anchors.fill: parent;
-        running: false;
+        running: connectionIconProvider.connecting;
         visible: running;
     }
 
-    PlasmaNM.NetworkStatus {
-        id: networkStatus;
-
-        onSetTooltip: {
-            tooltip.subText = text;
-        }
-    }
-
     MouseArea {
         id: mouseAreaPopup;
 
@@ -87,43 +80,8 @@ Item {
         PlasmaCore.ToolTip {
             id: tooltip;
             target: mouseAreaPopup;
-            image: connectionIcon.elementId;
+            image: connectionIconProvider.connectionPixmapIcon;
+            subText: networkStatus.activeConnections;
         }
     }
-
-    PlasmaNM.ConnectionIcon {
-        id: connectionIconProvider;
-
-        onHideConnectingIndicator: {
-            connectingIndicator.running = false;
-        }
-
-        onShowConnectingIndicator: {
-            connectingIndicator.running = true;
-        }
-
-        onSetConnectionIcon: {
-            connectionIcon.elementId = icon;
-            connectionIcon.visible = true;
-            staticIcon.visible = false;
-        }
-
-        onSetHoverIcon: {
-            hoverIcon.visible = true;
-            hoverIcon.icon = QIcon(icon);
-        }
-
-        onUnsetHoverIcon: {
-            hoverIcon.visible = false;
-        }
-
-        onSetTooltipIcon: {
-            tooltip.image = icon;
-        }
-    }
-
-    Component.onCompleted: {
-        networkStatus.init();
-        connectionIconProvider.init();
-    }
 }
diff --git a/applet/declarative/contents/ui/OptionsWidget.qml b/applet/declarative/contents/ui/OptionsWidget.qml
index 19d1c80..6693b68 100644
--- a/applet/declarative/contents/ui/OptionsWidget.qml
+++ b/applet/declarative/contents/ui/OptionsWidget.qml
@@ -25,40 +25,12 @@ import org.kde.networkmanagement 0.1 as PlasmaNM
 Item {
     id: optionsWidget;
 
-     PlasmaNM.EnabledConnections {
-        id: enabledConnections;
-
-        onNetworkingEnabled: {
-            networkingEnabled.checked = enabled;
-        }
-
-        onWirelessEnabled: {
-            wirelessEnabled.checked = enabled;
-        }
-
-        onWirelessHwEnabled: {
-            wirelessEnabled.enabled = enabled;
-        }
-
-        onWimaxEnabled: {
-            wimaxEnabled.checked = enabled;
-        }
-
-        onWimaxHwEnabled: {
-            wimaxEnabled.enabled = enabled;
-        }
-
-        onWwanEnabled: {
-            wwanEnabled.checked = enabled;
-        }
+    signal openEditor();
 
-        onWwanHwEnabled: {
-            wwanEnabled.enabled = enabled;
-        }
+    PlasmaNM.EnabledConnections {
+        id: enabledConnections;
     }
 
-    signal openEditor();
-
     PlasmaNM.AvailableDevices {
         id: availableDevices;
     }
@@ -84,6 +56,7 @@ Item {
                 right: parent.right;
             }
             text: i18n("Networking enabled");
+            checked: enabledConnections.networkingEnabled;
 
             onClicked: {
                 handler.enableNetworking(checked);
@@ -93,13 +66,15 @@ Item {
         PlasmaComponents.CheckBox {
             id: wirelessEnabled;
 
-            height: availableDevices.wirelessAvailable ? networkingEnabled.height : 0;
+            height: availableDevices.wirelessDeviceAvailable ? networkingEnabled.height : 0;
             anchors {
                 left: parent.left;
                 right: parent.right;
             }
-            visible: availableDevices.wirelessAvailable;
             text: i18n("Wireless enabled");
+            visible: availableDevices.wirelessDeviceAvailable;
+            checked: enabledConnections.wirelessEnabled;
+            enabled: enabledConnections.wirelessHwEnabled;
 
             onClicked: {
                 handler.enableWireless(checked);
@@ -109,13 +84,15 @@ Item {
         PlasmaComponents.CheckBox {
             id: wimaxEnabled;
 
-            height: availableDevices.wimaxAvailable ? networkingEnabled.height : 0;
+            height: availableDevices.wimaxDeviceAvailable ? networkingEnabled.height : 0;
             anchors {
                 left: parent.left;
                 right: parent.right;
             }
-            visible: availableDevices.wimaxAvailable;
             text: i18n("Wimax enabled");
+            visible: availableDevices.wimaxDeviceAvailable;
+            checked: enabledConnections.wimaxEnabled;
+            enabled: enabledConnections.wimaxHwEnabled;
 
             onClicked: {
                 handler.enableWimax(checked);
@@ -125,13 +102,15 @@ Item {
         PlasmaComponents.CheckBox {
             id: wwanEnabled;
 
-            height: availableDevices.wwanAvailable ? networkingEnabled.height : 0;
+            height: availableDevices.modemDeviceAvailable ? networkingEnabled.height : 0;
             anchors {
                 left: parent.left;
                 right: parent.right;
             }
-            visible: availableDevices.wwanAvailable;
             text: i18n("Mobile broadband enabled");
+            visible: availableDevices.modemDeviceAvailable;
+            checked: enabledConnections.wwanEnabled;
+            enabled: enabledConnections.wwanHwEnabled;
 
             onClicked: {
                 handler.enableWwan(checked);
@@ -150,9 +129,4 @@ Item {
             }
         }
     }
-
-    Component.onCompleted: {
-        availableDevices.init();
-        enabledConnections.init();
-    }
 }
diff --git a/applet/declarative/contents/ui/Toolbar.qml b/applet/declarative/contents/ui/Toolbar.qml
index ad9dbe3..7b4605b 100644
--- a/applet/declarative/contents/ui/Toolbar.qml
+++ b/applet/declarative/contents/ui/Toolbar.qml
@@ -32,18 +32,6 @@ Item {
 
     PlasmaNM.NetworkStatus {
         id: networkStatus;
-
-        onSetGlobalStatus: {
-            statusLabel.text = status;
-            progressIndicator.running = inProgress;
-            if (connected) {
-                statusIcon.source = "user-online";
-                statusIcon.enabled = true;
-            } else {
-                statusIcon.source = "user-offline";
-                statusIcon.enabled = false;
-            }
-        }
     }
 
     Item {
@@ -66,14 +54,7 @@ Item {
                 verticalCenter: parent.verticalCenter;
                 leftMargin: padding.margins.left;
             }
-
-            PlasmaComponents.BusyIndicator {
-                id: progressIndicator;
-
-                anchors.fill: parent;
-                running: false;
-                visible: running;
-            }
+            source: (networkStatus.networkStatus == i18n("Connected") || networkStatus.networkStatus == "Connected") ? "user-online" : "user-offline";
         }
 
         PlasmaComponents.Label {
@@ -87,6 +68,7 @@ Item {
                 leftMargin: padding.margins.left;
             }
             elide: Text.ElideRight;
+            text: networkStatus.networkStatus;
         }
 
         PlasmaCore.IconItem {
@@ -160,8 +142,6 @@ Item {
     }
 
     Component.onCompleted: {
-        networkStatus.init();
-
         if (plasmoid.readConfig("optionsExpanded") == "expanded") {
             expanded = true;
         }
diff --git a/applet/declarative/contents/ui/main.qml b/applet/declarative/contents/ui/main.qml
index 8ea88cc..69ba70c 100644
--- a/applet/declarative/contents/ui/main.qml
+++ b/applet/declarative/contents/ui/main.qml
@@ -19,6 +19,7 @@
 */
 
 import QtQuick 1.1
+import org.kde.plasma.extras 0.1 as PlasmaExtras
 import org.kde.plasma.components 0.1 as PlasmaComponents
 import org.kde.plasma.core 0.1 as PlasmaCore
 import org.kde.networkmanagement 0.1 as PlasmaNM
@@ -95,6 +96,7 @@ Item {
             topMargin: padding.margins.top;
             bottomMargin: padding.margins.bottom
         }
+
         clip: true
         model: connectionSortModel;
         currentIndex: -1;
diff --git a/declarative-plugins/applet/availabledevices.cpp b/declarative-plugins/applet/availabledevices.cpp
index e737f45..c2331c6 100644
--- a/declarative-plugins/applet/availabledevices.cpp
+++ b/declarative-plugins/applet/availabledevices.cpp
@@ -22,30 +22,25 @@
 
 #include <NetworkManagerQt/Manager>
 
-AvailableDevices::AvailableDevices(QObject* parent):
-    QObject(parent),
-    m_wirelessAvailable(false),
-    m_wimaxAvailable(false),
-    m_wwanAvailable(false)
-{
-}
-
-AvailableDevices::~AvailableDevices()
-{
-}
-
-void AvailableDevices::init()
+AvailableDevices::AvailableDevices(QObject* parent)
+    : QObject(parent)
+    , m_wiredDeviceAvailable(false)
+    , m_wirelessDeviceAvailable(false)
+    , m_wimaxDeviceAvailable(false)
+    , m_modemDeviceAvailable(false)
+    , m_bluetoothDeviceAvailable(false)
 {
     foreach (const NetworkManager::Device::Ptr& device, NetworkManager::networkInterfaces()) {
         if (device->type() == NetworkManager::Device::Modem) {
-            m_wwanAvailable = true;
-            Q_EMIT wwanAvailableChanged(true);
+            m_modemDeviceAvailable = true;
         } else if (device->type() == NetworkManager::Device::Wifi) {
-            m_wirelessAvailable = true;
-            Q_EMIT wirelessAvailableChanged(true);
+            m_wirelessDeviceAvailable = true;
         } else if (device->type() == NetworkManager::Device::Wimax) {
-            m_wimaxAvailable = true;
-            Q_EMIT wimaxAvailableChanged(true);
+            m_wimaxDeviceAvailable = true;
+        } else if (device->type() == NetworkManager::Device::Ethernet) {
+            m_wiredDeviceAvailable = true;
+        } else if (device->type() == NetworkManager::Device::Bluetooth) {
+            m_bluetoothDeviceAvailable = true;
         }
     }
 
@@ -55,19 +50,33 @@ void AvailableDevices::init()
             SLOT(deviceRemoved()));
 }
 
-bool AvailableDevices::isWirelessAvailable() const
+AvailableDevices::~AvailableDevices()
+{
+}
+
+bool AvailableDevices::isWiredDeviceAvailable() const
 {
-    return m_wirelessAvailable;
+    return m_wiredDeviceAvailable;
 }
 
-bool AvailableDevices::isWimaxAvailable() const
+bool AvailableDevices::isWirelessDeviceAvailable() const
 {
-    return m_wimaxAvailable;
+    return m_wirelessDeviceAvailable;
 }
 
-bool AvailableDevices::isWwanAvailable() const
+bool AvailableDevices::isWimaxDeviceAvailable() const
 {
-    return m_wwanAvailable;
+    return m_wimaxDeviceAvailable;
+}
+
+bool AvailableDevices::isModemDeviceAvailable() const
+{
+    return m_modemDeviceAvailable;
+}
+
+bool AvailableDevices::isBluetoothDeviceAvailable() const
+{
+    return m_bluetoothDeviceAvailable;
 }
 
 void AvailableDevices::deviceAdded(const QString& dev)
@@ -75,46 +84,63 @@ void AvailableDevices::deviceAdded(const QString& dev)
     NetworkManager::Device::Ptr device = NetworkManager::findNetworkInterface(dev);
 
     if (device) {
-        if (device->type() == NetworkManager::Device::Modem && !m_wwanAvailable) {
-            m_wwanAvailable = true;
-            Q_EMIT wwanAvailableChanged(true);
-        } else if (device->type() == NetworkManager::Device::Wifi && !m_wirelessAvailable) {
-            m_wirelessAvailable = true;
-            Q_EMIT wirelessAvailableChanged(true);
-        } else if (device->type() == NetworkManager::Device::Wimax && !m_wimaxAvailable) {
-            m_wimaxAvailable = true;
-            Q_EMIT wimaxAvailableChanged(true);
+        if (device->type() == NetworkManager::Device::Modem && !m_modemDeviceAvailable) {
+            m_modemDeviceAvailable = true;
+            Q_EMIT modemDeviceAvailableChanged(true);
+        } else if (device->type() == NetworkManager::Device::Wifi && !m_wirelessDeviceAvailable) {
+            m_wirelessDeviceAvailable = true;
+            Q_EMIT wirelessDeviceAvailableChanged(true);
+        } else if (device->type() == NetworkManager::Device::Wimax && !m_wimaxDeviceAvailable) {
+            m_wimaxDeviceAvailable = true;
+            Q_EMIT wimaxDeviceAvailableChanged(true);
         }
     }
 }
 
 void AvailableDevices::deviceRemoved()
 {
+    bool wired = false;
     bool wireless = false;
     bool wimax = false;
-    bool wwan = false;
+    bool modem = false;
+    bool bluetooth = false;
 
     foreach (const NetworkManager::Device::Ptr& device, NetworkManager::networkInterfaces()) {
         if (device->type() == NetworkManager::Device::Modem) {
-            wwan = true;
+            modem = true;
         } else if (device->type() == NetworkManager::Device::Wifi) {
             wireless = true;
         } else if (device->type() == NetworkManager::Device::Wimax) {
             wimax = true;
+        } else if (device->type() == NetworkManager::Device::Ethernet) {
+            wired = true;
+        } else if (device->type() == NetworkManager::Device::Bluetooth) {
+            bluetooth = true;
         }
     }
 
-    if (!wireless && m_wirelessAvailable) {
-        m_wirelessAvailable = false;
-        Q_EMIT wirelessAvailableChanged(false);    }
+    if (!wired && m_wiredDeviceAvailable) {
+        m_wiredDeviceAvailable = false;
+        Q_EMIT wiredDeviceAvailableChanged(false);
+    }
+
+    if (!wireless && m_wirelessDeviceAvailable) {
+        m_wirelessDeviceAvailable = false;
+        Q_EMIT wirelessDeviceAvailableChanged(false);
+    }
+
+    if (!wimax && m_wimaxDeviceAvailable) {
+        m_wimaxDeviceAvailable = false;
+        Q_EMIT wimaxDeviceAvailableChanged(false);
+    }
 
-    if (!wimax && m_wimaxAvailable) {
-        m_wwanAvailable = false;
-        Q_EMIT wwanAvailableChanged(false);
+    if (!modem && m_modemDeviceAvailable) {
+        m_modemDeviceAvailable = false;
+        Q_EMIT modemDeviceAvailableChanged(false);
     }
 
-    if (!wwan && m_wwanAvailable) {
-        m_wwanAvailable = false;
-        Q_EMIT wwanAvailableChanged(false);
+    if (!bluetooth && m_bluetoothDeviceAvailable) {
+        m_bluetoothDeviceAvailable = false;
+        Q_EMIT bluetoothDeviceAvailableChanged(false);
     }
 }
diff --git a/declarative-plugins/applet/availabledevices.h b/declarative-plugins/applet/availabledevices.h
index b8d66bb..cd2b447 100644
--- a/declarative-plugins/applet/availabledevices.h
+++ b/declarative-plugins/applet/availabledevices.h
@@ -27,35 +27,56 @@
 
 class AvailableDevices : public QObject
 {
-Q_PROPERTY(bool wirelessAvailable READ isWirelessAvailable NOTIFY wirelessAvailableChanged)
-Q_PROPERTY(bool wimaxAvailable READ isWimaxAvailable NOTIFY wimaxAvailableChanged)
-Q_PROPERTY(bool wwanAvailable READ isWwanAvailable NOTIFY wwanAvailableChanged)
+/**
+ * Return true when there is present wired device
+ */
+Q_PROPERTY(bool wiredDeviceAvailable READ isWiredDeviceAvailable NOTIFY wiredDeviceAvailableChanged)
+/**
+ * Return true when there is present wireless device
+ */
+Q_PROPERTY(bool wirelessDeviceAvailable READ isWirelessDeviceAvailable NOTIFY wirelessDeviceAvailableChanged)
+/**
+ * Return true when there is present wimax device
+ */
+Q_PROPERTY(bool wimaxDeviceAvailable READ isWimaxDeviceAvailable NOTIFY wimaxDeviceAvailableChanged)
+/**
+ * Return true when there is present modem device
+ */
+Q_PROPERTY(bool modemDeviceAvailable READ isModemDeviceAvailable NOTIFY modemDeviceAvailableChanged)
+/**
+ * Return true when there is present bluetooth device
+ * Bluetooth device is visible for NetworkManager only when there is some Bluetooth connection
+ */
+Q_PROPERTY(bool bluetoothDeviceAvailable READ isBluetoothDeviceAvailable NOTIFY bluetoothDeviceAvailableChanged)
 Q_OBJECT
 public:
     explicit AvailableDevices(QObject* parent = 0);
     virtual ~AvailableDevices();
 
 public Q_SLOTS:
-    void init();
-
-    bool isWirelessAvailable() const;
-    bool isWimaxAvailable() const;
-    bool isWwanAvailable() const;
+    bool isWiredDeviceAvailable() const;
+    bool isWirelessDeviceAvailable() const;
+    bool isWimaxDeviceAvailable() const;
+    bool isModemDeviceAvailable() const;
+    bool isBluetoothDeviceAvailable() const;
 
 private Q_SLOTS:
     void deviceAdded(const QString& dev);
     void deviceRemoved();
 
 Q_SIGNALS:
-    void wirelessAvailableChanged(bool available);
-    void wimaxAvailableChanged(bool available);
-    void wwanAvailableChanged(bool available);
+    void wiredDeviceAvailableChanged(bool available);
+    void wirelessDeviceAvailableChanged(bool available);
+    void wimaxDeviceAvailableChanged(bool available);
+    void modemDeviceAvailableChanged(bool available);
+    void bluetoothDeviceAvailableChanged(bool available);
 
 private:
-    bool m_wirelessAvailable;
-    bool m_wimaxAvailable;
-    bool m_wwanAvailable;
-
+    bool m_wiredDeviceAvailable;
+    bool m_wirelessDeviceAvailable;
+    bool m_wimaxDeviceAvailable;
+    bool m_modemDeviceAvailable;
+    bool m_bluetoothDeviceAvailable;
 };
 
 #endif // PLASMA_NM_AVAILABLE_DEVICES_H
diff --git a/declarative-plugins/applet/connectionicon.cpp b/declarative-plugins/applet/connectionicon.cpp
index c3f8540..d733ceb 100644
--- a/declarative-plugins/applet/connectionicon.cpp
+++ b/declarative-plugins/applet/connectionicon.cpp
@@ -29,24 +29,18 @@
 #include <NetworkManagerQt/WirelessDevice>
 #include <NetworkManagerQt/ConnectionSettings>
 #include <NetworkManagerQt/WirelessSetting>
+#include <NetworkManagerQt/VpnConnection>
 
 #include "debug.h"
 
-ConnectionIcon::ConnectionIcon(QObject* parent):
-    QObject(parent),
-    m_signal(0)
+ConnectionIcon::ConnectionIcon(QObject* parent)
+    : QObject(parent)
+    , m_signal(0)
+    , m_connecting(false)
 #if WITH_MODEMMANAGER_SUPPORT
-    ,m_modemNetwork(0)
+    , m_modemNetwork(0)
 #endif
 {
-}
-
-ConnectionIcon::~ConnectionIcon()
-{
-}
-
-void ConnectionIcon::init()
-{
     connect(NetworkManager::notifier(), SIGNAL(activeConnectionsChanged()),
             SLOT(activeConnectionsChanged()));
     connect(NetworkManager::notifier(), SIGNAL(statusChanged(NetworkManager::Status)),
@@ -69,6 +63,30 @@ void ConnectionIcon::init()
     setIcons();
 }
 
+ConnectionIcon::~ConnectionIcon()
+{
+}
+
+bool ConnectionIcon::connecting() const
+{
+    return m_connecting;
+}
+
+QString ConnectionIcon::connectionSvgIcon() const
+{
+    return m_connectionSvgIcon;
+}
+
+QString ConnectionIcon::connectionIndicatorIcon() const
+{
+    return m_connectionIndicatorIcon;
+}
+
+QString ConnectionIcon::connectionPixmapIcon() const
+{
+    return m_connectionPixmapIcon;
+}
+
 void ConnectionIcon::activeConnectionsChanged()
 {
     NetworkManager::ActiveConnection::List actives = NetworkManager::activeConnections();
@@ -80,11 +98,21 @@ void ConnectionIcon::activeConnectionsChanged()
                 SLOT(setIcons()), Qt::UniqueConnection);
         connect(active.data(), SIGNAL(default6Changed(bool)),
                 SLOT(setIcons()), Qt::UniqueConnection);
-        if (active->state() == NetworkManager::ActiveConnection::Activating) {
-            NMAppletDebug() << "Emit signal showConnectionIndicator()";
+
+        NetworkManager::VpnConnection::Ptr vpnConnection;
+        if (active->vpn()) {
+            vpnConnection = active.objectCast<NetworkManager::VpnConnection>();
+        }
+        if ((active->state() == NetworkManager::ActiveConnection::Activating) ||
+            (vpnConnection && (vpnConnection->state() == NetworkManager::VpnConnection::Prepare ||
+                               vpnConnection->state()  == NetworkManager::VpnConnection::NeedAuth ||
+                               vpnConnection->state()  == NetworkManager::VpnConnection::Connecting ||
+                               vpnConnection->state()  == NetworkManager::VpnConnection::GettingIpConfig))) {
             connect(active.data(), SIGNAL(destroyed(QObject*)),
-                    SIGNAL(hideConnectingIndicator()));
-            Q_EMIT showConnectingIndicator();
+                    SLOT(activeConnectionDestroyed()));
+            m_connecting = true;
+            NMAppletDebug() << "Emit signal connectingChanged(true)";
+            Q_EMIT connectingChanged(true);
         }
     }
 
@@ -97,13 +125,21 @@ void ConnectionIcon::activeConnectionStateChanged(NetworkManager::ActiveConnecti
         state == NetworkManager::ActiveConnection::Deactivating ||
         state == NetworkManager::ActiveConnection::Activated ||
         state == NetworkManager::ActiveConnection::Unknown) {
-        NMAppletDebug() << "Emit signal hideConnectionIndicator()";
-        Q_EMIT hideConnectingIndicator();
+        m_connecting = false;
+        NMAppletDebug() << "Emit signal connectingChanged(false)";
+        Q_EMIT connectingChanged(false);
     }
 
     setIcons();
 }
 
+void ConnectionIcon::activeConnectionDestroyed()
+{
+    m_connecting = false;
+    NMAppletDebug() << "Emit signal connectingChanged(false)";
+    Q_EMIT connectingChanged(false);
+}
+
 void ConnectionIcon::carrierChanged(bool carrier)
 {
     Q_UNUSED(carrier);
@@ -166,12 +202,25 @@ void ConnectionIcon::setIcons()
 
     foreach (const NetworkManager::ActiveConnection::Ptr & active, actives) {
         if (((active->default4() || active->default6()) && active->state() == NetworkManager::ActiveConnection::Activated) || !defaultRouteExists) {
+            NetworkManager::ActiveConnection::Ptr activeConnection;
+            if (active->vpn()) {
+                NetworkManager::ActiveConnection::Ptr activeTmp;
+                activeTmp = NetworkManager::findActiveConnection(active->specificObject());
+                if (activeTmp) {
+                    activeConnection = activeTmp;
+                }
 
-            if (active->vpn() || active->devices().isEmpty()) {
+                vpnFound = true;
+                m_connectionIndicatorIcon = "object-locked";
+                NMAppletDebug() << "Emit signal connectionIndicatorIconChanged(object-locked)";
+                Q_EMIT connectionIndicatorIconChanged("object-locked");
+            } else {
+                activeConnection = active;
+            }
+            if (activeConnection->devices().isEmpty()) {
                 continue;
             }
-
-            NetworkManager::Device::Ptr device = NetworkManager::findNetworkInterface(active->devices().first());
+            NetworkManager::Device::Ptr device = NetworkManager::findNetworkInterface(activeConnection->devices().first());
             if (device) {
                 NetworkManager::Device::Type type = device->type();
 
@@ -184,7 +233,7 @@ void ConnectionIcon::setIcons()
                         setWirelessIconForSignalStrength(100);
                         connectionFound = true;
                     } else {
-                        NetworkManager::AccessPoint::Ptr ap = wifiDevice->findAccessPoint(active->specificObject());
+                        NetworkManager::AccessPoint::Ptr ap = wifiDevice->findAccessPoint(activeConnection->specificObject());
                         if (ap) {
                             setWirelessIcon(device, ap->ssid());
                             connectionFound = true;
@@ -192,16 +241,21 @@ void ConnectionIcon::setIcons()
                     }
                 } else if (type == NetworkManager::Device::Ethernet) {
                     connectionFound = true;
-                    NMAppletDebug() << "Emit signal setConnectionIcon(network-wired-activated)";
-                    Q_EMIT setConnectionIcon("network-wired-activated");
-                    Q_EMIT setTooltipIcon("network-wired-activated");
+                    m_connectionSvgIcon = "network-wired-activated";
+                    NMAppletDebug() << "Emit signal connectionSvgIconChanged(network-wired-activated)";
+                    Q_EMIT connectionSvgIconChanged("network-wired-activated");
+                    m_connectionPixmapIcon = "network-wired-activated";
+                    Q_EMIT connectionPixmapIconChanged("network-wired-activated");
                 } else if (type == NetworkManager::Device::Modem) {
                     connectionFound = true;
 #if WITH_MODEMMANAGER_SUPPORT
                     setModemIcon(device);
 #else
-                    Q_EMIT setConnectionIcon("network-mobile-0");
-                    Q_EMIT setTooltipIcon("phone");
+                    m_connectionSvgIcon = "network-mobile-0";
+                    NMAppletDebug() << "Emit signal connectionSvgIconChanged(network-mobile-0)";
+                    Q_EMIT connectionSvgIconChanged("network-mobile-0");
+                    m_connectionPixmapIcon = "phone";
+                    Q_EMIT connectionPixmapIconChanged("phone");
 #endif
                 } else if (type == NetworkManager::Device::Bluetooth) {
                     NetworkManager::BluetoothDevice::Ptr btDevice = device.objectCast<NetworkManager::BluetoothDevice>();
@@ -211,23 +265,27 @@ void ConnectionIcon::setIcons()
 #if WITH_MODEMMANAGER_SUPPORT
                             setModemIcon(device);
 #else
-                            Q_EMIT setConnectionIcon("network-mobile-0");
-                            Q_EMIT setTooltipIcon("phone");
+                        m_connectionSvgIcon = "network-mobile-0";
+                        NMAppletDebug() << "Emit signal connectionSvgIconChanged(network-mobile-0)";
+                        Q_EMIT connectionSvgIconChanged("network-mobile-0");
+                        m_connectionPixmapIcon = "phone";
+                        Q_EMIT connectionPixmapIconChanged("phone");
 #endif
                         } else {
-                            NMAppletDebug() << "Emit signal setConnectionIcon(bluetooth)";
-                            Q_EMIT setConnectionIcon("bluetooth");
-                            Q_EMIT setTooltipIcon("preferences-system-bluetooth");
+                            m_connectionSvgIcon = "bluetooth";
+                            NMAppletDebug() << "Emit signal connectionSvgIconChanged(bluetooth)";
+                            Q_EMIT connectionSvgIconChanged("bluetooth");
+                            m_connectionPixmapIcon = "preferences-system-bluetooth";
+                            Q_EMIT connectionPixmapIconChanged("preferences-system-bluetooth");
                         }
                     }
                 }
             }
-        }
-
-        if (active->vpn() && active->state() == NetworkManager::ActiveConnection::Activated) {
+        } else if (active->vpn() && active->state() == NetworkManager::ActiveConnection::Activated) {
             vpnFound = true;
-            NMAppletDebug() << "Emit signal setHoverIcon(object-locked)";
-            Q_EMIT setHoverIcon("object-locked");
+            m_connectionIndicatorIcon = "object-locked";
+            NMAppletDebug() << "Emit signal connectionIndicatorIconChanged(object-locked)";
+            Q_EMIT connectionIndicatorIconChanged("object-locked");
         }
     }
 
@@ -236,8 +294,9 @@ void ConnectionIcon::setIcons()
     }
 
     if (!vpnFound && connectionFound) {
-        NMAppletDebug() << "Emit signal unsetHoverIcon()";
-        Q_EMIT unsetHoverIcon();
+        m_connectionIndicatorIcon.clear();
+        NMAppletDebug() << "Emit signal connectionIndicatorIconChanged()";
+        Q_EMIT connectionIndicatorIconChanged(QString());
     }
 }
 
@@ -245,11 +304,14 @@ void ConnectionIcon::setDisconnectedIcon()
 {
     if (NetworkManager::status() == NetworkManager::Unknown ||
         NetworkManager::status() == NetworkManager::Asleep) {
-        NMAppletDebug() << "Emit signal setConnectionIcon(network-wired)";
-        Q_EMIT setConnectionIcon("network-wired");
-        Q_EMIT setTooltipIcon("network-wired");
+        m_connectionSvgIcon = "network-wired";
+        NMAppletDebug() << "Emit signal connectionSvgIconChanged(network-wired)";
+        Q_EMIT connectionSvgIconChanged("network-wired");
+        m_connectionPixmapIcon = "network-wired";
+        Q_EMIT connectionPixmapIconChanged("network-wired");
         NMAppletDebug() << "Emit signal setHoverIcon(dialog-error)";
-        Q_EMIT setHoverIcon("dialog-error");
+        m_connectionIndicatorIcon = "dialog-error";
+        Q_EMIT connectionIndicatorIconChanged("dialog-error");
         return;
     }
 
@@ -275,29 +337,44 @@ void ConnectionIcon::setDisconnectedIcon()
     }
 
     if (wired) {
-        NMAppletDebug() << "Emit signal setConnectionIcon(network-wired)";
-        Q_EMIT setConnectionIcon("network-wired");
-        Q_EMIT setTooltipIcon("network-wired");
-        Q_EMIT setHoverIcon("dialog-cancel");
+        NMAppletDebug() << "Emit signal connectionSvgIconChanged(network-wired)";
+        m_connectionSvgIcon = "network-wired";
+        Q_EMIT connectionSvgIconChanged("network-wired");
+        m_connectionPixmapIcon = "network-wired";
+        Q_EMIT connectionPixmapIconChanged("network-wired");
+        NMAppletDebug() << "Emit signal connectionIndicatorIconChanged(dialog-cancel)";
+        m_connectionIndicatorIcon = "dialog-cancel";
+        Q_EMIT connectionIndicatorIconChanged("dialog-cancel");
         return;
     } else if (modem) {
-        NMAppletDebug() << "Emit signal setConnectionIcon(network-mobile)";
-        Q_EMIT setConnectionIcon("network-mobile-0");
-        Q_EMIT setTooltipIcon("phone");
-        Q_EMIT setHoverIcon("dialog-cancel");
+        NMAppletDebug() << "Emit signal connectionSvgIconChanged(network-mobile-0)";
+        m_connectionSvgIcon = "network-mobile-0";
+        Q_EMIT connectionSvgIconChanged("network-mobile-0");
+        m_connectionPixmapIcon = "phone";
+        Q_EMIT connectionPixmapIconChanged("phone");
+        NMAppletDebug() << "Emit signal connectionIndicatorIconChanged(dialog-cancel)";
+        m_connectionIndicatorIcon = "dialog-cancel";
+        Q_EMIT connectionIndicatorIconChanged("dialog-cancel");
         return;
     } else if (wireless) {
-        NMAppletDebug() << "Emit signal setConnectionIcon(network-wireless-0)";
-        Q_EMIT setConnectionIcon("network-wireless-0");
-        Q_EMIT setTooltipIcon("network-wireless-connected-00");
-        Q_EMIT setHoverIcon("dialog-cancel");
+        NMAppletDebug() << "Emit signal connectionSvgIconChanged(network-wireless-0)";
+        m_connectionSvgIcon = "network-wireless-0";
+        Q_EMIT connectionSvgIconChanged("network-wireless-0");
+        m_connectionPixmapIcon = "network-wireless-connected-00";
+        Q_EMIT connectionPixmapIconChanged("network-wireless-connected-00");
+        NMAppletDebug() << "Emit signal connectionIndicatorIconChanged(dialog-cancel)";
+        m_connectionIndicatorIcon = "dialog-cancel";
+        Q_EMIT connectionIndicatorIconChanged("dialog-cancel");
         return;
     }  else {
-        NMAppletDebug() << "Emit signal setConnectionIcon(network-wired)";
-        Q_EMIT setConnectionIcon("network-wired");
-        Q_EMIT setTooltipIcon("network-wired");
-        Q_EMIT setHoverIcon("dialog-error");
-        return;
+        NMAppletDebug() << "Emit signal connectionSvgIconChanged(network-wired)";
+        m_connectionSvgIcon = "network-wired";
+        Q_EMIT connectionSvgIconChanged("network-wired");
+        m_connectionPixmapIcon = "network-wired";
+        Q_EMIT connectionPixmapIconChanged("network-wired");
+        NMAppletDebug() << "Emit signal connectionIndicatorIconChanged(dialog-cancel)";
+        m_connectionIndicatorIcon = "dialog-cancel";
+        Q_EMIT connectionIndicatorIconChanged("dialog-cancel");
     }
 }
 #if WITH_MODEMMANAGER_SUPPORT
@@ -306,8 +383,9 @@ void ConnectionIcon::setModemIcon(const NetworkManager::Device::Ptr & device)
     NetworkManager::ModemDevice::Ptr modemDevice = device.objectCast<NetworkManager::ModemDevice>();
 
     if (!modemDevice) {
-        NMAppletDebug() << "Emit signal setConnectionIcon(network-mobile-100)";
-        Q_EMIT setConnectionIcon("network-mobile-100");
+        m_connectionSvgIcon = "network-mobile-100";
+        NMAppletDebug() << "Emit signal connectionSvgIconChanged(network-mobile-100)";
+        Q_EMIT connectionSvgIconChanged("network-mobile-100");
 
         return;
     }
@@ -340,9 +418,11 @@ void ConnectionIcon::setModemIcon(const NetworkManager::Device::Ptr & device)
         setIconForModem();
 #endif
     } else {
-        NMAppletDebug() << "Emit signal setConnectionIcon(network-mobile)";
-        Q_EMIT setConnectionIcon("network-mobile-0");
-        Q_EMIT setTooltipIcon("phone");
+        NMAppletDebug() << "Emit signal connectionSvgIconChanged(network-mobile)";
+        m_connectionSvgIcon = "network-mobile-0";
+        Q_EMIT connectionSvgIconChanged("network-mobile-0");
+        m_connectionPixmapIcon = "phone";
+        Q_EMIT connectionPixmapIconChanged("phone");
         return;
     }
 }
@@ -457,9 +537,11 @@ void ConnectionIcon::setIconForModem()
             break;
     }
 #endif
-    NMAppletDebug() << "Emit signal setConnectionIcon(" << QString(result).arg(strength) << ")";
-    Q_EMIT setConnectionIcon(QString(result).arg(strength));
-    Q_EMIT setTooltipIcon("phone");
+    NMAppletDebug() << "Emit signal connectionSvgIconChanged(" << QString(result).arg(strength) << ")";
+    m_connectionSvgIcon = QString(result).arg(strength);
+    Q_EMIT connectionSvgIconChanged(QString(result).arg(strength));
+    m_connectionPixmapIcon = "phone";
+    Q_EMIT connectionPixmapIconChanged("phone");
 }
 #endif
 void ConnectionIcon::setWirelessIcon(const NetworkManager::Device::Ptr &device, const QString& ssid)
@@ -491,34 +573,43 @@ void ConnectionIcon::setWirelessIconForSignalStrength(int strength)
 
         if (strength < 20) {
             iconStrength = 20;
-            Q_EMIT setTooltipIcon("network-wireless-connected-25");
+            m_connectionPixmapIcon = "network-wireless-connected-25";
+            Q_EMIT connectionPixmapIconChanged("network-wireless-connected-25");
         } else if (strength < 25) {
             iconStrength = 25;
-            Q_EMIT setTooltipIcon("network-wireless-connected-25");
+            m_connectionPixmapIcon = "network-wireless-connected-25";
+            Q_EMIT connectionPixmapIconChanged("network-wireless-connected-25");
         } else if (strength < 40) {
             iconStrength = 40;
-            Q_EMIT setTooltipIcon("network-wireless-connected-50");
+            m_connectionPixmapIcon = "network-wireless-connected-50";
+            Q_EMIT connectionPixmapIconChanged("network-wireless-connected-50");
         } else if (strength < 50) {
             iconStrength = 50;
-            Q_EMIT setTooltipIcon("network-wireless-connected-50");
+            m_connectionPixmapIcon = "network-wireless-connected-50";
+            Q_EMIT connectionPixmapIconChanged("network-wireless-connected-50");
         } else if (strength < 60) {
             iconStrength = 60;
-            Q_EMIT setTooltipIcon("network-wireless-connected-75");
+            m_connectionPixmapIcon = "network-wireless-connected-75";
+            Q_EMIT connectionPixmapIconChanged("network-wireless-connected-75");
         } else if (strength < 75) {
             iconStrength = 75;
-            Q_EMIT setTooltipIcon("network-wireless-connected-75");
+            m_connectionPixmapIcon = "network-wireless-connected-75";
+            Q_EMIT connectionPixmapIconChanged("network-wireless-connected-75");
         } else if (strength < 80) {
             iconStrength = 80;
-            Q_EMIT setTooltipIcon("network-wireless-connected-100");
+            m_connectionPixmapIcon = "network-wireless-connected-100";
+            Q_EMIT connectionPixmapIconChanged("network-wireless-connected-100");
         } else {
-            Q_EMIT setTooltipIcon("network-wireless-connected-100");
+            m_connectionPixmapIcon = "network-wireless-connected-100";
+            Q_EMIT connectionPixmapIconChanged("network-wireless-connected-100");
         }
 
         m_signal = iconStrength;
 
         QString icon = QString("network-wireless-%1").arg(iconStrength);
 
-        NMAppletDebug() << "Emit signal setConnectionIcon(" << icon << ")";
-        Q_EMIT setConnectionIcon(icon);
+        m_connectionSvgIcon = icon;
+        NMAppletDebug() << "Emit signal connectionSvgIconChanged(" << icon << ")";
+        Q_EMIT connectionSvgIconChanged(icon);
     }
 }
diff --git a/declarative-plugins/applet/connectionicon.h b/declarative-plugins/applet/connectionicon.h
index dd13b1e..fb4695d 100644
--- a/declarative-plugins/applet/connectionicon.h
+++ b/declarative-plugins/applet/connectionicon.h
@@ -36,17 +36,40 @@
 
 class ConnectionIcon : public QObject
 {
+/**
+ * Returns true when NetworkManager is trying to activate some connection
+ */
+Q_PROPERTY(bool connecting READ connecting NOTIFY connectingChanged)
+/**
+ * Returns an elementId of SVG icon in plasma-nm icon set for the main active connection
+ */
+Q_PROPERTY(QString connectionSvgIcon READ connectionSvgIcon NOTIFY connectionSvgIconChanged)
+/**
+ * Returns a pixmap icon name from Oxygen icon set for the main active connection
+ */
+Q_PROPERTY(QString connectionPixmapIcon READ connectionPixmapIcon NOTIFY connectionPixmapIconChanged)
+/**
+ * Returns a pixmap icon name from Oxygen icon set which should be used as an indicator of NM status
+ * Current indicators:
+ * 1) object-locked - indicates active VPN connection
+ * 2) dialog-cancel - indicates no active connection
+ * 3) dialog-error - indicates that NetworkManager is not active
+ */
+Q_PROPERTY(QString connectionIndicatorIcon READ connectionIndicatorIcon NOTIFY connectionIndicatorIconChanged)
 Q_OBJECT
 public:
     explicit ConnectionIcon(QObject* parent = 0);
     virtual ~ConnectionIcon();
 
-public Q_SLOTS:
-    void init();
+    bool connecting() const;
+    QString connectionSvgIcon() const;
+    QString connectionIndicatorIcon() const;
+    QString connectionPixmapIcon() const;
 
 private Q_SLOTS:
     void activeConnectionsChanged();
     void activeConnectionStateChanged(NetworkManager::ActiveConnection::State state);
+    void activeConnectionDestroyed();
     void carrierChanged(bool carrier);
     void deviceAdded(const QString & device);
     void deviceRemoved(const QString & device);
@@ -58,17 +81,20 @@ private Q_SLOTS:
     void setIconForModem();
 #endif
 Q_SIGNALS:
-    void hideConnectingIndicator();
-    void showConnectingIndicator();
-    void setConnectionIcon(const QString & icon);
-    void setHoverIcon(const QString & icon);
-    void setTooltipIcon(const QString & icon);
-    void unsetHoverIcon();
+    void connectingChanged(bool connecting);
+    void connectionSvgIconChanged(const QString & icon);
+    void connectionIndicatorIconChanged(const QString & icon);
+    void connectionPixmapIconChanged(const QString & icon);
 
 private:
     uint m_signal;
     NetworkManager::WirelessNetwork::Ptr m_wirelessNetwork;
 
+    bool m_connecting;
+    QString m_connectionSvgIcon;
+    QString m_connectionIndicatorIcon;
+    QString m_connectionPixmapIcon;
+
     void setDisconnectedIcon();
     void setWirelessIcon(const NetworkManager::Device::Ptr & device, const QString & ssid);
 #if WITH_MODEMMANAGER_SUPPORT
diff --git a/declarative-plugins/applet/enabledconnections.cpp b/declarative-plugins/applet/enabledconnections.cpp
index 6cf91a7..2d536d9 100644
--- a/declarative-plugins/applet/enabledconnections.cpp
+++ b/declarative-plugins/applet/enabledconnections.cpp
@@ -25,44 +25,116 @@
 
 #include "debug.h"
 
-EnabledConnections::EnabledConnections(QObject* parent):
-    QObject(parent)
-{
-}
-
-EnabledConnections::~EnabledConnections()
-{
-}
-
-void EnabledConnections::init()
+EnabledConnections::EnabledConnections(QObject* parent)
+    : QObject(parent)
+    , m_networkingEnabled(NetworkManager::isNetworkingEnabled())
+    , m_wirelessEnabled(NetworkManager::isWirelessEnabled())
+    , m_wirelessHwEnabled(NetworkManager::isWirelessHardwareEnabled())
+    , m_wimaxEnabled(NetworkManager::isWimaxEnabled())
+    , m_wimaxHwEnabled(NetworkManager::isWimaxHardwareEnabled())
+    , m_wwanEnabled(NetworkManager::isWwanEnabled())
+    , m_wwanHwEnabled(NetworkManager::isWwanHardwareEnabled())
 {
     connect(NetworkManager::notifier(), SIGNAL(networkingEnabledChanged(bool)),
-            SIGNAL(networkingEnabled(bool)));
+            SLOT(onNetworkingEnabled(bool)));
     connect(NetworkManager::notifier(), SIGNAL(wirelessEnabledChanged(bool)),
-            SIGNAL(wirelessEnabled(bool)));
+            SLOT(onWirelessEnabled(bool)));
     connect(NetworkManager::notifier(), SIGNAL(wirelessHardwareEnabledChanged(bool)),
-            SIGNAL(wirelessHwEnabled(bool)));
+            SLOT(onWirelessHwEnabled(bool)));
     connect(NetworkManager::notifier(), SIGNAL(wimaxEnabledChanged(bool)),
-            SIGNAL(wimaxEnabled(bool)));
+            SLOT(onWimaxEnabled(bool)));
     connect(NetworkManager::notifier(), SIGNAL(wimaxHardwareEnabledChanged(bool)),
-            SIGNAL(wimaxHwEnabled(bool)));
+            SLOT(onWimaxHwEnabled(bool)));
     connect(NetworkManager::notifier(), SIGNAL(wwanEnabledChanged(bool)),
-            SIGNAL(wwanEnabled(bool)));
+            SLOT(onWwanEnabled(bool)));
     connect(NetworkManager::notifier(), SIGNAL(wwanHardwareEnabledChanged(bool)),
-            SIGNAL(wwanHwEnabled(bool)));
-
-    NMAppletDebug() << "Emit signal networkingEnabled(" << NetworkManager::isNetworkingEnabled() << ")";
-    Q_EMIT networkingEnabled(NetworkManager::isNetworkingEnabled());
-    NMAppletDebug() << "Emit signal wirelessEnabled(" << NetworkManager::isWirelessEnabled() << ")";
-    Q_EMIT wirelessEnabled(NetworkManager::isWirelessEnabled());
-    NMAppletDebug() << "Emit signal wirelessHwEnabled(" << NetworkManager::isWirelessHardwareEnabled() << ")";
-    Q_EMIT wirelessHwEnabled(NetworkManager::isWirelessHardwareEnabled());
-    NMAppletDebug() << "Emit signal wimaxEnabled(" << NetworkManager::isWimaxEnabled() << ")";
-    Q_EMIT wimaxEnabled(NetworkManager::isWimaxEnabled());
-    NMAppletDebug() << "Emit signal wimaxHwEnabled(" << NetworkManager::isWimaxHardwareEnabled() << ")";
-    Q_EMIT wimaxHwEnabled(NetworkManager::isWimaxHardwareEnabled());
-    NMAppletDebug() << "Emit signal wwanEnabled(" << NetworkManager::isWwanEnabled() << ")";
-    Q_EMIT wwanEnabled(NetworkManager::isWwanEnabled());
-    NMAppletDebug() << "Emit signal wwanHWEnabled(" << NetworkManager::isWwanHardwareEnabled() << ")";
-    Q_EMIT wwanHwEnabled(NetworkManager::isWwanHardwareEnabled());
+            SLOT(onWwanHwEnabled(bool)));
+}
+
+EnabledConnections::~EnabledConnections()
+{
+}
+
+bool EnabledConnections::isNetworkingEnabled() const
+{
+    return m_networkingEnabled;
+}
+
+bool EnabledConnections::isWirelessEnabled() const
+{
+    return m_wirelessEnabled;
+}
+
+bool EnabledConnections::isWirelessHwEnabled() const
+{
+    return m_wirelessHwEnabled;
+}
+
+bool EnabledConnections::isWimaxEnabled() const
+{
+    return m_wimaxEnabled;
+}
+
+bool EnabledConnections::isWimaxHwEnabled() const
+{
+    return m_wimaxHwEnabled;
+}
+
+bool EnabledConnections::isWwanEnabled() const
+{
+    return m_wwanEnabled;
+}
+
+bool EnabledConnections::isWwanHwEnabled() const
+{
+    return m_wwanHwEnabled;
+}
+
+void EnabledConnections::onNetworkingEnabled(bool enabled)
+{
+    m_networkingEnabled = enabled;
+    NMAppletDebug() << "Emit signal networkingEnabled(" << enabled << ")";
+    Q_EMIT networkingEnabled(enabled);
+}
+
+void EnabledConnections::onWirelessEnabled(bool enabled)
+{
+    m_wirelessEnabled = enabled;
+    NMAppletDebug() << "Emit signal wirelessEnabled(" << enabled << ")";
+    Q_EMIT wirelessEnabled(enabled);
+}
+
+void EnabledConnections::onWirelessHwEnabled(bool enabled)
+{
+    m_wirelessHwEnabled = enabled;
+    NMAppletDebug() << "Emit signal wirelessHwEnabled(" << enabled << ")";
+    Q_EMIT wirelessHwEnabled(enabled);
+}
+
+void EnabledConnections::onWimaxEnabled(bool enabled)
+{
+    m_wimaxEnabled = true;
+    NMAppletDebug() << "Emit signal wimaxEnabled(" << enabled << ")";
+    Q_EMIT wimaxEnabled(enabled);
+}
+
+void EnabledConnections::onWimaxHwEnabled(bool enabled)
+{
+    m_wimaxHwEnabled = enabled;
+    NMAppletDebug() << "Emit signal wimaxHwEnabled(" << enabled << ")";
+    Q_EMIT wimaxHwEnabled(enabled);
+}
+
+void EnabledConnections::onWwanEnabled(bool enabled)
+{
+    m_wwanEnabled = true;
+    NMAppletDebug() << "Emit signal wwanEnabled(" << enabled << ")";
+    Q_EMIT wwanEnabled(enabled);
+}
+
+void EnabledConnections::onWwanHwEnabled(bool enabled)
+{
+    m_wwanHwEnabled = enabled;
+    NMAppletDebug() << "Emit signal wwanHWEnabled(" << enabled << ")";
+    Q_EMIT wwanHwEnabled(enabled);
 }
diff --git a/declarative-plugins/applet/enabledconnections.h b/declarative-plugins/applet/enabledconnections.h
index bd6ba2d..088f37a 100644
--- a/declarative-plugins/applet/enabledconnections.h
+++ b/declarative-plugins/applet/enabledconnections.h
@@ -25,13 +25,55 @@
 
 class EnabledConnections : public QObject
 {
+/**
+ * Indicates if overall networking is currently enabled or not
+ */
+Q_PROPERTY(bool networkingEnabled READ isNetworkingEnabled NOTIFY networkingEnabled)
+/**
+ * Indicates if wireless is currently enabled or not
+ */
+Q_PROPERTY(bool wirelessEnabled READ isWirelessEnabled NOTIFY wirelessEnabled)
+/**
+ * Indicates if the wireless hardware is currently enabled, i.e. the state of the RF kill switch
+ */
+Q_PROPERTY(bool wirelessHwEnabled READ isWirelessHwEnabled NOTIFY wirelessHwEnabled)
+/**
+ * Indicates if WiMAX devices are currently enabled or not
+ */
+Q_PROPERTY(bool wimaxEnabled READ isWimaxEnabled NOTIFY wimaxEnabled)
+/**
+ * Indicates if the WiMAX hardware is currently enabled, i.e. the state of the RF kill switch.
+ */
+Q_PROPERTY(bool wimaxHwEnabled READ isWimaxHwEnabled NOTIFY wimaxHwEnabled)
+/**
+ * Indicates if mobile broadband devices are currently enabled or not.
+ */
+Q_PROPERTY(bool wwanEnabled READ isWwanEnabled NOTIFY wwanEnabled)
+/**
+ * Indicates if the mobile broadband hardware is currently enabled, i.e. the state of the RF kill switch.
+ */
+Q_PROPERTY(bool wwanHwEnabled READ isWwanHwEnabled NOTIFY wwanHwEnabled)
 Q_OBJECT
 public:
     explicit EnabledConnections(QObject* parent = 0);
     virtual ~EnabledConnections();
 
+    bool isNetworkingEnabled() const;
+    bool isWirelessEnabled() const;
+    bool isWirelessHwEnabled() const;
+    bool isWimaxEnabled() const;
+    bool isWimaxHwEnabled() const;
+    bool isWwanEnabled() const;
+    bool isWwanHwEnabled() const;
+
 public Q_SLOTS:
-    void init();
+    void onNetworkingEnabled(bool enabled);
+    void onWirelessEnabled(bool enabled);
+    void onWirelessHwEnabled(bool enabled);
+    void onWimaxEnabled(bool enabled);
+    void onWimaxHwEnabled(bool enabled);
+    void onWwanEnabled(bool enabled);
+    void onWwanHwEnabled(bool enabled);
 
 Q_SIGNALS:
     void networkingEnabled(bool enabled);
@@ -41,6 +83,15 @@ Q_SIGNALS:
     void wimaxHwEnabled(bool enabled);
     void wwanEnabled(bool enabled);
     void wwanHwEnabled(bool enabled);
+
+private:
+    bool m_networkingEnabled;
+    bool m_wirelessEnabled;
+    bool m_wirelessHwEnabled;
+    bool m_wimaxEnabled;
+    bool m_wimaxHwEnabled;
+    bool m_wwanEnabled;
+    bool m_wwanHwEnabled;
 };
 
 #endif // PLASMA_NM_ENABLED_CONNECTIONS_H
diff --git a/declarative-plugins/applet/globalconfig.cpp b/declarative-plugins/applet/globalconfig.cpp
index c575420..e823a70 100644
--- a/declarative-plugins/applet/globalconfig.cpp
+++ b/declarative-plugins/applet/globalconfig.cpp
@@ -35,15 +35,15 @@ GlobalConfig* GlobalConfig::instance()
 }
 
 // This is called from instance()
-GlobalConfig::GlobalConfig(void *dummy):
-    QObject()
+GlobalConfig::GlobalConfig(void *dummy)
+    : QObject()
 {
     Q_UNUSED(dummy);
 }
 
 // This one is called when instantiated in QML
-GlobalConfig::GlobalConfig():
-    QObject()
+GlobalConfig::GlobalConfig()
+    : QObject()
 {
     GlobalConfig *singleton = instance();
 
diff --git a/declarative-plugins/applet/networkstatus.cpp b/declarative-plugins/applet/networkstatus.cpp
index d63066d..873dbeb 100644
--- a/declarative-plugins/applet/networkstatus.cpp
+++ b/declarative-plugins/applet/networkstatus.cpp
@@ -29,26 +29,30 @@
 
 #include <KLocalizedString>
 
-
-
-NetworkStatus::NetworkStatus(QObject* parent):
-    QObject(parent)
+NetworkStatus::NetworkStatus(QObject* parent)
+    : QObject(parent)
 {
+    connect(NetworkManager::notifier(), SIGNAL(statusChanged(NetworkManager::Status)),
+            SLOT(statusChanged(NetworkManager::Status)));
+    connect(NetworkManager::notifier(), SIGNAL(activeConnectionsChanged()),
+            SLOT(activeConnectionsChanged()));
+
+    activeConnectionsChanged();
+    statusChanged(NetworkManager::status());
 }
 
 NetworkStatus::~NetworkStatus()
 {
 }
 
-void NetworkStatus::init()
+QString NetworkStatus::activeConnections() const
 {
-    connect(NetworkManager::notifier(), SIGNAL(statusChanged(NetworkManager::Status)),
-            SLOT(statusChanged(NetworkManager::Status)));
-    connect(NetworkManager::notifier(), SIGNAL(activeConnectionsChanged()),
-            SLOT(activeConnectionsChanged()));
+    return m_activeConnections;
+}
 
-    activeConnectionsChanged();
-    statusChanged(NetworkManager::status());
+QString NetworkStatus::networkStatus() const
+{
+    return m_networkStatus;
 }
 
 void NetworkStatus::activeConnectionsChanged()
@@ -59,10 +63,10 @@ void NetworkStatus::activeConnectionsChanged()
         connect(active.data(), SIGNAL(default6Changed(bool)),
                 SLOT(defaultChanged()), Qt::UniqueConnection);
         connect(active.data(), SIGNAL(stateChanged(NetworkManager::ActiveConnection::State)),
-                SLOT(changeTooltip()));
+                SLOT(changeActiveConnections()));
     }
 
-    changeTooltip();
+    changeActiveConnections();
 }
 
 void NetworkStatus::defaultChanged()
@@ -72,55 +76,40 @@ void NetworkStatus::defaultChanged()
 
 void NetworkStatus::statusChanged(NetworkManager::Status status)
 {
-    QString statusMsg;
-    bool connected = false;
-    bool inProgress = false;
-
     if (status == NetworkManager::Connected ||
         status == NetworkManager::ConnectedLinkLocal ||
         status == NetworkManager::ConnectedSiteOnly) {
 
-        statusMsg = i18n("Connected");
-        connected = true;
-        inProgress = false;
-        changeTooltip();
+        m_networkStatus = i18n("Connected");
+        changeActiveConnections();
     } else {
         switch (status) {
             case NetworkManager::Asleep:
-                statusMsg = i18n("Inactive");
-                connected = false;
-                inProgress = false;
+                m_networkStatus = i18n("Inactive");
                 break;
             case NetworkManager::Disconnected:
-                statusMsg = i18n("Disconnected");
-                connected = false;
-                inProgress = false;
+                m_networkStatus = i18n("Disconnected");
                 break;
             case NetworkManager::Disconnecting:
-                statusMsg = i18n("Disconnecting");
-                connected = true;
-                inProgress = true;
+                m_networkStatus = i18n("Disconnecting");
                 break;
             case NetworkManager::Connecting:
-                statusMsg = i18n("Connecting");
-                connected = false;
-                inProgress = true;
+                m_networkStatus = i18n("Connecting");
                 break;
             default:
-                statusMsg = checkUnknownReason();
-                connected = false;
-                inProgress = false;
+                m_networkStatus = checkUnknownReason();
                 break;
         }
 
-        Q_EMIT setTooltip(statusMsg);
+        m_activeConnections = m_networkStatus;
+        Q_EMIT activeConnectionsChanged(m_activeConnections);
     }
 
-    NMAppletDebug() << "Emit signal setNetworkStatus(" << statusMsg << ", " << connected << ", " << inProgress << ")";
-    Q_EMIT setGlobalStatus(statusMsg, connected, inProgress);
+    NMAppletDebug() << "Emit signal networkStatusChanged(" << m_networkStatus << ")";
+    Q_EMIT networkStatusChanged(m_networkStatus);
 }
 
-void NetworkStatus::changeTooltip()
+void NetworkStatus::changeActiveConnections()
 {
     if (NetworkManager::status() != NetworkManager::Connected &&
         NetworkManager::status() != NetworkManager::ConnectedLinkLocal &&
@@ -128,9 +117,9 @@ void NetworkStatus::changeTooltip()
         return;
     }
 
-    QString tooltip = "<qt>";
-    QString format = "<b>%1 - %2</b><br>%3<br><br>";
-    QString formatDefault = "<b>%1 - %2</b><br><b>%3</b><br><br>";
+    QString activeConnections = "<qt>";
+    const QString format = "<b>%1 - %2</b><br>%3<br><br>";
+    const QString formatDefault = "<b>%1 - %2</b><br><b>%3</b><br><br>";
 
     foreach (const NetworkManager::ActiveConnection::Ptr & active, NetworkManager::activeConnections()) {
         if (!active->devices().isEmpty()) {
@@ -145,7 +134,6 @@ void NetworkStatus::changeTooltip()
                 } else {
                     devName = device->ipInterfaceName();
                 }
-//                 conType = NetworkManager::ConnectionSettings::typeAsString(active->connection()->settings()->connectionType());
                 if (active->vpn()) {
                     conType = i18n("VPN Connection");
                 } else {
@@ -157,19 +145,20 @@ void NetworkStatus::changeTooltip()
                     status = i18n("Connecting to %1", active->connection()->name());
                 }
                 if (active->default4() || active->default6()) {
-                    tooltip += QString(formatDefault).arg(devName, conType, status);
+                    activeConnections += QString(formatDefault).arg(devName, conType, status);
                 } else {
-                    tooltip += QString(format).arg(devName, conType, status);
+                    activeConnections += QString(format).arg(devName, conType, status);
                 }
             }
         }
     }
 
-    tooltip += "</qt>";
+    activeConnections += "</qt>";
     // Remove the last two new lines
-    tooltip.replace("<br><br></qt>", "</qt>");
+    activeConnections.replace("<br><br></qt>", "</qt>");
 
-    Q_EMIT setTooltip(tooltip);
+    m_activeConnections = activeConnections;
+    Q_EMIT activeConnectionsChanged(activeConnections);
 }
 
 QString NetworkStatus::checkUnknownReason() const
diff --git a/declarative-plugins/applet/networkstatus.h b/declarative-plugins/applet/networkstatus.h
index 87b7d47..4afd587 100644
--- a/declarative-plugins/applet/networkstatus.h
+++ b/declarative-plugins/applet/networkstatus.h
@@ -28,24 +28,36 @@
 
 class NetworkStatus : public QObject
 {
+/**
+ * Returns a formated list of active connections or NM status when there is no active connection
+ */
+Q_PROPERTY(QString activeConnections READ activeConnections NOTIFY activeConnectionsChanged)
+/**
+ * Returns the current status of NetworkManager
+ */
+Q_PROPERTY(QString networkStatus READ networkStatus NOTIFY networkStatusChanged)
 Q_OBJECT
 public:
     explicit NetworkStatus(QObject* parent = 0);
     virtual ~NetworkStatus();
 
-public Q_SLOTS:
-    void init();
+    QString activeConnections() const;
+    QString networkStatus() const;
 
 private Q_SLOTS:
     void activeConnectionsChanged();
     void defaultChanged();
     void statusChanged(NetworkManager::Status status);
-    void changeTooltip();
+    void changeActiveConnections();
+
 Q_SIGNALS:
-    void setGlobalStatus(const QString & status, bool connected, bool inProgress);
-    void setTooltip(const QString & text);
+    void activeConnectionsChanged(const QString & activeConnections);
+    void networkStatusChanged(const QString & status);
 
 private:
+    QString m_activeConnections;
+    QString m_networkStatus;
+
     QString checkUnknownReason() const;
 };
 
diff --git a/declarative-plugins/applet/trafficmonitor.cpp b/declarative-plugins/applet/trafficmonitor.cpp
index 16be4ba..76ff486 100644
--- a/declarative-plugins/applet/trafficmonitor.cpp
+++ b/declarative-plugins/applet/trafficmonitor.cpp
@@ -34,10 +34,10 @@
 #include "globalconfig.h"
 #include "debug.h"
 
-TrafficMonitor::TrafficMonitor(QGraphicsItem* parent):
-    QGraphicsWidget(parent, 0),
-    m_device(0),
-    m_updateEnabled(false)
+TrafficMonitor::TrafficMonitor(QGraphicsItem* parent)
+    : QGraphicsWidget(parent, 0)
+    , m_device(0)
+    , m_updateEnabled(false)
 {
     QGraphicsLinearLayout * layout = new QGraphicsLinearLayout(this);
     layout->setOrientation(Qt::Vertical);
diff --git a/declarative-plugins/handler.cpp b/declarative-plugins/handler.cpp
index 08bb078..4fc129a 100644
--- a/declarative-plugins/handler.cpp
+++ b/declarative-plugins/handler.cpp
@@ -41,8 +41,8 @@
 #include <KProcess>
 #include <KWindowSystem>
 
-Handler::Handler(QObject* parent):
-    QObject(parent)
+Handler::Handler(QObject* parent)
+    : QObject(parent)
 {
 }
 
diff --git a/declarative-plugins/handler.h b/declarative-plugins/handler.h
index ebd064e..43a148b 100644
--- a/declarative-plugins/handler.h
+++ b/declarative-plugins/handler.h
@@ -32,15 +32,47 @@ public:
     virtual ~Handler();
 
 public Q_SLOTS:
+    /**
+     * Activates given connection
+     * @connection - d-bus path of the connection you want to activate
+     * @device - d-bus path of the device where the connection should be activated
+     * @specificParameter - d-bus path of the specific object you want to use for this activation, i.e access point
+     */
     void activateConnection(const QString & connection, const QString & device, const QString & specificParameter);
+    /**
+     * Adds and activates a new wireless connection
+     * @device - d-bus path of the wireless device where the connection should be activated
+     * @specificParameter - d-bus path of the accesspoint you want to connect to
+     * @password - pre-filled password which should be used for the new wireless connection
+     * @autoConnect - boolean value whether this connection should be activated automatically when it's available
+     *
+     * Works automatically for wireless connections with WEP/WPA security, for wireless connections with WPA/WPA
+     * it will open the connection editor for advanced configuration.
+     * */
     void addAndActivateConnection(const QString & device, const QString & specificParameter, const QString & password = QString(), bool autoConnect = false);
+    /**
+     * Deactivates given connection
+     * @connection - d-bus path of the connection you want to deactivate
+     * @device - d-bus path of the connection where the connection is activated
+     */
     void deactivateConnection(const QString & connection, const QString & device);
+    /**
+     * Disconnects all connections
+     */
     void disconnectAll();
     void enableNetworking(bool enable);
     void enableWireless(bool enable);
     void enableWimax(bool enable);
     void enableWwan(bool enable);
+    /**
+     * Opens connection editor for given connection
+     * @uuid - uuid of the connection you want to edit
+     */
     void editConnection(const QString & uuid);
+    /**
+     * Removes given connection
+     * @connection - d-bus path of the connection you want to edit
+     */
     void removeConnection(const QString & connection);
     void openEditor();
 
diff --git a/declarative-plugins/model/model.cpp b/declarative-plugins/model/model.cpp
index 1b3f4c3..dcd4378 100644
--- a/declarative-plugins/model/model.cpp
+++ b/declarative-plugins/model/model.cpp
@@ -27,9 +27,9 @@
 
 #include "debug.h"
 
-Model::Model(QObject* parent):
-    QAbstractListModel(parent),
-    m_monitor(new Monitor(this))
+Model::Model(QObject* parent)
+    : QAbstractListModel(parent)
+    , m_monitor(new Monitor(this))
 {
     QHash<int, QByteArray> roles = roleNames();
     roles[ConnectionStateRole] = "itemConnectionState";
@@ -230,7 +230,7 @@ void Model::addConnection(const QString& connection, const QString& device)
 {
     NetworkManager::Connection::Ptr con = NetworkManager::findConnection(connection);
 
-    if (con->settings()->isSlave()) {
+    if (con->settings()->isSlave() || con->name().isEmpty() || con->uuid().isEmpty()) {
         return;
     }
 
@@ -395,7 +395,11 @@ void Model::removeWirelessNetwork(const QString& ssid, const QString& device)
         if (wirelessDevice) {
             accessPoint = wirelessDevice->findAccessPoint(item->specificPath());
         }
-        if (accessPoint && accessPoint->mode() == NetworkManager::AccessPoint::Adhoc &&
+
+        // When accesspoint in ad-hoc mode dissapears, we should remove the item only when there is no connection. Similar case is when
+        // a wireless device is in AP mode, but in this case there could be only one visible AP and this should always be associated with some connection.
+        if (accessPoint && ((accessPoint->mode() == NetworkManager::AccessPoint::Adhoc && !item->connectionPath().isEmpty()) ||
+                            wirelessDevice->mode() == NetworkManager::WirelessDevice::ApMode) &&
             NetworkManager::isWirelessEnabled() && NetworkManager::isWirelessHardwareEnabled()) {
             item->setWirelessNetwork(QString());
             if (updateItem(item)) {
@@ -455,22 +459,11 @@ void Model::insertItem(ModelItem * item)
 {
     bool found = false;
     bool updated = false;
+
     foreach (ModelItem * it, m_items.items()) {
-        // Check for duplicity
+        // Check whether the items are equal, it means they have same UUID or SSID
         if (it->operator==(item)) {
             found = true;
-
-            // Update info
-            if (it->specificPath().isEmpty() && !item->specificPath().isEmpty()) {
-                NMModelDebug() << "Connection " << it->name() << " has been updated by wireless network";
-                if (item->type() == NetworkManager::ConnectionSettings::Wireless) {
-                    it->setWirelessNetwork(item->ssid());
-                } else if (item->type() == NetworkManager::ConnectionSettings::Wimax) {
-                    it->setNsp(item->nspPath());
-                }
-                updated = true;
-            }
-
             if (it->connectionPath().isEmpty() && !item->connectionPath().isEmpty()) {
                 NMModelDebug() << "Connection " << it->name() << " has been updated by connection";
                 it->setConnection(item->connectionPath());
@@ -485,8 +478,6 @@ void Model::insertItem(ModelItem * item)
                     emit dataChanged(index, index);
                 }
             }
-
-            break;
         }
     }
     // Item doesn't exist, let's add it
diff --git a/declarative-plugins/model/model.h b/declarative-plugins/model/model.h
index 91830ef..47c5066 100644
--- a/declarative-plugins/model/model.h
+++ b/declarative-plugins/model/model.h
@@ -37,8 +37,70 @@ class Model : public QAbstractListModel
 {
 Q_OBJECT
 public:
-    enum ItemRole {ConnectionStateRole = Qt::UserRole + 1, ConnectionPathRole, ConnectionIconRole, ConnectionDetailsRole,
-                   DeviceNameRole, DevicePathRole, NameRole, SecurityTypeRole, SectionRole, SignalRole, SsidRole, SpecificPathRole, UuidRole, UniRole, TypeRole};
+    enum ItemRole {
+        /**
+         * Connection state, one of Unknown, Active, Activating, Deactivating, Deactivated
+         */
+        ConnectionStateRole = Qt::UserRole + 1,
+        /**
+         * D-bus path of the connection associated with this item
+         */
+        ConnectionPathRole,
+        /**
+         * SVG icon of the item from plasma-nm icon set, except icons for VPN, Adsl, Pppoe (for these we don't have SVG icons)
+         */
+        ConnectionIconRole,
+        /**
+         * Formated info about the connection, i.e IPv4 addresses, SSID etc.
+         */
+        ConnectionDetailsRole,
+        /**
+         * Device name of the device associated with this item
+         */
+        DeviceNameRole,
+        /**
+         * D-bus path of the device associated with this item
+         */
+        DevicePathRole,
+        /**
+         * Item name, it uses the name of associated connection or the name of associated AP (when there is no connection)
+         */
+        NameRole,
+        /**
+         * Item security, one of None, StaticWep, DynamicWep, Leap, WpaPsk, WpaEap, Wpa2Psk, Wpa2Eap
+         */
+        SecurityTypeRole,
+        /**
+         * Item section name, one of Active connections (the item is activated), Previous connections (there is some associated connection)
+         * or Uknown connections (for available accesspoints without associated connections)
+         */
+        SectionRole,
+        /**
+         * Item signal strength, used only for wireless and gsm/cdma connections
+         */
+        SignalRole,
+        /**
+         * Item ssid, used only for wireless connections
+         */
+        SsidRole,
+        /**
+         * Used only for wireless (D-bus path of the associated AP) and wimax connections (D-bus path of the associated NSP)
+         */
+        SpecificPathRole,
+        /**
+         * Item uuid, valid only for items with associated connection
+         */
+        UuidRole,
+        /**
+         * Item unique identifier
+         * For wireless connections is "ssid%devicePath", for the rest is "connectionName%devicePath"
+         */
+        UniRole,
+        /**
+         * Connection type of the item
+         */
+        TypeRole
+    };
 
     explicit Model(QObject* parent = 0);
     virtual ~Model();
diff --git a/declarative-plugins/model/modelitem.cpp b/declarative-plugins/model/modelitem.cpp
index 9a5931f..3ab9349 100644
--- a/declarative-plugins/model/modelitem.cpp
+++ b/declarative-plugins/model/modelitem.cpp
@@ -49,13 +49,13 @@
 
 #include "debug.h"
 
-ModelItem::ModelItem(const QString& device, QObject * parent):
-    QObject(parent),
-    m_signal(0),
-    m_sectionType(ModelItem::Unknown),
-    m_connectionState(NetworkManager::ActiveConnection::Unknown),
-    m_type(NetworkManager::ConnectionSettings::Unknown),
-    m_securityType(NetworkManager::Utils::None)
+ModelItem::ModelItem(const QString& device, QObject * parent)
+    : QObject(parent)
+    , m_signal(0)
+    , m_sectionType(ModelItem::Unknown)
+    , m_connectionState(NetworkManager::ActiveConnection::Unknown)
+    , m_type(NetworkManager::ConnectionSettings::Unknown)
+    , m_securityType(NetworkManager::Utils::None)
 {
     if (!device.isEmpty()) {
         setDevice(device);
@@ -151,6 +151,17 @@ QString ModelItem::icon() const
             break;
         case NetworkManager::ConnectionSettings::Wireless:
             if (m_signal == 0 ) {
+                if (!m_connectionPath.isEmpty()) {
+                    NetworkManager::Connection::Ptr con = NetworkManager::findConnection(m_connectionPath);
+                    if (con) {
+                        NetworkManager::WirelessSetting::Ptr wirelessSetting;
+                        wirelessSetting = con->settings()->setting(NetworkManager::Setting::Wireless).dynamicCast<NetworkManager::WirelessSetting>();
+                        if (wirelessSetting && (wirelessSetting->mode() == NetworkManager::WirelessSetting::Adhoc ||
+                                                wirelessSetting->mode() == NetworkManager::WirelessSetting::Ap)) {
+                            return "network-wireless-100";
+                        }
+                    }
+                }
                 return "network-wireless-00";
             } else if (m_signal < 20) {
                 return "network-wireless-20";
@@ -216,7 +227,7 @@ QString ModelItem::originalName() const
 
 QString ModelItem::uni() const
 {
-    if (m_type == NetworkManager::ConnectionSettings::Wireless) {
+    if (m_type == NetworkManager::ConnectionSettings::Wireless && m_uuid.isEmpty()) {
         return m_ssid + '%' + m_devicePath;
     } else {
         return m_connectionPath + '%' + m_devicePath;
@@ -333,9 +344,7 @@ bool ModelItem::operator==(const ModelItem* item) const
         if (item->devicePath() == devicePath() && item->uuid() == uuid()) {
             return true;
         }
-    }
-
-    if (item->type() == NetworkManager::ConnectionSettings::Wireless && type() == NetworkManager::ConnectionSettings::Wireless) {
+    } else if (item->type() == NetworkManager::ConnectionSettings::Wireless && type() == NetworkManager::ConnectionSettings::Wireless) {
         if (item->ssid() == ssid() && item->devicePath() == devicePath()) {
             return true;
         }
@@ -428,14 +437,19 @@ void ModelItem::setConnectionSettings(const NetworkManager::ConnectionSettings::
         QString previousSsid;
         NetworkManager::WirelessSetting::Ptr wirelessSetting;
         wirelessSetting = settings->setting(NetworkManager::Setting::Wireless).dynamicCast<NetworkManager::WirelessSetting>();
+
         if (m_ssid != wirelessSetting->ssid()) {
-            if (!m_ssid.isEmpty()) {
-                changed = true;
-            }
+            changed = true;
             previousSsid = m_ssid;
             m_ssid = wirelessSetting->ssid();
         }
 
+        if (wirelessSetting->mode() == NetworkManager::WirelessSetting::Adhoc ||
+            wirelessSetting->mode() == NetworkManager::WirelessSetting::Ap) {
+            updateDetails();
+            return;
+        }
+
         if (!changed) {
             updateDetails();
             return;
@@ -446,13 +460,14 @@ void ModelItem::setConnectionSettings(const NetworkManager::ConnectionSettings::
             updateDetails();
             return;
         }
+
         NetworkManager::WirelessDevice::Ptr wifiDevice = device.objectCast<NetworkManager::WirelessDevice>();
         if (!wifiDevice) {
             updateDetails();
             return;
         }
-        NetworkManager::WirelessNetwork::Ptr newWifiNetwork = wifiDevice->findNetwork(m_ssid);
 
+        NetworkManager::WirelessNetwork::Ptr newWifiNetwork = wifiDevice->findNetwork(m_ssid);
         if (!newWifiNetwork) {
             setConnection(QString());
             NetworkManager::WirelessNetwork::Ptr wifiNetwork = wifiDevice->findNetwork(previousSsid);
@@ -555,5 +570,5 @@ void ModelItem::updateSignalStrenght(int strength)
 
     updateDetails();
 
-    //NMItemDebug() << name() << ": signal strength changed to " << m_signal;
+    NMItemDebug() << name() << ": signal strength changed to " << m_signal;
 }
diff --git a/declarative-plugins/model/modelitems.cpp b/declarative-plugins/model/modelitems.cpp
index f2a17bc..1e37f56 100644
--- a/declarative-plugins/model/modelitems.cpp
+++ b/declarative-plugins/model/modelitems.cpp
@@ -21,7 +21,8 @@
 #include "modelitems.h"
 #include "modelitem.h"
 
-ModelItems::ModelItems(QObject* parent): QObject(parent)
+ModelItems::ModelItems(QObject* parent)
+    : QObject(parent)
 {
 }
 
diff --git a/declarative-plugins/model/monitor.cpp b/declarative-plugins/model/monitor.cpp
index abf66cc..40596c6 100644
--- a/declarative-plugins/model/monitor.cpp
+++ b/declarative-plugins/model/monitor.cpp
@@ -31,8 +31,8 @@
 
 #include "debug.h"
 
-Monitor::Monitor(QObject* parent):
-    QObject(parent)
+Monitor::Monitor(QObject* parent)
+    : QObject(parent)
 {
 }
 
@@ -108,7 +108,7 @@ void Monitor::addDevice(const NetworkManager::Device::Ptr& device)
         connect(wiredDev.data(), SIGNAL(carrierChanged(bool)),
                 SLOT(cablePlugged(bool)), Qt::UniqueConnection);
 
-    }  else if (device->type() == NetworkManager::Device::Wimax) {
+    } else if (device->type() == NetworkManager::Device::Wimax) {
         NMMonitorDebug() << "Available wimax device " << device->interfaceName();
         NetworkManager::WimaxDevice::Ptr wimaxDev = device.objectCast<NetworkManager::WimaxDevice>();
 
diff --git a/declarative-plugins/model/sortmodel.cpp b/declarative-plugins/model/sortmodel.cpp
index 655be2c..7eb3456 100644
--- a/declarative-plugins/model/sortmodel.cpp
+++ b/declarative-plugins/model/sortmodel.cpp
@@ -75,8 +75,8 @@ SortModel::SortedConnectionType SortModel::connectionTypeToSortedType(NetworkMan
     }
 }
 
-SortModel::SortModel(QObject* parent):
-    QSortFilterProxyModel(parent)
+SortModel::SortModel(QObject* parent)
+    : QSortFilterProxyModel(parent)
 {
     setDynamicSortFilter(true);
     sort(0, Qt::DescendingOrder);
diff --git a/editor/kde-nm-connection-editor.desktop b/editor/kde-nm-connection-editor.desktop
index af6d4a7..f66af10 100755
--- a/editor/kde-nm-connection-editor.desktop
+++ b/editor/kde-nm-connection-editor.desktop
@@ -67,3 +67,4 @@ Icon=network-defaultroute
 Type=Application
 Terminal=false
 Categories=Qt;KDE;Network;
+NoDisplay=true
diff --git a/kded/bluetoothmonitor.cpp b/kded/bluetoothmonitor.cpp
index 2221d09..5d0218b 100644
--- a/kded/bluetoothmonitor.cpp
+++ b/kded/bluetoothmonitor.cpp
@@ -220,6 +220,7 @@ void BluetoothMonitor::init()
 
     mDunDevice = reply.value();
 }
+
 #if WITH_MODEMMANAGER_SUPPORT
 void BluetoothMonitor::modemAdded(const QString &udi)
 {
diff --git a/lib/editor/bridgewidget.cpp b/lib/editor/bridgewidget.cpp
index 8815eb2..95344c4 100644
--- a/lib/editor/bridgewidget.cpp
+++ b/lib/editor/bridgewidget.cpp
@@ -216,5 +216,5 @@ void BridgeWidget::populateBridges()
 
 bool BridgeWidget::isValid() const
 {
-    return !m_ui->ifaceName->text().isEmpty() && m_ui->bridges->count() > 0;
+    return !m_ui->ifaceName->text().isEmpty();
 }
diff --git a/lib/uiutils.cpp b/lib/uiutils.cpp
index 5b29896..312920e 100644
--- a/lib/uiutils.cpp
+++ b/lib/uiutils.cpp
@@ -570,16 +570,6 @@ QString UiUtils::wirelessBandToString(NetworkManager::WirelessSetting::Frequency
 
 #if WITH_MODEMMANAGER_SUPPORT
 #ifdef MODEMMANAGERQT_ONE
-// QString UiUtils::convertTypeToString(ModemManager::Modem::InterfaceType type)
-// {
-//     switch (type) {
-//         case ModemManager::ModemInterface::Gsm: return i18nc("Gsm cellular type","Gsm");
-//         case ModemManager::ModemInterface::Cdma: return i18nc("Cdma cellular type","Cdma");
-//     }
-//
-//     return i18nc("Unknown cellular type","Unknown");
-// }
-
 QString UiUtils::convertBandsToString(const QList<MMModemBand> &band)
 {
     // TODO
@@ -686,8 +676,6 @@ QString UiUtils::convertLockReasonToString(MMModemLock reason)
         return i18nc("possible SIM lock reason", "Lock reason unknown.");
     }
 }
-
-
 #else
 QString UiUtils::convertTypeToString(const ModemManager::ModemInterface::Type type)
 {
@@ -855,11 +843,11 @@ QString UiUtils::shortToolTipFromWirelessSecurity(NetworkManager::Utils::Wireles
 
 QString UiUtils::connectionDetails(const Device::Ptr& device, const Connection::Ptr& connection, const QStringList& keys)
 {
-    QString format = "<tr><td align=\"right\" width=\"50%\"><b>%1</b></td><td align=\"left\" width=\"50%\">&nbsp;%2</td></tr>";
+    const QString format = "<tr><td align=\"right\" width=\"50%\"><b>%1</b></td><td align=\"left\" width=\"50%\">&nbsp;%2</td></tr>";
     QString details;
 
-    bool connected = device && connection && device->activeConnection() &&
-                     device->activeConnection()->connection() == connection && device->activeConnection()->state() == ActiveConnection::Activated;
+    const bool connected = device && connection && device->activeConnection() &&
+                           device->activeConnection()->connection() == connection && device->activeConnection()->state() == ActiveConnection::Activated;
 
     foreach (const QString& key, keys) {
         if (key == "interface:type") {
@@ -944,7 +932,7 @@ QString UiUtils::connectionDetails(const Device::Ptr& device, const Connection::
 
 QString UiUtils::bluetoothDetails(const BluetoothDevice::Ptr& btDevice, const QStringList& keys)
 {
-    QString format = "<tr><td align=\"right\" width=\"50%\"><b>%1</b></td><td align=\"left\" width=\"50%\">&nbsp;%2</td></tr>";
+    const QString format = "<tr><td align=\"right\" width=\"50%\"><b>%1</b></td><td align=\"left\" width=\"50%\">&nbsp;%2</td></tr>";
     QString details;
 
     foreach (const QString& key, keys) {
@@ -967,7 +955,7 @@ QString UiUtils::bluetoothDetails(const BluetoothDevice::Ptr& btDevice, const QS
 QString UiUtils::modemDetails(const ModemDevice::Ptr& modemDevice, const QStringList& keys)
 {
 #if WITH_MODEMMANAGER_SUPPORT
-    QString format = "<tr><td align=\"right\" width=\"50%\"><b>%1</b></td><td align=\"left\" width=\"50%\">&nbsp;%2</td></tr>";
+    const QString format = "<tr><td align=\"right\" width=\"50%\"><b>%1</b></td><td align=\"left\" width=\"50%\">&nbsp;%2</td></tr>";
     QString details;
 #ifdef MODEMMANAGERQT_ONE
     ModemManager::Modem::Ptr modemNetwork;
@@ -1079,7 +1067,7 @@ QString UiUtils::modemDetails(const ModemDevice::Ptr& modemDevice, const QString
 
 QString UiUtils::vpnDetails(const VpnConnection::Ptr& vpnConnection, const VpnSetting::Ptr& vpnSetting, const QStringList& keys)
 {
-    QString format = "<tr><td align=\"right\" width=\"50%\"><b>%1</b></td><td align=\"left\" width=\"50%\">&nbsp;%2</td></tr>";
+    const QString format = "<tr><td align=\"right\" width=\"50%\"><b>%1</b></td><td align=\"left\" width=\"50%\">&nbsp;%2</td></tr>";
     QString details;
 
     foreach (const QString& key, keys) {
@@ -1099,11 +1087,11 @@ QString UiUtils::vpnDetails(const VpnConnection::Ptr& vpnConnection, const VpnSe
 
 QString UiUtils::wimaxDetails(const NetworkManager::WimaxDevice::Ptr& wimaxDevice, const WimaxNsp::Ptr& wimaxNsp, const NetworkManager::Connection::Ptr& connection, const QStringList& keys)
 {
-    QString format = "<tr><td align=\"right\" width=\"50%\"><b>%1</b></td><td align=\"left\" width=\"50%\">&nbsp;%2</td></tr>";
+    const QString format = "<tr><td align=\"right\" width=\"50%\"><b>%1</b></td><td align=\"left\" width=\"50%\">&nbsp;%2</td></tr>";
     QString details;
 
-    bool connected = wimaxDevice && connection && wimaxDevice->activeConnection() &&
-                     wimaxDevice->activeConnection()->connection() == connection && wimaxDevice->activeConnection()->state() == ActiveConnection::Activated;
+    const bool connected = wimaxDevice && connection && wimaxDevice->activeConnection() &&
+                           wimaxDevice->activeConnection()->connection() == connection && wimaxDevice->activeConnection()->state() == ActiveConnection::Activated;
 
     foreach (const QString& key, keys) {
         if (key == "wimax:bsid") {
@@ -1130,11 +1118,11 @@ QString UiUtils::wimaxDetails(const NetworkManager::WimaxDevice::Ptr& wimaxDevic
 
 QString UiUtils::wiredDetails(const WiredDevice::Ptr& wiredDevice, const NetworkManager::Connection::Ptr& connection, const QStringList& keys)
 {
-    QString format = "<tr><td align=\"right\" width=\"50%\"><b>%1</b></td><td align=\"left\" width=\"50%\">&nbsp;%2</td></tr>";
+    const QString format = "<tr><td align=\"right\" width=\"50%\"><b>%1</b></td><td align=\"left\" width=\"50%\">&nbsp;%2</td></tr>";
     QString details;
 
-    bool connected = wiredDevice && connection && wiredDevice->activeConnection() &&
-                     wiredDevice->activeConnection()->connection() == connection && wiredDevice->activeConnection()->state() == ActiveConnection::Activated;
+    const bool connected = wiredDevice && connection && wiredDevice->activeConnection() &&
+                           wiredDevice->activeConnection()->connection() == connection && wiredDevice->activeConnection()->state() == ActiveConnection::Activated;
 
     foreach (const QString& key, keys) {
         if (key == "interface:bitrate") {
@@ -1153,11 +1141,11 @@ QString UiUtils::wiredDetails(const WiredDevice::Ptr& wiredDevice, const Network
 
 QString UiUtils::wirelessDetails(const WirelessDevice::Ptr& wirelessDevice, const WirelessNetwork::Ptr& network, const NetworkManager::Connection::Ptr& connection, const QStringList& keys)
 {
-    QString format = "<tr><td align=\"right\" width=\"50%\"><b>%1</b></td><td align=\"left\" width=\"50%\">&nbsp;%2</td></tr>";
+    const QString format = "<tr><td align=\"right\" width=\"50%\"><b>%1</b></td><td align=\"left\" width=\"50%\">&nbsp;%2</td></tr>";
     QString details;
 
-    bool connected = wirelessDevice && connection && wirelessDevice->activeConnection() &&
-                     wirelessDevice->activeConnection()->connection() == connection && wirelessDevice->activeConnection()->state() == ActiveConnection::Activated;
+    const bool connected = wirelessDevice && connection && wirelessDevice->activeConnection() &&
+                           wirelessDevice->activeConnection()->connection() == connection && wirelessDevice->activeConnection()->state() == ActiveConnection::Activated;
 
     NetworkManager::AccessPoint::Ptr ap;
     if (network) {
@@ -1217,4 +1205,3 @@ QString UiUtils::wirelessDetails(const WirelessDevice::Ptr& wirelessDevice, cons
 
     return details;
 }
-
diff --git a/vpn/pptp/pptpwidget.cpp b/vpn/pptp/pptpwidget.cpp
index 789e688..b8d826b 100644
--- a/vpn/pptp/pptpwidget.cpp
+++ b/vpn/pptp/pptpwidget.cpp
@@ -284,12 +284,12 @@ QVariantMap PptpSettingWidget::setting(bool agentOwned) const
 
 void PptpSettingWidget::fillOnePasswordCombo(KComboBox * combo, NetworkManager::Setting::SecretFlags type)
 {
-    if (type.testFlag(NetworkManager::Setting::AgentOwned) || type.testFlag(NetworkManager::Setting::None)) {
-        combo->setCurrentIndex(1);
-    } else if (type.testFlag(NetworkManager::Setting::NotRequired)) {
-        combo->setCurrentIndex(2);
-    } else if (type.testFlag(NetworkManager::Setting::NotSaved)) {
+    if (type.testFlag(NetworkManager::Setting::AgentOwned) || type.testFlag(NetworkManager::Setting::None)) { // store
         combo->setCurrentIndex(0);
+    } else if (type.testFlag(NetworkManager::Setting::NotRequired)) { // not required
+        combo->setCurrentIndex(2);
+    } else if (type.testFlag(NetworkManager::Setting::NotSaved)) { // always ask
+        combo->setCurrentIndex(1);
     }
 }
 
@@ -297,17 +297,17 @@ uint PptpSettingWidget::handleOnePasswordType(const KComboBox * combo, const QSt
 {
     const uint type = combo->currentIndex();
     switch (type) {
-        case 0:
-            data.insert(key, QString::number(NetworkManager::Setting::NotSaved));
-            break;
         case 1:
+            data.insert(key, QString::number(NetworkManager::Setting::NotSaved)); // always ask
+            break;
+        case 0:
             if (agentOwned)
-                data.insert(key, QString::number(NetworkManager::Setting::AgentOwned));
+                data.insert(key, QString::number(NetworkManager::Setting::AgentOwned)); // store
             else
                 data.insert(key, QString::number(NetworkManager::Setting::None));
             break;
         case 2:
-            data.insert(key, QString::number(NetworkManager::Setting::NotRequired));
+            data.insert(key, QString::number(NetworkManager::Setting::NotRequired)); // not required
             break;
     }
     return type;
diff --git a/vpn/strongswan/strongswanwidget.cpp b/vpn/strongswan/strongswanwidget.cpp
index ef19986..c7e3d96 100644
--- a/vpn/strongswan/strongswanwidget.cpp
+++ b/vpn/strongswan/strongswanwidget.cpp
@@ -201,7 +201,7 @@ void StrongswanSettingWidget::fillOnePasswordCombo(KComboBox * combo, const QStr
 {
     if (data.contains(key)) {
         if (data.value(key) == NM_STRONGSWAN_PW_TYPE_SAVE) {
-            combo->setCurrentIndex(1);
+            combo->setCurrentIndex(0);
         } else if (data.value(key) == NM_STRONGSWAN_PW_TYPE_UNUSED) {
             combo->setCurrentIndex(2);
         }
@@ -214,10 +214,10 @@ uint StrongswanSettingWidget::handleOnePasswordType(const KComboBox * combo, con
 {
     const uint type = combo->currentIndex();
     switch (type) {
-        case 0:
+        case 1:
             data.insert(key, QString::number(NetworkManager::Setting::NotSaved));
             break;
-        case 1:
+        case 0:
             if (agentOwned)
                 data.insert(key, QString::number(NetworkManager::Setting::AgentOwned));
             else
diff --git a/vpn/vpnc/vpnc.cpp b/vpn/vpnc/vpnc.cpp
index d4a511d..645249d 100644
--- a/vpn/vpnc/vpnc.cpp
+++ b/vpn/vpnc/vpnc.cpp
@@ -145,7 +145,6 @@ NMVariantMapMap VpncUiPlugin::importConnectionSettings(const QString &fileName)
     KConfigGroup cg(config, "main");   // Keys&Values are stored under [main]
     if (cg.exists()) {
         // Setup cisco-decrypt binary to decrypt the passwords
-        QStringList decrArgs;
         const QString ciscoDecryptBinary = KStandardDirs::findExe("cisco-decrypt", QString::fromLocal8Bit(qgetenv("PATH")) + ":/usr/lib/vpnc");
         if (ciscoDecryptBinary.isEmpty()) {
             mErrorMessage = i18n("Needed executable cisco-decrypt could not be found.");
@@ -174,11 +173,11 @@ NMVariantMapMap VpncUiPlugin::importConnectionSettings(const QString &fileName)
         }
         else if (!decrPlugin->readStringKeyValue(cg,"enc_UserPassword").isEmpty() && !ciscoDecryptBinary.isEmpty()) {
             // Decrypt the password and insert into map
-            decrArgs.clear();
-            decrArgs << decrPlugin->readStringKeyValue(cg,"enc_UserPassword");
-            decrPlugin->ciscoDecrypt->setProgram(ciscoDecryptBinary, decrArgs);
+            decrPlugin->ciscoDecrypt->setProgram(ciscoDecryptBinary);
             decrPlugin->ciscoDecrypt->start();
-            if (decrPlugin->ciscoDecrypt->waitForStarted() && decrPlugin->ciscoDecrypt->waitForFinished()) {
+            decrPlugin->ciscoDecrypt->waitForStarted();
+            decrPlugin->ciscoDecrypt->write(decrPlugin->readStringKeyValue(cg,"enc_UserPassword").toUtf8());
+            if (decrPlugin->ciscoDecrypt->waitForFinished()) {
                 secretData.insert(NM_VPNC_KEY_XAUTH_PASSWORD, decrPlugin->decryptedPasswd);
             }
         }
@@ -203,11 +202,11 @@ NMVariantMapMap VpncUiPlugin::importConnectionSettings(const QString &fileName)
         }
         else if (!decrPlugin->readStringKeyValue(cg,"enc_GroupPwd").isEmpty() && !ciscoDecryptBinary.isEmpty()) {
             //Decrypt the password and insert into map
-            decrArgs.clear();
-            decrArgs << decrPlugin->readStringKeyValue(cg,"enc_GroupPwd");
-            decrPlugin->ciscoDecrypt->setProgram(ciscoDecryptBinary, decrArgs);
+            decrPlugin->ciscoDecrypt->setProgram(ciscoDecryptBinary);
             decrPlugin->ciscoDecrypt->start();
-            if (decrPlugin->ciscoDecrypt->waitForStarted() && decrPlugin->ciscoDecrypt->waitForFinished()) {
+            decrPlugin->ciscoDecrypt->waitForStarted();
+            decrPlugin->ciscoDecrypt->write(decrPlugin->readStringKeyValue(cg,"enc_GroupPwd").toUtf8());
+            if (decrPlugin->ciscoDecrypt->waitForFinished()) {
                 secretData.insert(NM_VPNC_KEY_SECRET, decrPlugin->decryptedPasswd);
                 data.insert(NM_VPNC_KEY_SECRET"-flags", QString::number(NetworkManager::Setting::AgentOwned));
             }
