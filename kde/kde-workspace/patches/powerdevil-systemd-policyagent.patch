diff --git a/powerdevil/daemon/CMakeLists.txt b/powerdevil/daemon/CMakeLists.txt
index 35a4fd4..033a0d5 100644
--- a/powerdevil/daemon/CMakeLists.txt
+++ b/powerdevil/daemon/CMakeLists.txt
@@ -8,6 +8,11 @@ set(POWERDEVIL_CORE_VERSION_MINOR 1)
 set(POWERDEVIL_CORE_VERSION_MICRO 0)
 set(POWERDEVIL_CORE_VERSION_STRING ${POWERDEVIL_CORE_VERSION_MAJOR}.${POWERDEVIL_CORE_VERSION_MINOR}.${POWERDEVIL_CORE_VERSION_MICRO})
 
+option(POWERDEVIL_USE_SYSTEMD "Use systemd instead of ConsoleKit in PowerDevil" OFF)
+if (POWERDEVIL_USE_SYSTEMD)
+    add_definitions(-DPOWERDEVIL_USE_SYSTEMD=1)
+endif ()
+
 # Add bundled actions
 set(powerdevil_bundled_actions_SRCS
     actions/bundled/suspendsession.cpp
diff --git a/powerdevil/daemon/powerdevilpolicyagent.cpp b/powerdevil/daemon/powerdevilpolicyagent.cpp
index 5ba595b..d2dbd73 100644
--- a/powerdevil/daemon/powerdevilpolicyagent.cpp
+++ b/powerdevil/daemon/powerdevilpolicyagent.cpp
@@ -1,5 +1,6 @@
 /***************************************************************************
  *   Copyright (C) 2010 by Dario Freddi <drf@kde.org>                      *
+ *   Copyright (C) 2012 Lukáš Tinkl <ltinkl@redhat.com>                    *
  *                                                                         *
  *   This program is free software; you can redistribute it and/or modify  *
  *   it under the terms of the GNU General Public License as published by  *
@@ -20,6 +21,14 @@
 
 #include "powerdevilpolicyagent.h"
 
+#ifdef POWERDEVIL_USE_SYSTEMD
+#include <QtCore/QCoreApplication>
+#include <QtDBus/QDBusObjectPath>
+#include <QtDBus/QDBusArgument>
+#include <QtCore/QMetaType>
+#include <QtDBus/QDBusMetaType>
+#endif
+
 #include <QtDBus/QDBusConnection>
 #include <QtDBus/QDBusInterface>
 #include <QtDBus/QDBusPendingReply>
@@ -29,13 +38,41 @@
 #include <KGlobal>
 #include <KDebug>
 
+#ifdef POWERDEVIL_USE_SYSTEMD
+struct NamedDBusObjectPath
+{
+    QString name;
+    QDBusObjectPath path;
+};
+
+// Marshall the NamedDBusObjectPath data into a D-Bus argument
+QDBusArgument &operator<<(QDBusArgument &argument, const NamedDBusObjectPath &namedPath)
+{
+    argument.beginStructure();
+    argument << namedPath.name << namedPath.path;
+    argument.endStructure();
+    return argument;
+}
+
+// Retrieve the NamedDBusObjectPath data from the D-Bus argument
+const QDBusArgument &operator>>(const QDBusArgument &argument, NamedDBusObjectPath &namedPath)
+{
+    argument.beginStructure();
+    argument >> namedPath.name >> namedPath.path;
+    argument.endStructure();
+    return argument;
+}
+#endif
+
+Q_DECLARE_METATYPE(NamedDBusObjectPath)
+
 namespace PowerDevil
 {
 
 class PolicyAgentHelper
 {
 public:
-    PolicyAgentHelper() : q(0) {}
+    PolicyAgentHelper() : q(0) { }
     ~PolicyAgentHelper() {
         delete q;
     }
@@ -55,11 +92,19 @@ PolicyAgent *PolicyAgent::instance()
 
 PolicyAgent::PolicyAgent(QObject* parent)
     : QObject(parent)
+#ifdef POWERDEVIL_USE_SYSTEMD
+    , m_sdAvailable(false)
+#else
     , m_ckAvailable(false)
+#endif
     , m_sessionIsBeingInterrupted(false)
     , m_lastCookie(0)
     , m_busWatcher(new QDBusServiceWatcher(this))
+#ifdef POWERDEVIL_USE_SYSTEMD
+    , m_sdWatcher(new QDBusServiceWatcher(this))
+#else
     , m_ckWatcher(new QDBusServiceWatcher(this))
+#endif
 {
     Q_ASSERT(!s_globalPolicyAgent->q);
     s_globalPolicyAgent->q = this;
@@ -72,6 +117,22 @@ PolicyAgent::~PolicyAgent()
 
 void PolicyAgent::init()
 {
+#ifdef POWERDEVIL_USE_SYSTEMD
+    // Watch over the systemd service
+    m_sdWatcher.data()->setConnection(QDBusConnection::systemBus());
+    m_sdWatcher.data()->setWatchMode(QDBusServiceWatcher::WatchForUnregistration |
+                                     QDBusServiceWatcher::WatchForRegistration);
+    m_sdWatcher.data()->addWatchedService(SYSTEMD_LOGIN1_SERVICE);
+
+    connect(m_sdWatcher.data(), SIGNAL(serviceRegistered(QString)),
+            this, SLOT(onConsoleKitRegistered(QString)));
+    connect(m_sdWatcher.data(), SIGNAL(serviceUnregistered(QString)),
+            this, SLOT(onConsoleKitUnregistered(QString)));
+    // If it's up and running already, let's cache it
+    if (QDBusConnection::systemBus().interface()->isServiceRegistered(SYSTEMD_LOGIN1_SERVICE)) {
+        onConsoleKitRegistered(SYSTEMD_LOGIN1_SERVICE);
+    }
+#else
     // Watch over the ConsoleKit service
     m_ckWatcher.data()->setConnection(QDBusConnection::sessionBus());
     m_ckWatcher.data()->setWatchMode(QDBusServiceWatcher::WatchForUnregistration |
@@ -86,6 +147,7 @@ void PolicyAgent::init()
     if (QDBusConnection::systemBus().interface()->isServiceRegistered("org.freedesktop.ConsoleKit")) {
         onConsoleKitRegistered("org.freedesktop.ConsoleKit");
     }
+#endif
 
     // Now set up our service watcher
     m_busWatcher.data()->setConnection(QDBusConnection::sessionBus());
@@ -95,8 +157,83 @@ void PolicyAgent::init()
             this, SLOT(onServiceUnregistered(QString)));
 }
 
-void PowerDevil::PolicyAgent::onConsoleKitRegistered(const QString& )
+#ifdef POWERDEVIL_USE_SYSTEMD
+QString PolicyAgent::getNamedPathProperty(const QString &path, const QString &iface, const QString &prop) const
 {
+    QDBusMessage message = QDBusMessage::createMethodCall(SYSTEMD_LOGIN1_SERVICE, path,
+                                                          QLatin1String("org.freedesktop.DBus.Properties"), QLatin1String("Get"));
+    message << iface << prop;
+    QDBusMessage reply = QDBusConnection::systemBus().call(message);
+
+    NamedDBusObjectPath namedPath;
+    reply.arguments().at(0).value<QDBusVariant>().variant().value<QDBusArgument>() >> namedPath;
+    return namedPath.path.path();
+}
+#endif
+
+void PolicyAgent::onConsoleKitRegistered(const QString& )
+{
+#ifdef POWERDEVIL_USE_SYSTEMD
+    m_sdAvailable = true;
+
+    qRegisterMetaType<NamedDBusObjectPath>();
+    qDBusRegisterMetaType<NamedDBusObjectPath>();
+
+    // get the current session
+    QDBusInterface managerIface(SYSTEMD_LOGIN1_SERVICE, SYSTEMD_LOGIN1_PATH, SYSTEMD_LOGIN1_MANAGER_IFACE, QDBusConnection::systemBus());
+    QDBusPendingReply<QDBusObjectPath> session = managerIface.asyncCall(QLatin1String("GetSessionByPID"), (quint32) QCoreApplication::applicationPid());
+    session.waitForFinished();
+
+    if (!session.isValid()) {
+        kDebug() << "The session is not registered with systemd";
+        m_sdAvailable = false;
+        return;
+    }
+
+    QString sessionPath = session.value().path();
+    kDebug() << "Session path:" << sessionPath;
+
+    m_sdSessionInterface = new QDBusInterface(SYSTEMD_LOGIN1_SERVICE, sessionPath,
+                                              SYSTEMD_LOGIN1_SESSION_IFACE, QDBusConnection::systemBus());
+    if (!m_sdSessionInterface.data()->isValid()) {
+        // As above
+        kDebug() << "Can't contact session iface";
+        m_sdAvailable = false;
+        return;
+    }
+
+
+    // now let's obtain the seat
+    QString seatPath = getNamedPathProperty(sessionPath, SYSTEMD_LOGIN1_SESSION_IFACE, "Seat");
+
+    if (seatPath.isEmpty() || seatPath == "/") {
+        kDebug() << "Unable to associate systemd session with a seat" << seatPath;
+        m_sdAvailable = false;
+        return;
+    }
+
+    // get the current seat
+    m_sdSeatInterface = new QDBusInterface(SYSTEMD_LOGIN1_SERVICE, seatPath,
+                                           SYSTEMD_LOGIN1_SEAT_IFACE, QDBusConnection::systemBus());
+
+    if (!m_sdSeatInterface.data()->isValid()) {
+        // As above
+        kDebug() << "Can't contact seat iface";
+        m_sdAvailable = false;
+        return;
+    }
+
+    // finally get the active session path and watch for its changes
+    m_activeSessionPath = getNamedPathProperty(seatPath, SYSTEMD_LOGIN1_SEAT_IFACE, "ActiveSession");
+
+    kDebug() << "ACTIVE SESSION PATH:" << m_activeSessionPath;
+    QDBusConnection::systemBus().connect(SYSTEMD_LOGIN1_SERVICE, seatPath, "org.freedesktop.DBus.Properties", "PropertiesChanged", this,
+                                         SLOT(slotActiveSessionChanged(QString,QVariantMap,QStringList)));
+
+    onActiveSessionChanged(m_activeSessionPath);
+
+    kDebug() << "systemd support initialized";
+#else // POWERDEVIL_USE_SYSTEMD
     m_ckAvailable = true;
 
     // Otherwise, let's ask ConsoleKit
@@ -127,7 +264,7 @@ void PowerDevil::PolicyAgent::onConsoleKitRegistered(const QString& )
     QDBusPendingReply< QDBusObjectPath > seatPath = m_ckSessionInterface.data()->asyncCall("GetSeatId");
     seatPath.waitForFinished();
 
-    if (!sessionPath.isValid() || sessionPath.value().path().isEmpty()) {
+    if (!seatPath.isValid() || seatPath.value().path().isEmpty()) {
         kDebug() << "Unable to associate ck session with a seat";
         m_ckAvailable = false;
         return;
@@ -135,7 +272,7 @@ void PowerDevil::PolicyAgent::onConsoleKitRegistered(const QString& )
 
     if (!QDBusConnection::systemBus().connect("org.freedesktop.ConsoleKit", seatPath.value().path(),
                                               "org.freedesktop.ConsoleKit.Seat", "ActiveSessionChanged",
-                                              this, SLOT(onConsoleKitActiveSessionChanged(QString)))) {
+                                              this, SLOT(onActiveSessionChanged(QString)))) {
         kDebug() << "Unable to connect to ActiveSessionChanged";
         m_ckAvailable = false;
         return;
@@ -147,23 +284,46 @@ void PowerDevil::PolicyAgent::onConsoleKitRegistered(const QString& )
     QDBusPendingReply< QDBusObjectPath > activeSession = QDBusConnection::systemBus().asyncCall(call);
     activeSession.waitForFinished();
 
-    onConsoleKitActiveSessionChanged(activeSession.value().path());
+    onActiveSessionChanged(activeSession.value().path());
 
     kDebug() << "ConsoleKit support initialized";
+#endif // POWERDEVIL_USE_SYSTEMD
 }
 
-void PowerDevil::PolicyAgent::onConsoleKitUnregistered(const QString& )
+void PolicyAgent::onConsoleKitUnregistered(const QString& )
 {
+#ifdef POWERDEVIL_USE_SYSTEMD
+    m_sdAvailable = false;
+    m_sdSessionInterface.data()->deleteLater();
+#else
     m_ckAvailable = false;
     m_ckSessionInterface.data()->deleteLater();
+#endif
 }
 
-void PolicyAgent::onConsoleKitActiveSessionChanged(const QString& activeSession)
+#ifdef POWERDEVIL_USE_SYSTEMD
+void PolicyAgent::slotActiveSessionChanged(const QString & ifaceName, const QVariantMap & changedProps, const QStringList & invalidatedProps)
 {
-    if (activeSession.isEmpty()) {
+    const QString key = QLatin1String("ActiveSession");
+
+    if (ifaceName == SYSTEMD_LOGIN1_SEAT_IFACE && (changedProps.keys().contains(key) || invalidatedProps.contains(key))) {
+        m_activeSessionPath = getNamedPathProperty(m_sdSeatInterface.data()->path(), SYSTEMD_LOGIN1_SEAT_IFACE, key);
+        kDebug() << "ACTIVE SESSION PATH CHANGED:" << m_activeSessionPath;
+        onActiveSessionChanged(m_activeSessionPath);
+    }
+}
+#endif
+
+void PolicyAgent::onActiveSessionChanged(const QString& activeSession)
+{
+    if (activeSession.isEmpty() || activeSession == "/") {
         kDebug() << "Switched to inactive session - leaving unchanged";
         return;
+#ifdef POWERDEVIL_USE_SYSTEMD
+    } else if (activeSession == m_sdSessionInterface.data()->path()) {
+#else
     } else if (activeSession == m_ckSessionInterface.data()->path()) {
+#endif
         kDebug() << "Current session is now active";
         m_wasLastActiveSession = true;
     } else {
@@ -201,6 +361,18 @@ PolicyAgent::RequiredPolicies PolicyAgent::unavailablePolicies()
 
 PolicyAgent::RequiredPolicies PolicyAgent::requirePolicyCheck(PolicyAgent::RequiredPolicies policies)
 {
+#ifdef POWERDEVIL_USE_SYSTEMD
+    if (!m_sdAvailable) {
+        // No way to determine if we are on the current session, simply suppose we are
+        kDebug() << "Can't contact systemd";
+    } else if (!m_sdSessionInterface.isNull()) {
+        bool isActive = m_sdSessionInterface.data()->property("Active").toBool();
+
+        if (!isActive && !m_wasLastActiveSession && policies != InterruptSession) {
+            return policies;
+        }
+    }
+#else
     if (!m_ckAvailable) {
         // No way to determine if we are on the current session, simply suppose we are
         kDebug() << "Can't contact ck";
@@ -212,6 +384,7 @@ PolicyAgent::RequiredPolicies PolicyAgent::requirePolicyCheck(PolicyAgent::Requi
             return policies;
         }
     }
+#endif
 
     // Ok, let's go then
     RequiredPolicies retpolicies = None;
diff --git a/powerdevil/daemon/powerdevilpolicyagent.h b/powerdevil/daemon/powerdevilpolicyagent.h
index f637f1e..80dcba4 100644
--- a/powerdevil/daemon/powerdevilpolicyagent.h
+++ b/powerdevil/daemon/powerdevilpolicyagent.h
@@ -1,5 +1,6 @@
 /***************************************************************************
  *   Copyright (C) 2010 by Dario Freddi <drf@kde.org>                      *
+ *   Copyright (C) 2012 Lukáš Tinkl <ltinkl@redhat.com>                    *
  *                                                                         *
  *   This program is free software; you can redistribute it and/or modify  *
  *   it under the terms of the GNU General Public License as published by  *
@@ -32,6 +33,13 @@
 class QDBusServiceWatcher;
 class QDBusInterface;
 
+#define SYSTEMD_LOGIN1_SERVICE "org.freedesktop.login1"
+#define SYSTEMD_LOGIN1_PATH "/org/freedesktop/login1"
+#define SYSTEMD_LOGIN1_MANAGER_IFACE "org.freedesktop.login1.Manager"
+#define SYSTEMD_LOGIN1_SESSION_IFACE "org.freedesktop.login1.Session"
+#define SYSTEMD_LOGIN1_SEAT_IFACE "org.freedesktop.login1.Seat"
+
+
 namespace PowerDevil
 {
 
@@ -69,7 +77,6 @@ public Q_SLOTS:
     void ReleaseInhibition(uint cookie);
 
     void releaseAllInhibitions();
-
 Q_SIGNALS:
     void unavailablePoliciesChanged(PowerDevil::PolicyAgent::RequiredPolicies newpolicies);
 
@@ -77,7 +84,11 @@ private Q_SLOTS:
     void onServiceUnregistered(const QString &serviceName);
     void onConsoleKitRegistered(const QString&);
     void onConsoleKitUnregistered(const QString&);
-    void onConsoleKitActiveSessionChanged(const QString &activeSession);
+#ifdef POWERDEVIL_USE_SYSTEMD
+    void slotActiveSessionChanged(const QString & ifaceName, const QVariantMap & changedProps, const QStringList & invalidatedProps);
+#endif
+    void onActiveSessionChanged(const QString &activeSession);
+
 
 private:
     explicit PolicyAgent(QObject* parent = 0);
@@ -92,9 +103,17 @@ private:
     uint addInhibitionWithExplicitDBusService(uint types, const QString &appName,
                                               const QString &reason, const QString &service);
 
+#ifdef POWERDEVIL_USE_SYSTEMD
+    QString getNamedPathProperty(const QString & path, const QString & iface, const QString & prop) const;
+    bool m_sdAvailable;
+    QString m_activeSessionPath;
+    QWeakPointer< QDBusInterface > m_sdSessionInterface;
+    QWeakPointer< QDBusInterface > m_sdSeatInterface;
+#else
     bool m_ckAvailable;
     QWeakPointer< QDBusInterface > m_ckSessionInterface;
     QWeakPointer< QDBusInterface > m_ckSeatInterface;
+#endif
     bool m_sessionIsBeingInterrupted;
 
     QHash< uint, QPair< QString, QString > > m_cookieToAppName;
@@ -104,7 +123,11 @@ private:
     uint m_lastCookie;
 
     QWeakPointer< QDBusServiceWatcher > m_busWatcher;
+#ifdef POWERDEVIL_USE_SYSTEMD
+    QWeakPointer< QDBusServiceWatcher > m_sdWatcher;
+#else
     QWeakPointer< QDBusServiceWatcher > m_ckWatcher;
+#endif
 
     bool m_wasLastActiveSession;
 
