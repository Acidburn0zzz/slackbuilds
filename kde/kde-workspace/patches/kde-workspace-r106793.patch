diff --git a/powerdevil/daemon/actions/dpms/powerdevildpmsaction.cpp b/powerdevil/daemon/actions/dpms/powerdevildpmsaction.cpp
index a16bf7ee254b9a40c6f033c93e5ca63226469e6e..029d6d3910b7151a889ee79182a9c956e619f99e 100644
--- a/powerdevil/daemon/actions/dpms/powerdevildpmsaction.cpp
+++ b/powerdevil/daemon/actions/dpms/powerdevildpmsaction.cpp
@@ -68,6 +68,7 @@ K_EXPORT_PLUGIN(PowerDevilDPMSActionFactory("powerdevildpmsaction"))
 
 PowerDevilDPMSAction::PowerDevilDPMSAction(QObject* parent, const QVariantList &args)
     : Action(parent)
+    , m_idleTime(0)
     , d(new Private)
 {
     setRequiredPolicies(PowerDevil::PolicyAgent::ChangeScreenSettings);
@@ -147,6 +148,9 @@ void PowerDevilDPMSAction::onProfileLoad()
     XFlush(dpy);
     XSetErrorHandler(d->defaultHandler);
 
+    // An unloaded action will have m_idleTime = 0:
+    // DPMS enabled with zeroed timeouts is effectively disabled.
+    // So onProfileLoad is always safe
     DPMSSetTimeouts(dpy, (CARD16)m_idleTime, (CARD16)(m_idleTime * 1.5), (CARD16)(m_idleTime * 2));
 
     XFlush(dpy);
@@ -194,6 +198,12 @@ bool PowerDevilDPMSAction::loadAction(const KConfigGroup& config)
     return true;
 }
 
+bool PowerDevilDPMSAction::onUnloadAction()
+{
+    m_idleTime = 0;
+    return Action::onUnloadAction();
+}
+
 void PowerDevilDPMSAction::onUnavailablePoliciesChanged(PowerDevil::PolicyAgent::RequiredPolicies policies)
 {
     if (policies & PowerDevil::PolicyAgent::ChangeScreenSettings) {
diff --git a/powerdevil/daemon/actions/dpms/powerdevildpmsaction.h b/powerdevil/daemon/actions/dpms/powerdevildpmsaction.h
index ef734c47cef79fbc5573ec3683c30e415bbc8a2e..ad6add8b797eb4ecd59e407bade93862160ef23c 100644
--- a/powerdevil/daemon/actions/dpms/powerdevildpmsaction.h
+++ b/powerdevil/daemon/actions/dpms/powerdevildpmsaction.h
@@ -34,6 +34,7 @@ public:
 
 protected:
     virtual void onProfileUnload();
+    virtual bool onUnloadAction();
     virtual void onWakeupFromIdle();
     virtual void onIdleTimeout(int msec);
     virtual void onProfileLoad();
