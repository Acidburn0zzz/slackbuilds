diff -U 3 -dHrNp -- kdelibs-4.5.4/kdecore/auth.orig/AuthBackend.cpp kdelibs-4.5.4/kdecore/auth/AuthBackend.cpp
--- kdelibs-4.5.4/kdecore/auth.orig/AuthBackend.cpp	2010-05-20 08:40:45.000000000 -0300
+++ kdelibs-4.5.4/kdecore/auth/AuthBackend.cpp	2010-12-18 17:02:23.761070039 -0200
@@ -55,9 +55,16 @@ void AuthBackend::setCapabilities(AuthBa
 
 bool AuthBackend::actionExists(const QString& action)
 {
+    Q_UNUSED(action);
     return false;
 }
 
+void AuthBackend::preAuthAction(const QString& action, QWidget* parent)
+{
+    Q_UNUSED(action)
+    Q_UNUSED(parent)
+}
+
 } //namespace KAuth
 
 #include "AuthBackend.moc"
diff -U 3 -dHrNp -- kdelibs-4.5.4/kdecore/auth.orig/AuthBackend.h kdelibs-4.5.4/kdecore/auth/AuthBackend.h
--- kdelibs-4.5.4/kdecore/auth.orig/AuthBackend.h	2010-05-20 08:40:45.000000000 -0300
+++ kdelibs-4.5.4/kdecore/auth/AuthBackend.h	2010-12-18 17:02:23.762069791 -0200
@@ -38,13 +38,15 @@ public:
         NoCapability = 0,
         AuthorizeFromClientCapability = 1,
         AuthorizeFromHelperCapability = 2,
-        CheckActionExistenceCapability = 4
+        CheckActionExistenceCapability = 4,
+        PreAuthActionCapability = 8
     };
     Q_DECLARE_FLAGS(Capabilities, Capability)
 
     AuthBackend();
     virtual ~AuthBackend();
     virtual void setupAction(const QString &action) = 0;
+    virtual void preAuthAction(const QString &action, QWidget *parent);
     virtual Action::AuthStatus authorizeAction(const QString &action) = 0;
     virtual Action::AuthStatus actionStatus(const QString &action) = 0;
     virtual QByteArray callerID() const = 0;
diff -U 3 -dHrNp -- kdelibs-4.5.4/kdecore/auth.orig/BackendsManager.cpp kdelibs-4.5.4/kdecore/auth/BackendsManager.cpp
--- kdelibs-4.5.4/kdecore/auth.orig/BackendsManager.cpp	2010-06-16 09:03:24.000000000 -0300
+++ kdelibs-4.5.4/kdecore/auth/BackendsManager.cpp	2010-12-18 17:02:23.761070039 -0200
@@ -78,7 +78,7 @@ QList< QObject* > BackendsManager::retri
 void BackendsManager::init()
 {
     // Backend plugin
-    const QList< QObject* > backends = retrieveInstancesIn(KAUTH_BACKEND_PLUGIN_DIR);
+    const QList< QObject* > backends = retrieveInstancesIn(QFile::decodeName(KAUTH_BACKEND_PLUGIN_DIR));
 
     foreach (QObject *instance, backends) {
         auth = qobject_cast< KAuth::AuthBackend* >(instance);
@@ -88,7 +88,7 @@ void BackendsManager::init()
     }
 
     // Helper plugin
-    const QList< QObject* > helpers = retrieveInstancesIn(KAUTH_HELPER_PLUGIN_DIR);
+    const QList< QObject* > helpers = retrieveInstancesIn(QFile::decodeName(KAUTH_HELPER_PLUGIN_DIR));
 
     foreach (QObject *instance, helpers) {
         helper = qobject_cast< KAuth::HelperProxy* >(instance);
diff -U 3 -dHrNp -- kdelibs-4.5.4/kdecore/auth.orig/ConfigureChecks.cmake kdelibs-4.5.4/kdecore/auth/ConfigureChecks.cmake
--- kdelibs-4.5.4/kdecore/auth.orig/ConfigureChecks.cmake	2010-04-07 12:18:50.000000000 -0300
+++ kdelibs-4.5.4/kdecore/auth/ConfigureChecks.cmake	2010-12-18 17:02:23.761070039 -0200
@@ -8,35 +8,34 @@ set(KAUTH_BACKEND ${KDE4_AUTH_BACKEND_NA
 
 ## Check if the user did not specify a backend to be built. If that is the case,
 ## we check what is the best backend to build on this system.
-## 4.4: We leave polkit-0.9 having more priority over polkit-1. This will change from 4.5 on
 if(NOT KAUTH_BACKEND)
     # Look for the most appropriate backend
     message(STATUS "No backend for KAuth was explicitly specified: probing system to find the best one available")
     if (APPLE)
         set (KAUTH_BACKEND "OSX")
     elseif (UNIX)
-        macro_optional_find_package(PolkitQt)
+        macro_optional_find_package(PolkitQt-1 0.99.0)
 
-        if (POLKITQT_FOUND)
-            set (KAUTH_BACKEND "PolkitQt")
-            macro_log_feature(POLKITQT_FOUND "PolkitQt" "Qt Wrapper around Policykit" "http://api.kde.org/polkit-qt"
-                              FALSE "" "STRONGLY RECOMMENDED: Needed to make KAuth work (using PolicyKit < 0.90), hence to enable some workspace functionalities")
-        else (POLKITQT_FOUND)
-            macro_optional_find_package(PolkitQt-1)
+        if (POLKITQT-1_FOUND)
+            set (KAUTH_BACKEND "PolkitQt-1")
+            macro_log_feature(POLKITQT-1_FOUND "PolkitQt-1" "Support for executing priviledged actions in a controlled way (KAuth)" "http://techbase.kde.org/Polkit-Qt-1"
+                              FALSE "" "STRONGLY RECOMMENDED")
+        else (POLKITQT-1_FOUND)
+            macro_optional_find_package(PolkitQt)
 
-            if (POLKITQT-1_FOUND)
-                set (KAUTH_BACKEND "PolkitQt-1")
-                macro_log_feature(POLKITQT-1_FOUND "PolkitQt-1" "Qt Wrapper around polkit-1" "http://techbase.kde.org/Polkit-Qt-1"
-                                  FALSE "" "STRONGLY RECOMMENDED: Needed to make KAuth work (using polkit-1), hence to enable some workspace functionalities")
-            else (POLKITQT-1_FOUND)
+            if (POLKITQT_FOUND)
+                set (KAUTH_BACKEND "PolkitQt")
+                macro_log_feature(POLKITQT_FOUND "PolkitQt" "Support for executing priviledged actions in a controlled way (KAuth)" "http://api.kde.org/polkit-qt"
+                                  FALSE "" "STRONGLY RECOMMENDED")
+            else (POLKITQT_FOUND)
                 # Nothing was found: notify and log the missing features
-                macro_log_feature(POLKITQT_FOUND "PolkitQt" "Qt Wrapper around Policykit" "http://api.kde.org/polkit-qt"
-                                  FALSE "" "STRONGLY RECOMMENDED: Needed to make KAuth work (using PolicyKit < 0.90), hence to enable some workspace functionalities")
-                macro_log_feature(POLKITQT-1_FOUND "PolkitQt-1" "Qt Wrapper around polkit-1" "http://techbase.kde.org/Polkit-Qt-1"
-                                  FALSE "" "STRONGLY RECOMMENDED: Needed to make KAuth work (using polkit-1), hence to enable some workspace functionalities")
+                macro_log_feature(POLKITQT-1_FOUND "PolkitQt-1" "Support for executing priviledged actions in a controlled way (KAuth)" "http://techbase.kde.org/Polkit-Qt-1"
+                                  FALSE "" "STRONGLY RECOMMENDED: Either this or PolkitQt is required to make KAuth work, and hence enable certain workspace functionalities")
+                macro_log_feature(POLKITQT_FOUND "PolkitQt" "Support for executing priviledged actions in a controlled way (KAuth)" "http://api.kde.org/polkit-qt"
+                                  FALSE "" "STRONGLY RECOMMENDED: Either this or PolkitQt-1 is required to make KAuth work, and hence enable certain workspace functionalities")
                 set (KAUTH_BACKEND "Fake")
-            endif (POLKITQT-1_FOUND)
-        endif (POLKITQT_FOUND)
+            endif (POLKITQT_FOUND)
+        endif (POLKITQT-1_FOUND)
     else(UNIX)
         set (KAUTH_BACKEND "Fake")
     endif(APPLE)
@@ -62,8 +61,8 @@ else(NOT KAUTH_BACKEND)
     endif (KAUTH_BACKEND STREQUAL "OSX" AND NOT APPLE)
     if (KAUTH_BACKEND STREQUAL "POLKITQT")
         macro_optional_find_package(PolkitQt)
-        macro_log_feature(POLKITQT_FOUND "PolkitQt" "Qt Wrapper around Policykit" "http://api.kde.org/polkit-qt"
-                          FALSE "" "STRONGLY RECOMMENDED: Needed to make KAuth work, hence to enable some workspace functionalities")
+        macro_log_feature(POLKITQT_FOUND "PolkitQt" "Support for executing priviledged actions in a controlled way (KAuth)" "http://api.kde.org/polkit-qt"
+                          FALSE "" "STRONGLY RECOMMENDED: Required to make KAuth work, and hence enable certain workspace functionalities")
 
         if (NOT POLKITQT_FOUND)
             message ("WARNING: You chose the PolkitQt KAuth backend but you don't have PolkitQt installed.
@@ -72,9 +71,9 @@ else(NOT KAUTH_BACKEND)
         endif (NOT POLKITQT_FOUND)
     endif (KAUTH_BACKEND STREQUAL "POLKITQT")
     if (KAUTH_BACKEND STREQUAL "POLKITQT-1")
-        macro_optional_find_package(PolkitQt-1)
-        macro_log_feature(POLKITQT-1_FOUND "PolkitQt-1" "Qt Wrapper around polkit-1" "http://techbase.kde.org/Polkit-Qt-1"
-                          FALSE "" "STRONGLY RECOMMENDED: Needed to make KAuth work (using polkit-1), hence to enable some workspace functionalities")
+        macro_optional_find_package(PolkitQt-1 0.99.0)
+        macro_log_feature(POLKITQT-1_FOUND "PolkitQt-1" "Support for executing priviledged actions in a controlled way (KAuth)" "http://techbase.kde.org/Polkit-Qt-1"
+                          FALSE "" "STRONGLY RECOMMENDED: Required to make KAuth work, and hence enable certain workspace functionalities")
 
         if (NOT POLKITQT-1_FOUND)
             message ("WARNING: You chose the PolkitQt-1 KAuth backend but you don't have PolkitQt-1 installed.
@@ -128,7 +127,12 @@ elseif(KDE4_AUTH_BACKEND_NAME STREQUAL "
         auth/backends/polkit-1/Polkit1Backend.cpp
     )
 
-    set(KAUTH_BACKEND_LIBS ${POLKITQT-1_CORE_LIBRARY} ${QT_QTCORE_LIBRARY})
+    set(KAUTH_BACKEND_LIBS ${POLKITQT-1_CORE_LIBRARY} ${QT_QTCORE_LIBRARY} ${QT_QTDBUS_LIBRARY} ${QT_QTGUI_LIBRARY} kdecore)
+
+    if (Q_WS_X11)
+        # QtGui as well
+        set(KAUTH_BACKEND_LIBS ${KAUTH_BACKEND_LIBS} ${QT_QTGUI_LIBRARY})
+    endif (Q_WS_X11)
 
     set(KDE4_AUTH_POLICY_FILES_INSTALL_DIR ${POLKITQT-1_POLICY_FILES_INSTALL_DIR} CACHE STRING 
         "Where policy files generated by KAuth will be installed" FORCE)
diff -U 3 -dHrNp -- kdelibs-4.5.4/kdecore/auth.orig/backends/dbus/DBusHelperProxy.cpp kdelibs-4.5.4/kdecore/auth/backends/dbus/DBusHelperProxy.cpp
--- kdelibs-4.5.4/kdecore/auth.orig/backends/dbus/DBusHelperProxy.cpp	2010-07-23 18:10:44.000000000 -0300
+++ kdelibs-4.5.4/kdecore/auth/backends/dbus/DBusHelperProxy.cpp	2010-12-18 17:02:23.754071771 -0200
@@ -45,7 +45,7 @@ static void debugMessageReceived(int t,
 void DBusHelperProxy::stopAction(const QString &action, const QString &helperID)
 {
     QDBusMessage message;
-    message = QDBusMessage::createMethodCall(helperID, "/", "org.kde.auth", "stopAction");
+    message = QDBusMessage::createMethodCall(helperID, QLatin1String("/"), QLatin1String("org.kde.auth"), QLatin1String("stopAction"));
 
     QList<QVariant> args;
     args << action;
@@ -63,12 +63,12 @@ bool DBusHelperProxy::executeActions(con
 
     QDBusConnection::systemBus().interface()->startService(helperID);
 
-    if (!QDBusConnection::systemBus().connect(helperID, "/", "org.kde.auth", "remoteSignal", this, SLOT(remoteSignalReceived(int, const QString &, QByteArray)))) {
+    if (!QDBusConnection::systemBus().connect(helperID, QLatin1String("/"), QLatin1String("org.kde.auth"), QLatin1String("remoteSignal"), this, SLOT(remoteSignalReceived(int, const QString &, QByteArray)))) {
         return false;
     }
 
     QDBusMessage message;
-    message = QDBusMessage::createMethodCall(helperID, "/", "org.kde.auth", "performActions");
+    message = QDBusMessage::createMethodCall(helperID, QLatin1String("/"), QLatin1String("org.kde.auth"), QLatin1String("performActions"));
 
     QList<QVariant> args;
     args << blob << BackendsManager::authBackend()->callerID();
@@ -95,15 +95,15 @@ ActionReply DBusHelperProxy::executeActi
 
     QDBusConnection::systemBus().interface()->startService(helperID);
 
-    if (!QDBusConnection::systemBus().connect(helperID, "/", "org.kde.auth", "remoteSignal", this, SLOT(remoteSignalReceived(int, const QString &, QByteArray)))) {
+    if (!QDBusConnection::systemBus().connect(helperID, QLatin1String("/"), QLatin1String("org.kde.auth"), QLatin1String("remoteSignal"), this, SLOT(remoteSignalReceived(int, const QString &, QByteArray)))) {
         ActionReply errorReply = ActionReply::DBusErrorReply;
-        errorReply.setErrorDescription(i18n("DBus Backend error: connection to helper failed. %1", 
+        errorReply.setErrorDescription(i18n("DBus Backend error: connection to helper failed. %1",
                                             QDBusConnection::systemBus().lastError().message()));
         return errorReply;
     }
 
     QDBusMessage message;
-    message = QDBusMessage::createMethodCall(helperID, "/", "org.kde.auth", "performAction");
+    message = QDBusMessage::createMethodCall(helperID, QLatin1String("/"), QLatin1String("org.kde.auth"), QLatin1String("performAction"));
 
     QList<QVariant> args;
     args << action << BackendsManager::authBackend()->callerID() << blob;
@@ -155,7 +155,7 @@ Action::AuthStatus DBusHelperProxy::auth
     QDBusConnection::systemBus().interface()->startService(helperID);
 
     QDBusMessage message;
-    message = QDBusMessage::createMethodCall(helperID, "/", "org.kde.auth", "authorizeAction");
+    message = QDBusMessage::createMethodCall(helperID, QLatin1String("/"), QLatin1String("org.kde.auth"), QLatin1String("authorizeAction"));
 
     QList<QVariant> args;
     args << action << BackendsManager::authBackend()->callerID();
@@ -188,7 +188,7 @@ bool DBusHelperProxy::initHelper(const Q
         return false;
     }
 
-    if (!QDBusConnection::systemBus().registerObject("/", this)) {
+    if (!QDBusConnection::systemBus().registerObject(QLatin1String("/"), this)) {
         return false;
     }
 
@@ -297,11 +297,11 @@ QByteArray DBusHelperProxy::performActio
 
     if (BackendsManager::authBackend()->isCallerAuthorized(action, callerID)) {
         QString slotname = action;
-        if (slotname.startsWith(m_name + '.')) {
+        if (slotname.startsWith(m_name + QLatin1Char('.'))) {
             slotname = slotname.right(slotname.length() - m_name.length() - 1);
         }
 
-        slotname.replace('.', '_');
+        slotname.replace(QLatin1Char('.'), QLatin1Char('_'));
 
         bool success = QMetaObject::invokeMethod(responder, slotname.toAscii(), Qt::DirectConnection,
                                                  Q_RETURN_ARG(ActionReply, retVal), Q_ARG(QVariantMap, args));
@@ -356,7 +356,7 @@ void DBusHelperProxy::sendDebugMessage(i
     QByteArray blob;
     QDataStream stream(&blob, QIODevice::WriteOnly);
 
-    stream << level << QString(msg);
+    stream << level << QString::fromLocal8Bit(msg);
 
     emit remoteSignal(DebugMessage, m_currentAction, blob);
 }
diff -U 3 -dHrNp -- kdelibs-4.5.4/kdecore/auth.orig/backends/mac/kauth-policy-gen-mac.cpp kdelibs-4.5.4/kdecore/auth/backends/mac/kauth-policy-gen-mac.cpp
--- kdelibs-4.5.4/kdecore/auth.orig/backends/mac/kauth-policy-gen-mac.cpp	2009-09-16 08:44:19.000000000 -0300
+++ kdelibs-4.5.4/kdecore/auth/backends/mac/kauth-policy-gen-mac.cpp	2010-12-18 17:02:23.470142068 -0200
@@ -39,17 +39,17 @@ void output(QList<Action> actions, QHash
 
             QString rule;
 
-            if (action.policy == "yes")
-                rule = kAuthorizationRuleClassAllow;
-            else if (action.policy == "no")
-                rule = kAuthorizationRuleClassDeny;
-            else if (action.policy == "auth_self")
-                rule = kAuthorizationRuleAuthenticateAsSessionUser;
-            else if (action.policy == "auth_admin")
-                rule = kAuthorizationRuleAuthenticateAsAdmin;
+            if (action.policy == QLatin1String("yes"))
+                rule = QString::fromLatin1(kAuthorizationRuleClassAllow);
+            else if (action.policy == QLatin1String("no"))
+                rule = QString::fromLatin1(kAuthorizationRuleClassDeny);
+            else if (action.policy == QLatin1String("auth_self"))
+                rule = QString::fromLatin1(kAuthorizationRuleAuthenticateAsSessionUser);
+            else if (action.policy == QLatin1String("auth_admin"))
+                rule = QString::fromLatin1(kAuthorizationRuleAuthenticateAsAdmin);
 
             CFStringRef cfRule = CFStringCreateWithCString(NULL, rule.toAscii(), kCFStringEncodingASCII);
-            CFStringRef cfPrompt = CFStringCreateWithCString(NULL, action.descriptions.value("en").toAscii(), kCFStringEncodingASCII);
+            CFStringRef cfPrompt = CFStringCreateWithCString(NULL, action.descriptions.value(QLatin1String("en")).toAscii(), kCFStringEncodingASCII);
 
             err = AuthorizationRightSet(auth, action.name.toAscii(), cfRule, cfPrompt, NULL, NULL);
             if (err != noErr) {
diff -U 3 -dHrNp -- kdelibs-4.5.4/kdecore/auth.orig/backends/policykit/kauth-policy-gen-polkit.cpp kdelibs-4.5.4/kdecore/auth/backends/policykit/kauth-policy-gen-polkit.cpp
--- kdelibs-4.5.4/kdecore/auth.orig/backends/policykit/kauth-policy-gen-polkit.cpp	2010-06-16 09:03:24.000000000 -0300
+++ kdelibs-4.5.4/kdecore/auth/backends/policykit/kauth-policy-gen-polkit.cpp	2010-12-18 17:02:23.747073508 -0200
@@ -48,21 +48,21 @@ void output(QList<Action> actions, QHash
 
     // Blacklisted characters + replacements
     QHash< QChar, QString > blacklist;
-    blacklist.insert(QChar('&'), "&amp;");
+    blacklist.insert(QChar::fromLatin1('&'), QString::fromLatin1("&amp;"));
 
-    if (domain.contains("vendor")) {
+    if (domain.contains(QLatin1String("vendor"))) {
         QHash< QChar, QString >::const_iterator blI;
-        QString vendor = domain["vendor"];
+        QString vendor = domain[QLatin1String("vendor")];
         for (blI = blacklist.constBegin(); blI != blacklist.constEnd(); ++blI) {
             vendor.replace(blI.key(), blI.value());
         }
         out << "<vendor>" << vendor << "</vendor>\n";
     }
-    if (domain.contains("vendorurl")) {
-        out << "<vendor_url>" << domain["vendorurl"] << "</vendor_url>\n";
+    if (domain.contains(QLatin1String("vendorurl"))) {
+        out << "<vendor_url>" << domain[QLatin1String("vendorurl")] << "</vendor_url>\n";
     }
-    if (domain.contains("icon")) {
-        out << "<icon_name>" << domain["icon"] << "</icon_name>\n";
+    if (domain.contains(QLatin1String("icon"))) {
+        out << "<icon_name>" << domain[QLatin1String("icon")] << "</icon_name>\n";
     }
 
     foreach (const Action &action, actions) {
@@ -70,7 +70,7 @@ void output(QList<Action> actions, QHash
 
         for (QHash< QString, QString >::const_iterator i = action.messages.constBegin(); i != action.messages.constEnd(); ++i) {
             out << dent << dent << "<description";
-            if (i.key() != "en") {
+            if (i.key() != QLatin1String("en")) {
                 out << " xml:lang=\"" << i.key() << '"';
             }
 
@@ -87,7 +87,7 @@ void output(QList<Action> actions, QHash
              i != action.descriptions.constEnd();
              ++i) {
             out << dent << dent << "<message";
-            if (i.key() != "en") {
+            if (i.key() != QLatin1String("en")) {
                 out << " xml:lang=\"" << i.key() << '"';
             }
 
@@ -101,11 +101,11 @@ void output(QList<Action> actions, QHash
         }
 
         QString policy = action.policy;
-        if (!action.persistence.isEmpty() && policy != "yes" && policy != "no") {
-            policy += "_keep_" + action.persistence;
+        if (!action.persistence.isEmpty() && policy != QLatin1String("yes") && policy != QLatin1String("no")) {
+            policy += QLatin1String("_keep_") + action.persistence;
         }
 
-        out << QString(policy_tag).arg(policy);
+        out << QString(QLatin1String(policy_tag)).arg(policy);
 
         out << dent << "</action>\n";
     }
diff -U 3 -dHrNp -- kdelibs-4.5.4/kdecore/auth.orig/backends/polkit-1/Polkit1Backend.cpp kdelibs-4.5.4/kdecore/auth/backends/polkit-1/Polkit1Backend.cpp
--- kdelibs-4.5.4/kdecore/auth.orig/backends/polkit-1/Polkit1Backend.cpp	2010-05-20 08:40:45.000000000 -0300
+++ kdelibs-4.5.4/kdecore/auth/backends/polkit-1/Polkit1Backend.cpp	2010-12-18 17:02:23.522129199 -0200
@@ -25,6 +25,14 @@
 #include <QtCore/QCoreApplication>
 #include <QtCore/QTimer>
 
+#include <QtGui/QApplication>
+#include <QtGui/QWidget>
+
+#include <QtDBus/QDBusConnection>
+#include <QtDBus/QDBusConnectionInterface>
+
+#include <kdebug.h>
+
 #include <PolkitQt1/Authority>
 #include <PolkitQt1/Subject>
 
@@ -55,7 +63,7 @@ Polkit1Backend::Polkit1Backend()
     : AuthBackend()
     , m_flyingActions(false)
 {
-    setCapabilities(AuthorizeFromHelperCapability | CheckActionExistenceCapability);
+    setCapabilities(AuthorizeFromHelperCapability | CheckActionExistenceCapability | PreAuthActionCapability);
 
     // Setup useful signals
     connect(PolkitQt1::Authority::instance(), SIGNAL(configChanged()),
@@ -66,8 +74,8 @@ Polkit1Backend::Polkit1Backend()
             this, SLOT(updateCachedActions(PolkitQt1::ActionDescription::List)));
 
     // Cache existing action IDs as soon as possible
-    PolkitQt1::Authority::instance()->enumerateActions();
     m_flyingActions = true;
+    PolkitQt1::Authority::instance()->enumerateActions();
 }
 
 Polkit1Backend::~Polkit1Backend()
@@ -75,11 +83,49 @@ Polkit1Backend::~Polkit1Backend()
 
 }
 
+void Polkit1Backend::preAuthAction(const QString& action, QWidget* parent)
+{
+    kDebug();
+    // If a parent was not specified, skip this
+    if (!parent) {
+        kDebug() << "Parent widget does not exist, skipping";
+        return;
+    }
+
+    // Are we running our KDE auth agent?
+    if (QDBusConnection::sessionBus().interface()->isServiceRegistered(QLatin1String("org.kde.Polkit1AuthAgent"))) {
+        // Check if we actually are entitled to use GUI capabilities
+        if (qApp == 0 || QApplication::type() == QApplication::Tty) {
+            kDebug() << "Not streaming parent as we are on a TTY application";
+        }
+
+        // Retrieve the dialog root window Id
+        qulonglong wId = parent->effectiveWinId();
+
+        // Send it over the bus to our agent
+        QDBusMessage methodCall =
+                QDBusMessage::createMethodCall(QLatin1String("org.kde.Polkit1AuthAgent"), QLatin1String("/org/kde/Polkit1AuthAgent"), QLatin1String("org.kde.Polkit1AuthAgent"),
+                                               QLatin1String("setWIdForAction"));
+
+        methodCall << action;
+        methodCall << wId;
+
+        QDBusPendingCall call = QDBusConnection::sessionBus().asyncCall(methodCall);
+        call.waitForFinished();
+
+        if (call.isError()) {
+            kWarning() << "ERROR while streaming the parent!!" << call.error();
+        }
+    } else {
+        kDebug() << "KDE polkit agent appears too old or not registered on the bus";
+    }
+}
+
 void Polkit1Backend::updateCachedActions(const PolkitQt1::ActionDescription::List& actions)
 {
     m_knownActions.clear();
-    foreach (PolkitQt1::ActionDescription *action, actions) {
-        m_knownActions << action->actionId();
+    foreach (const PolkitQt1::ActionDescription& action, actions) {
+        m_knownActions << action.actionId();
     }
     m_flyingActions = false;
 }
@@ -99,7 +145,7 @@ void Polkit1Backend::setupAction(const Q
 Action::AuthStatus Polkit1Backend::actionStatus(const QString &action)
 {
     PolkitQt1::UnixProcessSubject subject(QCoreApplication::applicationPid());
-    PolkitQt1::Authority::Result r = PolkitQt1::Authority::instance()->checkAuthorizationSync(action, &subject,
+    PolkitQt1::Authority::Result r = PolkitQt1::Authority::instance()->checkAuthorizationSync(action, subject,
                                                                                               PolkitQt1::Authority::None);
     switch (r) {
     case PolkitQt1::Authority::Yes:
@@ -134,7 +180,7 @@ bool Polkit1Backend::isCallerAuthorized(
     PolkitResultEventLoop e;
     connect(authority, SIGNAL(checkAuthorizationFinished(PolkitQt1::Authority::Result)),
             &e, SLOT(requestQuit(PolkitQt1::Authority::Result)));
-    authority->checkAuthorization(action, &subject, PolkitQt1::Authority::AllowUserInteraction);
+    authority->checkAuthorization(action, subject, PolkitQt1::Authority::AllowUserInteraction);
     e.exec();
 
     switch (e.result()) {
diff -U 3 -dHrNp -- kdelibs-4.5.4/kdecore/auth.orig/backends/polkit-1/Polkit1Backend.h kdelibs-4.5.4/kdecore/auth/backends/polkit-1/Polkit1Backend.h
--- kdelibs-4.5.4/kdecore/auth.orig/backends/polkit-1/Polkit1Backend.h	2010-05-20 08:40:45.000000000 -0300
+++ kdelibs-4.5.4/kdecore/auth/backends/polkit-1/Polkit1Backend.h	2010-12-18 17:02:23.521129448 -0200
@@ -44,6 +44,7 @@ public:
     Polkit1Backend();
     virtual ~Polkit1Backend();
     virtual void setupAction(const QString&);
+    virtual void preAuthAction(const QString& action, QWidget* parent);
     virtual Action::AuthStatus authorizeAction(const QString&);
     virtual Action::AuthStatus actionStatus(const QString&);
     virtual QByteArray callerID() const;
diff -U 3 -dHrNp -- kdelibs-4.5.4/kdecore/auth.orig/backends/polkit-1/kauth-policy-gen-polkit1.cpp kdelibs-4.5.4/kdecore/auth/backends/polkit-1/kauth-policy-gen-polkit1.cpp
--- kdelibs-4.5.4/kdecore/auth.orig/backends/polkit-1/kauth-policy-gen-polkit1.cpp	2010-06-16 09:03:24.000000000 -0300
+++ kdelibs-4.5.4/kdecore/auth/backends/polkit-1/kauth-policy-gen-polkit1.cpp	2010-12-18 17:02:23.521129448 -0200
@@ -48,21 +48,21 @@ void output(QList<Action> actions, QHash
 
     // Blacklisted characters + replacements
     QHash< QChar, QString > blacklist;
-    blacklist.insert(QChar('&'), "&amp;");
+    blacklist.insert(QLatin1Char('&'), QLatin1String("&amp;"));
 
-    if (domain.contains("vendor")) {
+    if (domain.contains(QLatin1String("vendor"))) {
         QHash< QChar, QString >::const_iterator blI;
-        QString vendor = domain["vendor"];
+        QString vendor = domain[QLatin1String("vendor")];
         for (blI = blacklist.constBegin(); blI != blacklist.constEnd(); ++blI) {
             vendor.replace(blI.key(), blI.value());
         }
         out << "<vendor>" << vendor << "</vendor>\n";
     }
-    if (domain.contains("vendorurl")) {
-        out << "<vendor_url>" << domain["vendorurl"] << "</vendor_url>\n";
+    if (domain.contains(QLatin1String("vendorurl"))) {
+        out << "<vendor_url>" << domain[QLatin1String("vendorurl")] << "</vendor_url>\n";
     }
-    if (domain.contains("icon")) {
-        out << "<icon_name>" << domain["icon"] << "</icon_name>\n";
+    if (domain.contains(QLatin1String("icon"))) {
+        out << "<icon_name>" << domain[QLatin1String("icon")] << "</icon_name>\n";
     }
 
     foreach (const Action &action, actions) {
@@ -71,7 +71,7 @@ void output(QList<Action> actions, QHash
         // Not a typo, messages and descriptions are actually inverted
         for (QHash< QString, QString >::const_iterator i = action.messages.constBegin(); i != action.messages.constEnd(); ++i) {
             out << dent << dent << "<description";
-            if (i.key() != "en") {
+            if (i.key() != QLatin1String("en")) {
                 out << " xml:lang=\"" << i.key() << '"';
             }
 
@@ -89,7 +89,7 @@ void output(QList<Action> actions, QHash
              i != action.descriptions.constEnd();
              ++i) {
             out << dent << dent << "<message";
-            if (i.key() != "en") {
+            if (i.key() != QLatin1String("en")) {
                 out << " xml:lang=\"" << i.key() << '"';
             }
 
@@ -103,11 +103,12 @@ void output(QList<Action> actions, QHash
         }
 
         QString policy = action.policy;
-        if (!action.persistence.isEmpty() && policy != "yes" && policy != "no") {
-            policy += "_keep";
+        if (!action.persistence.isEmpty() && policy != QLatin1String("yes") && policy !=
+                QLatin1String("no")) {
+            policy += QLatin1String("_keep");
         }
 
-        out << QString(policy_tag).arg(policy);
+        out << QString(QLatin1String(policy_tag)).arg(policy);
 
         out << dent << "</action>\n";
     }
diff -U 3 -dHrNp -- kdelibs-4.5.4/kdecore/auth.orig/kauthaction.cpp kdelibs-4.5.4/kdecore/auth/kauthaction.cpp
--- kdelibs-4.5.4/kdecore/auth.orig/kauthaction.cpp	2010-05-20 08:40:45.000000000 -0300
+++ kdelibs-4.5.4/kdecore/auth/kauthaction.cpp	2010-12-18 17:02:23.762069791 -0200
@@ -20,9 +20,8 @@
 
 #include "kauthaction.h"
 
-#include <QDebug>
-#include <QPluginLoader>
 #include <QRegExp>
+#include <QWidget>
 
 #include "BackendsManager.h"
 #include "kauthactionwatcher.h"
@@ -33,7 +32,7 @@ namespace KAuth
 class Action::Private
 {
 public:
-    Private() : valid(false), async(false) {}
+    Private() : valid(false), async(false), parent(0) {}
 
     QString name;
     QString details;
@@ -41,6 +40,7 @@ public:
     QVariantMap args;
     bool valid;
     bool async;
+    QWidget *parent;
 };
 
 // Constructors
@@ -110,7 +110,7 @@ void Action::setName(const QString &name
         d->valid = BackendsManager::authBackend()->actionExists(name);
     } else {
         // Otherwise, check through a regexp
-        QRegExp exp("[0-z]+(\\.[0-z]+)*");
+        QRegExp exp(QLatin1String("[0-z]+(\\.[0-z]+)*"));
         d->valid = exp.exactMatch(name);
     }
 }
@@ -161,6 +161,17 @@ void Action::setHelperID(const QString &
     d->helperId = id;
 }
 
+void Action::setParentWidget(QWidget* parent)
+{
+    d->parent = parent;
+}
+
+QWidget* Action::parentWidget() const
+{
+    return d->parent;
+}
+
+
 // Authorizaton methods
 Action::AuthStatus Action::authorize() const
 {
@@ -168,6 +179,11 @@ Action::AuthStatus Action::authorize() c
         return Action::Invalid;
     }
 
+    // If there is any pre auth action, let's perform it
+    if (BackendsManager::authBackend()->capabilities() & KAuth::AuthBackend::PreAuthActionCapability) {
+        BackendsManager::authBackend()->preAuthAction(d->name, d->parent);
+    }
+
     // Let's check capabilities
     if (BackendsManager::authBackend()->capabilities() & KAuth::AuthBackend::AuthorizeFromClientCapability) {
         // That's easy then
@@ -200,6 +216,10 @@ Action::AuthStatus Action::earlyAuthoriz
         // Let's check what to do
         if (BackendsManager::authBackend()->capabilities() & KAuth::AuthBackend::AuthorizeFromClientCapability) {
             // In this case we can actually try an authorization
+            if (BackendsManager::authBackend()->capabilities() & KAuth::AuthBackend::PreAuthActionCapability) {
+                BackendsManager::authBackend()->preAuthAction(d->name, d->parent);
+            }
+
             return BackendsManager::authBackend()->authorizeAction(d->name);
         } else if (BackendsManager::authBackend()->capabilities() & KAuth::AuthBackend::AuthorizeFromHelperCapability) {
             // In this case, just throw out Authorized, as the auth will take place later
@@ -225,13 +245,22 @@ Action::AuthStatus Action::status() cons
 }
 
 // Execution methods
-bool Action::executeActions(const QList<Action> &actions, QList<Action> *deniedActions, const QString &helperID)
+bool Action::executeActions(const QList<Action> &actions, QList<Action> *deniedActions, const QString &helperId)
+{
+    return executeActions(actions, deniedActions, helperId, 0);
+}
+
+bool Action::executeActions(const QList< Action >& actions, QList< Action >* deniedActions, const QString& helperId, QWidget* parent)
 {
     QList<QPair<QString, QVariantMap> > list;
 
     foreach(const Action &a, actions) {
         // Save us an additional step
         if (BackendsManager::authBackend()->capabilities() & KAuth::AuthBackend::AuthorizeFromClientCapability) {
+            if (BackendsManager::authBackend()->capabilities() & KAuth::AuthBackend::PreAuthActionCapability) {
+                BackendsManager::authBackend()->preAuthAction(a.name(), parent);
+            }
+
             AuthStatus s = BackendsManager::authBackend()->authorizeAction(a.name());
 
             if (s == Authorized) {
@@ -251,7 +280,7 @@ bool Action::executeActions(const QList<
         return false;
     }
 
-    return BackendsManager::helperProxy()->executeActions(list, helperID);
+    return BackendsManager::helperProxy()->executeActions(list, helperId);
 }
 
 bool Action::executesAsync() const
@@ -281,6 +310,9 @@ ActionReply Action::execute(const QStrin
 
     // What to do?
     if (BackendsManager::authBackend()->capabilities() & KAuth::AuthBackend::AuthorizeFromClientCapability) {
+        if (BackendsManager::authBackend()->capabilities() & KAuth::AuthBackend::PreAuthActionCapability) {
+            BackendsManager::authBackend()->preAuthAction(d->name, d->parent);
+        }
         // Authorize from here
         AuthStatus s = BackendsManager::authBackend()->authorizeAction(d->name);
 
@@ -325,6 +357,11 @@ ActionReply Action::execute(const QStrin
             ActionReply::SuccessReply : ActionReply::AuthorizationDeniedReply;
     } else {
         if (hasHelper()) {
+            // Perform the pre auth here
+            if (BackendsManager::authBackend()->capabilities() & KAuth::AuthBackend::PreAuthActionCapability) {
+                BackendsManager::authBackend()->preAuthAction(d->name, d->parent);
+            }
+
             return BackendsManager::helperProxy()->executeAction(d->name, helperID, d->args);
         } else {
             return ActionReply::SuccessReply;
diff -U 3 -dHrNp -- kdelibs-4.5.4/kdecore/auth.orig/kauthaction.h kdelibs-4.5.4/kdecore/auth/kauthaction.h
--- kdelibs-4.5.4/kdecore/auth.orig/kauthaction.h	2010-05-20 08:40:45.000000000 -0300
+++ kdelibs-4.5.4/kdecore/auth/kauthaction.h	2010-12-18 17:02:23.762069791 -0200
@@ -440,6 +440,18 @@ public:
     static bool executeActions(const QList<Action> &actions, QList<Action> *deniedActions, const QString &helperId);
 
     /**
+     * Convenience overload. This overload lets you specify, in addition, a QWidget which will be used as the
+     * authentication dialog's parent.
+     *
+     * @since 4.6
+     *
+     * @see executeActions
+     * @see setParentWidget
+     */
+    static bool executeActions(const QList<Action> &actions, QList<Action> *deniedActions, const QString &helperId,
+                               QWidget *parent);
+
+    /**
      * @brief Ask the helper to stop executing an action
      *
      * This method sends a request to the helper asking to stop the execution of an action. It is only
@@ -462,6 +474,31 @@ public:
      * use the same helperID used for the execution call (either passed as a parameter or set as default with setHelperID() )
      */
     void stop(const QString &helperID);
+
+    /**
+     * @brief Sets a parent widget for the authentication dialog
+     *
+     * This function is used for explicitely setting a parent window for an eventual authentication dialog required when
+     * authorization is triggered. Some backends, in fact, (like polkit-1) need to have a parent explicitely set for displaying
+     * the dialog correctly.
+     *
+     * @note If you are using KAuth through one of KDE's GUI components (KPushButton, KCModule...) you do not need and should not
+     *       call this function, as it is already done by the component itself.
+     *
+     * @since 4.6
+     *
+     * @param parent A QWidget which will be used as the dialog's parent
+     */
+    void setParentWidget(QWidget *parent);
+
+    /**
+     * @brief Returns the parent widget for the authentication dialog for this action
+     *
+     * @since 4.6
+     *
+     * @returns A QWidget which will is being used as the dialog's parent
+     */
+    QWidget *parentWidget() const;
 };
 
 } // namespace Auth
diff -U 3 -dHrNp -- kdelibs-4.5.4/kdecore/auth.orig/kauthhelpersupport.cpp kdelibs-4.5.4/kdecore/auth/kauthhelpersupport.cpp
--- kdelibs-4.5.4/kdecore/auth.orig/kauthhelpersupport.cpp	2009-12-14 08:53:30.000000000 -0200
+++ kdelibs-4.5.4/kdecore/auth/kauthhelpersupport.cpp	2010-12-18 17:02:23.761070039 -0200
@@ -45,7 +45,7 @@ int HelperSupport::helperMain(int argc,
     openlog(id, 0, LOG_USER);
     qInstallMsgHandler(&HelperSupport::helperDebugHandler);
 
-    if (!BackendsManager::helperProxy()->initHelper(id)) {
+    if (!BackendsManager::helperProxy()->initHelper(QString::fromLatin1(id))) {
         syslog(LOG_DEBUG, "Helper initialization failed");
         return -1;
     }
diff -U 3 -dHrNp -- kdelibs-4.5.4/kdecore/auth.orig/policy-gen/policy-gen.cpp kdelibs-4.5.4/kdecore/auth/policy-gen/policy-gen.cpp
--- kdelibs-4.5.4/kdecore/auth.orig/policy-gen/policy-gen.cpp	2010-02-03 06:50:41.000000000 -0200
+++ kdelibs-4.5.4/kdecore/auth/policy-gen/policy-gen.cpp	2010-12-18 17:02:23.465143306 -0200
@@ -19,6 +19,7 @@
 */
 
 #include "policy-gen.h"
+#include <QFile>
 
 #include <QCoreApplication>
 #include <QSettings>
@@ -40,7 +41,7 @@ int main(int argc, char **argv)
         return 1;
     }
 
-    QSettings ini(argv[1], QSettings::IniFormat);
+    QSettings ini(QFile::decodeName(argv[1]), QSettings::IniFormat);
     ini.setIniCodec("UTF-8");
     if (ini.status()) {
         qCritical("Error loading file: %s", argv[1]);
@@ -53,10 +54,10 @@ int main(int argc, char **argv)
 QList<Action> parse(QSettings &ini)
 {
     QList<Action> actions;
-    QRegExp actionExp("[0-9a-z]+(\\.[0-9a-z]+)*");
-    QRegExp descriptionExp("description(?:\\[(\\w+)\\])?");
-    QRegExp nameExp("name(?:\\[(\\w+)\\])?");
-    QRegExp policyExp("yes|no|auth_self|auth_admin");
+    QRegExp actionExp(QLatin1String("[0-9a-z]+(\\.[0-9a-z]+)*"));
+    QRegExp descriptionExp(QLatin1String("description(?:\\[(\\w+)\\])?"));
+    QRegExp nameExp(QLatin1String("name(?:\\[(\\w+)\\])?"));
+    QRegExp policyExp(QLatin1String("yes|no|auth_self|auth_admin"));
 
     descriptionExp.setCaseSensitivity(Qt::CaseInsensitive);
     nameExp.setCaseSensitivity(Qt::CaseInsensitive);
@@ -64,7 +65,7 @@ QList<Action> parse(QSettings &ini)
     foreach(const QString &name, ini.childGroups()) {
         Action action;
 
-        if (name == "Domain") {
+        if (name == QLatin1String("Domain")) {
             continue;
         }
 
@@ -81,7 +82,7 @@ QList<Action> parse(QSettings &ini)
                 QString lang = descriptionExp.capturedTexts().at(1);
 
                 if (lang.isEmpty())
-                    lang = "en";
+                    lang = QString::fromLatin1("en");
 
                 action.descriptions.insert(lang, ini.value(key).toString());
 
@@ -89,11 +90,11 @@ QList<Action> parse(QSettings &ini)
                 QString lang = nameExp.capturedTexts().at(1);
 
                 if (lang.isEmpty())
-                    lang = "en";
+                    lang = QString::fromLatin1("en");
 
                 action.messages.insert(lang, ini.value(key).toString());
 
-            } else if (key.toLower() == "policy") {
+            } else if (key.toLower() == QLatin1String("policy")) {
                 QString policy = ini.value(key).toString();
                 if (!policyExp.exactMatch(policy)) {
                     qCritical("Wrong policy: %s", policy.toAscii().data());
@@ -101,9 +102,9 @@ QList<Action> parse(QSettings &ini)
                 }
                 action.policy = policy;
 
-            } else if (key.toLower() == "persistence") {
+            } else if (key.toLower() == QLatin1String("persistence")) {
                 QString persistence = ini.value(key).toString();
-                if (persistence != "session" && persistence != "always") {
+                if (persistence != QLatin1String("session") && persistence != QLatin1String("always")) {
                     qCritical("Wrong persistence: %s", persistence.toAscii().data());
                     exit(1);
                 }
@@ -128,15 +129,15 @@ QHash<QString, QString> parseDomain(QSet
 {
     QHash<QString, QString> rethash;
 
-    if (ini.childGroups().contains("Domain")) {
-        if (ini.contains("Domain/Name")) {
-            rethash["vendor"] = ini.value("Domain/Name").toString();
+    if (ini.childGroups().contains(QString::fromLatin1("Domain"))) {
+        if (ini.contains(QString::fromLatin1("Domain/Name"))) {
+            rethash[QString::fromLatin1("vendor")] = ini.value(QString::fromLatin1("Domain/Name")).toString();
         }
-        if (ini.contains("Domain/URL")) {
-            rethash["vendorurl"] = ini.value("Domain/URL").toString();
+        if (ini.contains(QString::fromLatin1("Domain/URL"))) {
+            rethash[QString::fromLatin1("vendorurl")] = ini.value(QString::fromLatin1("Domain/URL")).toString();
         }
-        if (ini.contains("Domain/Icon")) {
-            rethash["icon"] = ini.value("Domain/Icon").toString();
+        if (ini.contains(QString::fromLatin1("Domain/Icon"))) {
+            rethash[QString::fromLatin1("icon")] = ini.value(QString::fromLatin1("Domain/Icon")).toString();
         }
     }
 
