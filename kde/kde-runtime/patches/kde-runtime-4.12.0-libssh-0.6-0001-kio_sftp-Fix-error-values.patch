From 08f5bb92a5435b6c6c052fb11712a6dce2fcd61d Mon Sep 17 00:00:00 2001
Message-Id: <08f5bb92a5435b6c6c052fb11712a6dce2fcd61d.1389369771.git.kevin.kofler@chello.at>
From: Andreas Schneider <asn@cryptomilk.org>
Date: Fri, 27 Sep 2013 12:13:43 +0200
Subject: [PATCH 1/4] kio_sftp: Fix error values.

---
 kioslave/sftp/kio_sftp.cpp | 18 +++++++++---------
 1 file changed, 9 insertions(+), 9 deletions(-)

diff --git a/kioslave/sftp/kio_sftp.cpp b/kioslave/sftp/kio_sftp.cpp
index 37b1810..ff95588 100644
--- a/kioslave/sftp/kio_sftp.cpp
+++ b/kioslave/sftp/kio_sftp.cpp
@@ -503,7 +503,7 @@ bool sftpProtocol::sftpOpenConnection (const AuthInfo& info)
 {
   mSession = ssh_new();
   if (mSession == NULL) {
-    error(KIO::ERR_INTERNAL, i18n("Could not create a new SSH session."));
+    error(KIO::ERR_OUT_OF_MEMORY, i18n("Could not create a new SSH session."));
     return false;
   }
 
@@ -514,39 +514,39 @@ bool sftpProtocol::sftpOpenConnection (const AuthInfo& info)
   // Set timeout
   int rc = ssh_options_set(mSession, SSH_OPTIONS_TIMEOUT, &timeout_sec);
   if (rc < 0) {
-    error(KIO::ERR_OUT_OF_MEMORY, i18n("Could not set a timeout."));
+    error(KIO::ERR_INTERNAL, i18n("Could not set a timeout."));
     return false;
   }
   rc = ssh_options_set(mSession, SSH_OPTIONS_TIMEOUT_USEC, &timeout_usec);
   if (rc < 0) {
-    error(KIO::ERR_OUT_OF_MEMORY, i18n("Could not set a timeout."));
+    error(KIO::ERR_INTERNAL, i18n("Could not set a timeout."));
     return false;
   }
 
   // Don't use any compression
   rc = ssh_options_set(mSession, SSH_OPTIONS_COMPRESSION_C_S, "none");
   if (rc < 0) {
-    error(KIO::ERR_OUT_OF_MEMORY, i18n("Could not set compression."));
+    error(KIO::ERR_INTERNAL, i18n("Could not set compression."));
     return false;
   }
 
   rc = ssh_options_set(mSession, SSH_OPTIONS_COMPRESSION_S_C, "none");
   if (rc < 0) {
-    error(KIO::ERR_OUT_OF_MEMORY, i18n("Could not set compression."));
+    error(KIO::ERR_INTERNAL, i18n("Could not set compression."));
     return false;
   }
 
   // Set host and port
   rc = ssh_options_set(mSession, SSH_OPTIONS_HOST, mHost.toUtf8().constData());
   if (rc < 0) {
-    error(KIO::ERR_OUT_OF_MEMORY, i18n("Could not set host."));
+    error(KIO::ERR_INTERNAL, i18n("Could not set host."));
     return false;
   }
 
   if (mPort > 0) {
     rc = ssh_options_set(mSession, SSH_OPTIONS_PORT, &mPort);
     if (rc < 0) {
-        error(KIO::ERR_OUT_OF_MEMORY, i18n("Could not set port."));
+        error(KIO::ERR_INTERNAL, i18n("Could not set port."));
       return false;
     }
   }
@@ -555,7 +555,7 @@ bool sftpProtocol::sftpOpenConnection (const AuthInfo& info)
   if (!info.username.isEmpty()) {
     rc = ssh_options_set(mSession, SSH_OPTIONS_USER, info.username.toUtf8().constData());
     if (rc < 0) {
-      error(KIO::ERR_OUT_OF_MEMORY, i18n("Could not set username."));
+      error(KIO::ERR_INTERNAL, i18n("Could not set username."));
       return false;
     }
   }
@@ -564,7 +564,7 @@ bool sftpProtocol::sftpOpenConnection (const AuthInfo& info)
   if (verbosity) {
     rc = ssh_options_set(mSession, SSH_OPTIONS_LOG_VERBOSITY_STR, verbosity);
     if (rc < 0) {
-      error(KIO::ERR_OUT_OF_MEMORY, i18n("Could not set log verbosity."));
+      error(KIO::ERR_INTERNAL, i18n("Could not set log verbosity."));
       return false;
     }
   }
-- 
1.8.1.4

