From 99883ef781f4862b9e5fe2528a78b0fe5609643f Mon Sep 17 00:00:00 2001
Message-Id: <99883ef781f4862b9e5fe2528a78b0fe5609643f.1359844887.git.kevin.kofler@chello.at>
From: Kevin Kofler <kevin.kofler@chello.at>
Date: Sat, 2 Feb 2013 08:13:27 +0100
Subject: [PATCH] ktimezoned: Watch /etc/localtime if it doesn't exist yet.

/etc/localtime legitimately might not exist. The default is then UTC.
But the file can then be created later, so watch for its creation.

If we don't do this, when setting the time zone for the first time using
kcm_clock, the initially set time zone will fail to get reloaded and the
dialog will unexpectedly jump back to UTC.
---
 ktimezoned/ktimezoned.cpp |   35 +++++++++++++++++++++--------------
 1 files changed, 21 insertions(+), 14 deletions(-)

diff --git a/ktimezoned/ktimezoned.cpp b/ktimezoned/ktimezoned.cpp
index 4eafa4e..9d52338 100644
--- a/ktimezoned/ktimezoned.cpp
+++ b/ktimezoned/ktimezoned.cpp
@@ -380,22 +380,25 @@ void KTimeZoned::findLocalZone()
         checkDefaultInit();
     }
 
-    if (!mLocalZone.isEmpty())
+    if (mLocalZone.isEmpty())
     {
-        // The local time zone is defined by a file.
-        // Watch for changes in the file so as to be notified of any change
-        // in local time zone.
-        mDirWatch = new KDirWatch(this);
-        mDirWatch->addFile(mLocalIdFile);
-        if (!mLocalIdFile2.isEmpty())
-            mDirWatch->addFile(mLocalIdFile2);
-        if (!mLocalZoneDataFile.isEmpty())
-            mDirWatch->addFile(mLocalZoneDataFile);
-        connect(mDirWatch, SIGNAL(dirty(const QString&)), SLOT(localChanged(const QString&)));
-        connect(mDirWatch, SIGNAL(deleted(const QString&)), SLOT(localChanged(const QString&)));
-        connect(mDirWatch, SIGNAL(created(const QString&)), SLOT(localChanged(const QString&)));
+        // The local time zone is not defined by a file.
+        // Watch for creation of /etc/localtime in case it gets created later.
+        mLocalIdFile = QLatin1String("/etc/localtime");
     }
-    else if (!mZoneinfoDir.isEmpty())
+    // Watch for changes in the file defining the local time zone so as to be
+    // notified of any change in it.
+    mDirWatch = new KDirWatch(this);
+    mDirWatch->addFile(mLocalIdFile);
+    if (!mLocalIdFile2.isEmpty())
+        mDirWatch->addFile(mLocalIdFile2);
+    if (!mLocalZoneDataFile.isEmpty())
+        mDirWatch->addFile(mLocalZoneDataFile);
+    connect(mDirWatch, SIGNAL(dirty(const QString&)), SLOT(localChanged(const QString&)));
+    connect(mDirWatch, SIGNAL(deleted(const QString&)), SLOT(localChanged(const QString&)));
+    connect(mDirWatch, SIGNAL(created(const QString&)), SLOT(localChanged(const QString&)));
+
+    if (mLocalZone.isEmpty() && !mZoneinfoDir.isEmpty())
     {
         // SOLUTION 7: HEURISTIC.
         // None of the deterministic stuff above has worked: try a heuristic. We
@@ -503,6 +506,10 @@ void KTimeZoned::localChanged(const QString& path)
             // Fall through to LocaltimeLink
         case LocaltimeLink:
         case LocaltimeCopy:
+        // The fallback methods below also set a watch for /etc/localtime in
+        // case it gets created.
+        case TzName:
+        case Utc:
             matchZoneFile(mLocalIdFile);
             break;
         case Timezone:
-- 
1.7.7.6

