From 40076246be995cc006a12f8afc2c18cfacbf0604 Mon Sep 17 00:00:00 2001
Message-Id: <40076246be995cc006a12f8afc2c18cfacbf0604.1389369771.git.kevin.kofler@chello.at>
In-Reply-To: <08f5bb92a5435b6c6c052fb11712a6dce2fcd61d.1389369771.git.kevin.kofler@chello.at>
References: <08f5bb92a5435b6c6c052fb11712a6dce2fcd61d.1389369771.git.kevin.kofler@chello.at>
From: Andreas Schneider <asn@cryptomilk.org>
Date: Thu, 9 Jan 2014 10:19:06 +0100
Subject: [PATCH 3/4] kio_sftp: Support ECDSA keys.

This migrates to the API of libssh 0.6.0.

BUG: 327024
---
 kioslave/CMakeLists.txt    |  2 +-
 kioslave/sftp/kio_sftp.cpp | 47 ++++++++++++++++++++++++++++++++++++----------
 2 files changed, 38 insertions(+), 11 deletions(-)

diff --git a/kioslave/CMakeLists.txt b/kioslave/CMakeLists.txt
index 026ae9b..b150290 100644
--- a/kioslave/CMakeLists.txt
+++ b/kioslave/CMakeLists.txt
@@ -11,7 +11,7 @@ set_package_properties(Samba PROPERTIES DESCRIPTION "the SMB client library, a v
                       )
 endif(NOT WIN32)
 
-macro_optional_find_package(LibSSH 0.4.0)
+macro_optional_find_package(LibSSH 0.6.0)
 set_package_properties(LibSSH PROPERTIES DESCRIPTION "the SSH library with SFTP support"
                        URL "http://www.libssh.org/"
                        TYPE OPTIONAL
diff --git a/kioslave/sftp/kio_sftp.cpp b/kioslave/sftp/kio_sftp.cpp
index 8c34faa..14bcaf6 100644
--- a/kioslave/sftp/kio_sftp.cpp
+++ b/kioslave/sftp/kio_sftp.cpp
@@ -632,8 +632,10 @@ void sftpProtocol::openConnection() {
   QString msg;     // msg for dialog box
   QString caption; // dialog box caption
   unsigned char *hash = NULL; // the server hash
+  ssh_key srv_pubkey;
   char *hexa;
-  int rc, state, hlen;
+  size_t hlen;
+  int rc, state;
 
   // Attempt to start a ssh session and establish a connection with the server.
   if (!sftpOpenConnection(info)) {
@@ -643,13 +645,25 @@ void sftpProtocol::openConnection() {
   kDebug(KIO_SFTP_DB) << "Getting the SSH server hash";
 
   /* get the hash */
-  hlen = ssh_get_pubkey_hash(mSession, &hash);
-  if (hlen < 0) {
+  rc = ssh_get_publickey(mSession, &srv_pubkey);
+  if (rc < 0) {
     error(KIO::ERR_SLAVE_DEFINED, QString::fromUtf8(ssh_get_error(mSession)));
     closeConnection();
     return;
   }
 
+  rc = ssh_get_publickey_hash(srv_pubkey,
+                              SSH_PUBLICKEY_HASH_SHA1,
+                              &hash,
+                              &hlen);
+  ssh_key_free(srv_pubkey);
+  if (rc < 0) {
+    error(KIO::ERR_SLAVE_DEFINED,
+          i18n("Could not create hash from server public key"));
+    closeConnection();
+    return;
+  }
+
   kDebug(KIO_SFTP_DB) << "Checking if the SSH server is known";
 
   /* check the server public key hash */
@@ -658,7 +672,7 @@ void sftpProtocol::openConnection() {
     case SSH_SERVER_KNOWN_OK:
       break;
     case SSH_SERVER_FOUND_OTHER:
-      delete hash;
+      ssh_string_free_char((char *)hash);
       error(KIO::ERR_SLAVE_DEFINED, i18n("The host key for this server was "
             "not found, but another type of key exists.\n"
             "An attacker might change the default server key to confuse your "
@@ -668,7 +682,7 @@ void sftpProtocol::openConnection() {
       return;
     case SSH_SERVER_KNOWN_CHANGED:
       hexa = ssh_get_hexa(hash, hlen);
-      delete hash;
+      ssh_string_free_char((char *)hash);
       /* TODO print known_hosts file, port? */
       error(KIO::ERR_SLAVE_DEFINED, i18n("The host key for the server %1 has changed.\n"
           "This could either mean that DNS SPOOFING is happening or the IP "
@@ -676,18 +690,18 @@ void sftpProtocol::openConnection() {
           "The fingerprint for the key sent by the remote host is:\n %2\n"
           "Please contact your system administrator.\n%3",
           mHost, QString::fromUtf8(hexa), QString::fromUtf8(ssh_get_error(mSession))));
-      delete hexa;
+      ssh_string_free_char(hexa);
       closeConnection();
       return;
     case SSH_SERVER_FILE_NOT_FOUND:
     case SSH_SERVER_NOT_KNOWN:
       hexa = ssh_get_hexa(hash, hlen);
-      delete hash;
+      ssh_string_free_char((char *)hash);
       caption = i18n("Warning: Cannot verify host's identity.");
       msg = i18n("The authenticity of host %1 cannot be established.\n"
         "The key fingerprint is: %2\n"
         "Are you sure you want to continue connecting?", mHost, hexa);
-      delete hexa;
+      ssh_string_free_char(hexa);
 
       if (KMessageBox::Yes != messageBox(WarningYesNo, msg, caption)) {
         closeConnection();
@@ -704,7 +718,7 @@ void sftpProtocol::openConnection() {
       }
       break;
     case SSH_SERVER_ERROR:
-      delete hash;
+      ssh_string_free_char((char *)hash);
       error(KIO::ERR_SLAVE_DEFINED, QString::fromUtf8(ssh_get_error(mSession)));
       return;
   }
@@ -732,7 +746,7 @@ void sftpProtocol::openConnection() {
   if (rc != SSH_AUTH_SUCCESS && (method & SSH_AUTH_METHOD_PUBLICKEY)) {
     kDebug(KIO_SFTP_DB) << "Trying to authenticate with public key";
     for(;;) {
-      rc = ssh_userauth_autopubkey(mSession, NULL);
+      rc = ssh_userauth_publickey_auto(mSession, NULL, NULL);
       if (rc == SSH_AUTH_ERROR) {
         kDebug(KIO_SFTP_DB) << "Public key authentication failed:" <<
                 QString::fromUtf8(ssh_get_error(mSession));
@@ -747,6 +761,19 @@ void sftpProtocol::openConnection() {
     }
   }
 
+  // Try to authenticate with GSSAPI
+  if (rc != SSH_AUTH_SUCCESS && (method & SSH_AUTH_METHOD_GSSAPI_MIC)) {
+      kDebug(KIO_SFTP_DB) << "Trying to authenticate with GSSAPI";
+      rc = ssh_userauth_gssapi(mSession);
+      if (rc == SSH_AUTH_ERROR) {
+          kDebug(KIO_SFTP_DB) << "Public key authentication failed:" <<
+                 QString::fromUtf8(ssh_get_error(mSession));
+          closeConnection();
+          error(KIO::ERR_COULD_NOT_LOGIN, i18n("Authentication failed."));
+          return;
+      }
+  }
+
   // Try to authenticate with keyboard interactive
   if (rc != SSH_AUTH_SUCCESS && (method & SSH_AUTH_METHOD_INTERACTIVE)) {
     kDebug(KIO_SFTP_DB) << "Trying to authenticate with keyboard interactive";
-- 
1.8.1.4

