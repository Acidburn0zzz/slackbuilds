From 418e7d066b72e08df81204514dba612d589dea22 Mon Sep 17 00:00:00 2001
From: Vishesh Handa <me@vhanda.in>
Date: Mon, 27 Aug 2012 15:53:58 +0530
Subject: [PATCH 09/10] Optimize sending of LiteralValue over the socket

Instead of sending it as <literal-value-string><literal-value-type>.
Send it as a string/int/bool/whatever when possible, and only send it
with the full type as a last resort.

This results in code duplication, but that should be fixed by deriving
both the classes from a common class.

REVIEW: 106233
---
 client/socketstream.cpp | 77 ++++++++++++++++++++++++++++++++++++++++++++-----
 server/datastream.cpp   | 77 ++++++++++++++++++++++++++++++++++++++++++++-----
 2 files changed, 140 insertions(+), 14 deletions(-)

diff --git a/client/socketstream.cpp b/client/socketstream.cpp
index 7178580..36472f1 100644
--- a/client/socketstream.cpp
+++ b/client/socketstream.cpp
@@ -177,8 +177,29 @@ bool Soprano::SocketStream::writeLiteralValue( const LiteralValue& value )
                 writeString( value.language().toString() ) );
     }
     else {
-        return( writeString( value.toString() ) &&
-                writeUrl( value.dataTypeUri() ) );
+        QVariant var = value.variant();
+        bool status = writeInt32( var.type() );
+        switch( var.type() ) {
+            case QVariant::String:
+                status &= writeString( var.toString() );
+                break;
+            case QVariant::Url:
+                status &= writeUrl( var.toUrl() );
+                break;
+            case QVariant::Int:
+                status &= writeInt32( var.toInt() );
+                break;
+            case QVariant::Bool:
+                status &= writeBool( var.toBool() );
+                break;
+            case QVariant::ByteArray:
+                status &= writeByteArray( var.toByteArray() );
+                break;
+            default:
+                status &= writeString( value.toString() );
+                status &= writeUrl( value.dataTypeUri() );
+        }
+        return status;
     }
 }
 
@@ -466,12 +487,54 @@ bool Soprano::SocketStream::readLiteralValue( LiteralValue& val )
             }
         }
         else {
-            QUrl dt;
-            if ( readString( v ) &&
-                 readUrl( dt ) ) {
-                val = LiteralValue::fromString( v, dt );
-                return true;
+            int t;
+            bool status = readInt32( t );
+            if( !status )
+                return false;
+
+            QVariant::Type type = static_cast<QVariant::Type>( t );
+            switch( type ) {
+                case QVariant::String: {
+                    QString str;
+                    status &= readString( str );
+                    val = LiteralValue( str );
+                    break;
+                }
+                case QVariant::Url: {
+                    QUrl url;
+                    status &= readUrl( url );
+                    val = LiteralValue( url );
+                    break;
+                }
+                case QVariant::Int: {
+                    int integer;
+                    status &= readInt32( integer );
+                    val = LiteralValue( integer );
+                    break;
+                }
+                case QVariant::Bool: {
+                    bool boolean;
+                    status &= readBool( boolean );
+                    val = LiteralValue( boolean );
+                    break;
+                }
+                case QVariant::ByteArray: {
+                    QByteArray array;
+                    status &= readByteArray( array );
+                    val = LiteralValue( array );
+                    break;
+                }
+                default: {
+                    QString str;
+                    QUrl dt;
+                    status &= readString( str );
+                    status &= readUrl( dt );
+                    val = LiteralValue::fromString( str, dt );
+                    break;
+                }
             }
+
+            return status;
         }
     }
 
diff --git a/server/datastream.cpp b/server/datastream.cpp
index 17c0c41..f98ee2d 100644
--- a/server/datastream.cpp
+++ b/server/datastream.cpp
@@ -177,8 +177,29 @@ bool Soprano::DataStream::writeLiteralValue( const LiteralValue& value )
                 writeString( value.language().toString() ) );
     }
     else {
-        return( writeString( value.toString() ) &&
-                writeUrl( value.dataTypeUri() ) );
+        QVariant var = value.variant();
+        bool status = writeInt32( var.type() );
+        switch( var.type() ) {
+            case QVariant::String:
+                status &= writeString( var.toString() );
+                break;
+            case QVariant::Url:
+                status &= writeUrl( var.toUrl() );
+                break;
+            case QVariant::Int:
+                status &= writeInt32( var.toInt() );
+                break;
+            case QVariant::Bool:
+                status &= writeBool( var.toBool() );
+                break;
+            case QVariant::ByteArray:
+                status &= writeByteArray( var.toByteArray() );
+                break;
+            default:
+                status &= writeString( value.toString() );
+                status &= writeUrl( value.dataTypeUri() );
+        }
+        return status;
     }
 }
 
@@ -467,12 +488,54 @@ bool Soprano::DataStream::readLiteralValue( LiteralValue& val )
             }
         }
         else {
-            QUrl dt;
-            if ( readString( v ) &&
-                 readUrl( dt ) ) {
-                val = LiteralValue::fromString( v, dt );
-                return true;
+            int t;
+            bool status = readInt32( t );
+            if( !status )
+                return false;
+
+            QVariant::Type type = static_cast<QVariant::Type>( t );
+            switch( type ) {
+                case QVariant::String: {
+                    QString str;
+                    status &= readString( str );
+                    val = LiteralValue( str );
+                    break;
+                }
+                case QVariant::Url: {
+                    QUrl url;
+                    status &= readUrl( url );
+                    val = LiteralValue( url );
+                    break;
+                }
+                case QVariant::Int: {
+                    int integer;
+                    status &= readInt32( integer );
+                    val = LiteralValue( integer );
+                    break;
+                }
+                case QVariant::Bool: {
+                    bool boolean;
+                    status &= readBool( boolean );
+                    val = LiteralValue( boolean );
+                    break;
+                }
+                case QVariant::ByteArray: {
+                    QByteArray array;
+                    status &= readByteArray( array );
+                    val = LiteralValue( array );
+                    break;
+                }
+                default: {
+                    QString str;
+                    QUrl dt;
+                    status &= readString( str );
+                    status &= readUrl( dt );
+                    val = LiteralValue::fromString( str, dt );
+                    break;
+                }
             }
+
+            return status;
         }
     }
 
-- 
1.8.0.2

