#!/bin/bash
#-- kdebase3 for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.brg>
# Suggested usage: $ kdebase3.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008, 2009, 2010, 2011 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.kde.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=kdebase
NAME=kdebase3
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-3.5.10}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-9}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/kde/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable support for slack-artwork
SB_SLKART=${SB_SLKART:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2
USRCARCHIVE=usb.ids

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
KDE_MIRROR=${KDE_MIRROR:-ftp://ftp.kde.org/pub/kde}
DL_URL="${KDE_MIRROR}/stable/${VERSION}/src/${SRCARCHIVE}"
UDL_URL="http://www.linux-usb.org/${USRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1
test -r ${CWD}/${USRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${UDL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}/usr

if [ -f /etc/profile.d/qt3.sh ] ;then
  unset QTDIR QTINC QTLIB
  source /etc/profile.d/qt3.sh
else
  export QTDIR=/opt/kde3/lib${LIBDIRSUFFIX}/qt3
fi
[ -r /etc/profile.d/kde3.sh ] && source /etc/profile.d/kde3.sh

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

sed -i.omit -e 's|^FONTINST_SUBDIR=kfontinst|#FONTINST_SUBDIR=kfontinst|' \
  -e 's/background//' -e 's/clock//' -e 's/display//' -e 's/energy//' \
  -e 's/fonts//' -e 's/icons//' \
  -e 's/kdm//' -e 's/kicker//' -e 's/krdb//' -e 's/kthememanager//' \
  -e 's/locale//' \
  -e 's/screensaver//' -e 's/style//' -e 's/taskbar//' -e 's/xinerama//' \
  kcontrol/Makefile.am || exit 1

cp -f ${CWD}/${USRCARCHIVE} kcontrol/usbview/usb.ids || exit 1

# build mail setting tool
zcat ${CWD}/mailsettings.cc.gz > mailsettings.cc || exit 1
g++ ${SLKCFLAGS} ${LDFLAGS} -o mailsettings mailsettings.cc || exit 1

# add missing icons for package_games_kids
for size in 16 32 48 ; do
  zcat ${CWD}/cr${size}-app-package_games_kids.png.gz \
    > pics/crystalsvg/cr${size}-app-package_games_kids.png || exit 1
done

sed -i -e 's|^Exec=.*|Exec=enlightenment_start|g;
           s|^TryExec=.*|TryExec=enlightenment_start|g;' \
           kdm/kfrontend/sessions/enlightenment.desktop || exit 1
sed -i -e 's|^Icon=.*|Icon=kscreensaver|g' \
           kcontrol/display/display.desktop || exit 1

export DO_NOT_COMPILE="kappfinder kdesktop kdesu klipper kdm kmenuedit kpager kpersonalizer ktip nsplugins"
export DO_NOT_COMPILE="${DO_NOT_COMPILE} konqueror kscreensaver ksysguard knetattach kwin"
export DO_NOT_COMPILE="${DO_NOT_COMPILE} kdialog kicker ksplashml khelpcenter kxkb"
export DO_NOT_COMPILE="${DO_NOT_COMPILE} khotkeys kdepasswd kcheckpass drkonqi"
# Keep these (kcontrol for kcms, konsole for KonsolePart, kioslave for ioslaves
# kate for kscope
# export DO_NOT_COMPILE="${DO_NOT_COMPILE} kcontrol konsole kioslave kate"

sed -iautomake -e 's|automake\*1.10\*|automake\*1.1[0-5]\*|' admin/cvs.sh
make -f admin/Makefile.common cvs || exit 1

CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc/kde \
  --includedir=/usr/include/kde3 \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --enable-gcc-hidden-visibility \
  --enable-new-ldflags \
  --disable-dependency-tracking \
  --disable-rpath \
  --disable-debug \
  --disable-warnings \
  --enable-final \
  --with-shadow \
  --with-xinerama \
  --without-pam \
  --with-samba \
  --without-java \
  --without-hal \
  --without-arts \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

make -j${NJOBS} || make || exit 1

make install RUN_KAPPFINDER=no DESTDIR=${PKG} || exit 1

install -p -m0755 mailsettings ${PKG}/usr/bin/ || exit 1

find ${PKG}/usr/lib${LIBDIRSUFFIX} -name '*.la' | xargs chmod 0644

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/usr/share/kde3
for dir in apps config config.kcfg ;do
  mv ${PKG}/usr/share/${dir} ${PKG}/usr/share/kde3/ || exit 1
done

( cd ${PKG}/usr/share/applications/kde
  for f in *.desktop ; do
    if [ "$f" == "konqbrowser.desktop" ] ; then
      cat $f | grep -v Categories >$f.o
      echo "Categories=Qt;KDE;Network;" >>$f.o
      mv $f.o $f
    else
      echo "OnlyShowIn=KDE;" >> $f
    fi
  done
)
for f in $(find ${PKG}/usr/share/applnk -name "*.desktop") ; do
  echo "OnlyShowIn=KDE;" >> $f
done

for file in printers ;do
  desktop-file-install --delete-original --vendor="" \
  --dir ${PKG}/usr/share/applications/kde  \
  --add-only-show-in="KDE" \
  ${PKG}/usr/share/applications/kde/${file}.desktop
done

# remove conflicts with kdebase-workspace
( cd ${PKG}/usr/bin
  rm -f genkdmconf kaccess kappfinder kapplymousetheme kate kbookmarkmerger \
    kblankscrn.kss kcheckrunning kcminit kcminit_startup kcontroledit kdebugdialog \
    kdeinstallktheme kdepasswd kdialog kdm kdmctl keditbookmarks \
    keditfiletype kfind kfmclient kfontinst kfontview khelpcenter khc_* \
    khotkeys kinfocenter klipper \
    kmenuedit konqueror konsole krandom.kss krandrtray kreadconfig ksmserver \
    ksplashsimple kstart ksysguard ksysguardd ksystraycmd ktip ktrash kwin \
    kwin_killer_helper kwin_rules_dialog kwrite kwriteconfig kxkb \
    nspluginscan nspluginviewer startkde kdeeject kcontrol
)
rm -f ${PKG}/etc/kde/ksysguarddrc
rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/kconf_update_bin/khotkeys_update
rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/kconf_update_bin/kwin_update_default_rules
rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/kconf_update_bin/kwin_update_window_settings
rm -f ${PKG}/usr/share/kde3/config.kcfg/kcm_useraccount.kcfg
rm -f ${PKG}/usr/share/kde3/config.kcfg/keditbookmarks.kcfg
rm -f ${PKG}/usr/share/kde3/config.kcfg/klaunch.kcfg
rm -f ${PKG}/usr/share/kde3/config.kcfg/konqueror.kcfg
rm -f ${PKG}/usr/share/kde3/config.kcfg/kwin.kcfg
rm -f ${PKG}/usr/share/kde3/config/klipperrc
rm -f ${PKG}/usr/share/kde3/config/kshorturifilterrc
rm -rf ${PKG}/usr/share/xsessions

# dups of kde4 services
rm -f ${PKG}/usr/share/applications/kde/cookies.desktop
rm -f ${PKG}/usr/share/applications/kde/desktop.desktop

#Â remove mediamanager stuff #447852 and kdebug:163717
rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/kde3/kded_mediamanager.*
rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/kde3/kded_medianotifier.*
rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/kde3/kcm_media.*
rm -f ${PKG}/usr/share/kde3/config.kcfg/mediamanagersettings.kcfg
rm -f ${PKG}/usr/share/services/kded/mediamanager.desktop
rm -f ${PKG}/usr/share/services/kded/medianotifier.desktop
rm -f ${PKG}/usr/share/applications/kde/media.desktop
rmdir -p ${PKG}/usr/share/kde3/config.kcfg

# remove conflicts with kdesdk
rm -f ${PKG}/usr/share/kde3/config/katerc

# remove docs
( cd ${PKG}/usr/share/doc/HTML/en/
  rm -rf kate kcontrol kdebugdialog kdesu kdm kfind khelpcenter kinfocenter \
    kioslave klipper kmenuedit knetattach konqueror konsole ksysguard \
    kwrite kxkb
)

# remove .desktop files for apps we don't ship
( cd ${PKG}/usr/share/applications/kde/
  rm -f Help.desktop Home.desktop Kfind.desktop installktheme.desktop \
    kappfinder.desktop kate.desktop kdepasswd.desktop kfmclient.desktop \
    kfmclient_dir.desktop kfmclient_html.desktop kfmclient_war.desktop \
    kinfocenter.desktop klipper.desktop kmenuedit.desktop \
    konqbrowser.desktop konquerorsu.desktop konsole.desktop \
    konsolesu.desktop krandrtray.desktop ksysguard.desktop ktip.desktop \
    kwrite.desktop KControl.desktop

sed -i -e "s,^OnlyShowIn=KDE;,OnlyShowIn=KDE3;," *.desktop
)

# hicolor
rm -rf ${PKG}/usr/share/icons/hicolor/*/apps/kappfinder.*
rm -rf ${PKG}/usr/share/icons/hicolor/*/apps/kate.*
rm -rf ${PKG}/usr/share/icons/hicolor/*/apps/khelpcenter.*
rm -rf ${PKG}/usr/share/icons/hicolor/*/apps/knetattach.*
rm -rf ${PKG}/usr/share/icons/hicolor/*/apps/kfind.*
rm -rf ${PKG}/usr/share/icons/hicolor/*/apps/kfm.*
rm -rf ${PKG}/usr/share/icons/hicolor/*/apps/khotkeys.*
rm -rf ${PKG}/usr/share/icons/hicolor/*/apps/kmenuedit.*
rm -rf ${PKG}/usr/share/icons/hicolor/*/apps/konqueror.*
rm -rf ${PKG}/usr/share/icons/hicolor/*/apps/konsole.*
rm -rf ${PKG}/usr/share/icons/hicolor/*/apps/ksplash.*
rm -rf ${PKG}/usr/share/icons/hicolor/*/apps/ktip.*
rm -rf ${PKG}/usr/share/icons/hicolor/*/apps/kxkb.*
rm -rf ${PKG}/usr/share/locale/en_US/
rm -rf ${PKG}/usr/share/locale/l10n/
rm -rf ${PKG}/usr/share/autostart
rm -rf ${PKG}/usr/share/desktop-directories
rm -rf ${PKG}/usr/share/templates
rm -rf ${PKG}/usr/share/wallpapers
rm -rf ${PKG}/usr/lib${LIBDIRSUFFIX}/kconf_update_bin
rm -rf ${PKG}/usr/share/fonts
rm -rf ${PKG}/usr/share/kde3/apps/kdm
rm -rf ${PKG}/usr/share/kde3/apps/konqueror
rm -rf ${PKG}/usr/share/kde3/apps/apps/kbookmark
rm -rf ${PKG}/usr/share/kde3/apps/ksmserver
rm -rf ${PKG}/usr/share/applnk
rm -rf ${PKG}/etc/kde

# Nuke man2html - we get it from man
find ${PKG} -name "man2html*" | xargs rm -rf

# Own Mozilla plugin dir
mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/mozilla/plugins

rm -f ${PKG}/usr/share/icons/crystalsvg/*/apps/wine.png

### !!! KLUDGE ALERT !!! ###
### CAUSES ARTS TO NOT USE REALTIME PRIORITY BY DEFAULT, WORKING AROUND A LOGOUT HANG ###
### THIS SHOULD BE RECONSIDERED WITH EACH KDEBASE RELEASE! ###
mkdir -p ${PKG}/usr/share/kde3/config
cat > ${PKG}/usr/share/kde3/config/kcmartsrc <<'EOF'
[Arts]
StartRealtime=false
EOF
### !!! KLUDGE ALERT !!! ###

if [ "${SB_SLKART}" = "YES" ] ;then
  for file in kdeglobals mediamanagerrc kdesktoprc konsolerc ksplashrc ;do
    rm -f ${PKG}/usr/share/kde3/config/${file}
  done
else
  # Set sane defaults for antialiasing:
  if [ ! -e ${PKG}/usr/share/kde3/config/kdeglobals ]; then
    rm -f ${PKG}/usr/share/kde3/config/kdeglobals
    install -m0644 ${CWD}/config/kdeglobals \
      ${PKG}/usr/share/kde3/config/kdeglobals.new
  else
    # This might be fixed or unsafe.  Better check it out...
    echo
    echo "BAILOUT: kdeglobals already exists.  Check to see if anti-aliased"
    echo "         fonts work out-of-the-box now..."
    echo
    exit 1
  fi
  # Change the konsole defaults to look like the real Linux console:
  install -m0644 ${CWD}/config/konsolerc \
    ${PKG}/usr/share/kde3/config/konsolerc.new
fi

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING* README ${NAME}.lsm ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# HTML docs
HTML_DIR=$(kde-config --expandvars --install html)
if [ -d ${PKG}/${HTML_DIR} ]; then
  for lang_dir in ${PKG}/${HTML_DIR}/* ; do
    if [ -d ${lang_dir} ]; then
      # replace absolute symlinks with relative ones
      ( cd ${lang_dir}
        for i in *; do
          [ -d ${i} -a -L ${i}/common ] && rm -f ${i}/common && ln -sf ../common ${i}/common
        done
        for i in */*; do
          [ -d ${i} -a -L ${i}/common ] && rm -f ${i}/common && ln -sf ../../common ${i}/common
        done
        for i in */*/*; do
          [ -d ${i} -a -L ${i}/common ] && rm -f ${i}/common && ln -sf ../../../common ${i}/common
        done
      )
    fi
  done
fi

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi

config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find usr/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{config,patches}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/*.desktop.gz ${CWD}/apply-patches.sh ${CWD}/cr*.png.gz\
                 ${CWD}/mailsettings.cc.gz ${CWD}/logrotate-kdm.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
  mkdir -p ${SBDIR}/config
  install -m0644 ${CWD}/config/* \
                 ${SBDIR}/config/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
