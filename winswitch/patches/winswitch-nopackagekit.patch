diff -up winswitch-0.12.19/winswitch/util/distro_packaging_util.py.nopackagekit winswitch-0.12.19/winswitch/util/distro_packaging_util.py
--- winswitch-0.12.19/winswitch/util/distro_packaging_util.py.nopackagekit	2013-06-30 10:28:35.000000000 -0300
+++ winswitch-0.12.19/winswitch/util/distro_packaging_util.py	2013-07-01 20:17:45.609007686 -0300
@@ -16,8 +16,6 @@ from winswitch.util.paths import BIN_SEA
 from winswitch.util.process_util import twisted_exec
 logger = Logger("distro_packaging_util", log_colour=Logger.WHITE)
 
-FORCE_PACKAGEKIT_DBUS = True
-
 def get_app(*options):
 	for x in options:
 		p = which(x)
@@ -59,7 +57,7 @@ def get_distro_helper():
 				paths = []
 				dirs = BIN_SEARCH_ORDER[:]
 				if st==NX_TYPE:
-					dirs.append("/usr/NX/bin")
+					dirs.append("/usr/libexec/nx/bin")
 				for d in dirs:
 					p = os.path.join(d, cmd)
 					paths.append(p)
@@ -69,86 +67,7 @@ def get_distro_helper():
 		elif OSX:
 			name = "Mac OS X"
 		elif LINUX:
-			redhat = load_binary_file("/etc/redhat-release")
-			debian = load_binary_file("/etc/debian_version")
-			gentoo = load_binary_file("/etc/gentoo-release")
-			term = get_terminal_app()
-			sudo = get_sudo_app()
-			def pkgcmd(name, cmd):
-				if os.environ.get("DISPLAY") and term and sudo:
-						package_map[name] = make_exec_installer([term, "-e", "%s -A %s; read -p \"Press enter to close\"" % (sudo, cmd)])
-			installer = None
-			if not installer and os.environ.get("DISPLAY"):
-				try:
-					import dbus.glib	#old way of making glib the main loop for dbus...
-					assert dbus.glib
-					from dbus.mainloop.glib import DBusGMainLoop
-					DBusGMainLoop(set_as_default=True)
-					bus = dbus.SessionBus()
-					proxy = bus.get_object('org.freedesktop.PackageKit', '/org/freedesktop/PackageKit')
-					iface = dbus.Interface(proxy, 'org.freedesktop.PackageKit.Modify')
-					def with_dbus(name, *package_names):
-						def call_packagekit(callback):
-							logger.slog("using %s" % iface, name, package_names)
-							try:
-								def error_handler(*args):
-									logger.slog(None, args)
-								def reply_handler(*args):
-									logger.slog(None, args)
-									callback()
-								result = iface.InstallPackageNames(dbus.UInt32(0), package_names, "show-confirm-search,hide-finished", reply_handler=reply_handler, error_handler=error_handler)
-								logger.sdebug("%s.InstallPackageNames(..)=%s" % (iface, result), name, package_names)
-							except dbus.DBusException, e:
-								logger.slog("%s.InstallPackageNames(..): %s" % (iface, e), name, package_names)
-						package_map[name] = call_packagekit
-					installer = with_dbus
-					manager = "packagekit via dbus"
-				except Exception, e:
-					logger.serror("failed to load dbus packagekit: %s" % e)
-			if not installer:
-				gnome_package_kit = get_app("gpk-install-package-name")
-				if gnome_package_kit:
-					def with_gpkgkit(name, *package_names):
-						package_map[name] = make_exec_installer([gnome_package_kit]+list(package_names))
-					installer = with_gpkgkit
-					manager = "gnome packagekit"
-			if not installer:
-				apper = get_app("apper")
-				if apper:
-					def with_apper(name, *package_names):
-						package_map[name] = make_exec_installer([gnome_package_kit]+list(package_names))
-					installer = with_apper
-				manager = "apper"
-			if not installer and redhat:
-				name = redhat.split(" ")[0]
-				manager = "yum"
-				def yum(name, *package_names):
-					pkgcmd(name, "yum install %s" % sv(package_names))
-				installer = yum
-			elif not installer and debian:
-				name = debian.split("/")[0]
-				manager = "apt"
-				def apt(name, *package_names):
-					pkgcmd(name, "apt-get install %s" % sv(package_names))
-				installer = apt
-			elif not installer and gentoo:
-				name = "Gentoo"
-				manager = "emerge"
-				def emerge(name, *package_names):
-					pkgcmd(name, "emerge -atv %s")
-				installer = emerge
-
-			if installer:
-				installer(XPRA_TYPE, "xpra")
-				installer(VNC_TYPE, "tigervnc")
-				installer(NX_TYPE, "nx")
-				installer(WINDOWS_TYPE, "rdesktop")
-				if debian:
-					installer("avahi", "python-avahi")
-				elif redhat:
-					installer("avahi", "avahi-ui-tools")
-				elif gentoo:
-					installer("avahi", "avahi")
+			name = "Slackware"
 	
 		distro_helper = DistroHelper(name, manager, package_map, command_paths)
 	return	distro_helper
