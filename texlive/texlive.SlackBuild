#!/bin/sh
#-- texlive for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ texlive.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008, 2009, 2010 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://tug.org/texlive/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=texlive
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-2007}
# ptex
PTVER=${PTVER:-3.1.11}
# dvipsk-jpatch
DJVER=${DJVER:-p1.7a}
# mendexk
MKVER=${MKVER:-2.6f}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

# Needs to match texmf package
SB_TEXMF_MAIN=${SB_TEXMF_MAIN:-/usr/share/texmf}
SB_TEXMF_CONF=${SB_TEXMF_CONF:-/etc/texmf}
SB_TEXMF_VAR=${SB_TEXMF_VAR:-/var/lib/texmf}

SRCDIR=${NAME}-${VERSION}
SRCDIRPT=ptex-src-${PTVER}
SRCDIRMK=mendexk${MKVER}
SRCARCHIVE=source-free.tar.bz2
SRCARCHIVEPT=${SRCDIRPT}.tar.gz
SRCARCHIVEDJ=dvipsk-jpatch-${DJVER}.tar.gz
SRCARCHIVEMK=${SRCDIRMK}.tar.gz

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="ftp://tug.org/texlive/historic/$(echo -n ${VERSION} | head -c -4)/${SRCARCHIVE}"
DL_URLPT="ftp://ftp.ascii.co.jp/pub/TeX/ascii-ptex/tetex/${SRCARCHIVEPT}"
DL_URLDJ="ftp://ftp.ascii.co.jp/pub/TeX/ascii-ptex/dvips/${SRCARCHIVEDJ}"
DL_URLMK="ftp://ftp.ascii.co.jp/pub/TeX/ascii-ptex/mendex/${SRCARCHIVEMK}"

FEDORACVS=fedora-cvs.sh
FEDORABRANCH=${FEDORABRANCH:-devel}

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || sh ${CWD}/${FEDORACVS} ${NAME} ${FEDORABRANCH} ${SRCARCHIVE} || exit 1
test -r ${CWD}/${SRCARCHIVEPT} || wget ${DL_OPTS} ${DL_URLPT} || exit 1
test -r ${CWD}/${SRCARCHIVEDJ} || wget ${DL_OPTS} ${DL_URLDJ} || exit 1
test -r ${CWD}/${SRCARCHIVEMK} || wget ${DL_OPTS} ${DL_URLMK} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
mkdir -p ${SRCDIR}
cd ${SRCDIR} || exit 1
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1

SB_SROOT="$(pwd)"

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

## Japanese pTeX
# set platex to Japanese pLaTeX. original one is moved to platex-pl
sed \
  -e s/^platex/platex-pl/g \
  -e s/^pdfplatex/pdfplatex-pl/g \
  -e s/platex\.ini/platex\-pl\.ini/g \
  -i texk/web2c/fmtutil.in

# Prepare pTeX
tar xvf ${CWD}/${SRCARCHIVEPT} -C texk/web2c/ || exit 1
( cd texk/web2c/${SRCDIRPT} || exit 1
  sed -i -e  's|/{ptex/{platex,generic,},tex/{latex,generic,}}|/{ptex/platex,{p,}tex/latex,{p,}tex/generic,{p,}tex}|g' -e 's/| uniq//g' mkconf || exit 1
  zcat ${SB_PATCHDIR}/${NAME}-2007-jp-platex209.patch.gz | patch -p1 -E --backup --verbose || exit 1
  zcat ${SB_PATCHDIR}/${NAME}-2007-ptex-3.1.10.patch.gz | patch -p1 -E --backup --verbose || exit 1
) || exit 1

# Prepare Japanese dvips
mkdir pdvipsk
tar xvf ${CWD}/${SRCARCHIVEDJ} -C pdvipsk || exit 1
cp -lR texk/dvipsk texk/pdvipsk
( cd pdvipsk || exit 1
  zcat ${SB_PATCHDIR}/${NAME}-2007-pdvips.patch.gz | patch -p0 -E --backup --verbose || exit 1
) || exit 1

patch -d texk/pdvipsk -p1 < pdvipsk/dvipsk-${DJVER}.patch || :
zcat ${SB_PATCHDIR}/dvipsk-jpatch-pdvips.patch.gz | patch -p1 -E --backup --verbose || exit 1
ln -s dvips.1 texk/pdvipsk/pdvips.1

# set up mendexk
tar xvf ${CWD}/${SRCARCHIVEMK} -C texk || exit 1

# define CCACHE_DIR to let the build pass with ccache enabled.
export CCACHE_DIR=${HOME}/.ccache
unset TEXINPUTS
unset HOME

rm -rf libs/{teckit,obsdcompat}

# Japanese pTeX
( cd texk || exit 1
  ${SB_SROOT}/texk/autoconf2.13 -m ${SB_SROOT}/texk/etc/autoconf || exit 1
) || exit 1

CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --enable-shared=yes \
  --with-system-ncurses \
  --with-system-zlib \
  --with-system-pnglib \
  --with-system-gd \
  --without-system-icu \
  --with-icu-include=/usr/include/unicode \
  --with-system-freetype \
  --with-freetype-include=/usr/include/freetype \
  --with-system-freetype2 \
  --with-freetype2-include=/usr/include/freetype2 \
  --with-system-t1lib \
  --without-texlive \
  --without-t1utils \
  --without-psutils \
  --without-ps2eps \
  --without-pdfopen \
  --without-ttf2pk \
  --disable-multiplatform \
  --without-dialog \
  --without-texinfo \
  --without-texi2html \
  --without-tex4htk \
  --without-detex --without-dvi2tty \
  --without-xdvik \
  --with-mf-x-toolkit=yes \
  --without-cxx-runtime-hack \
  --without-dvipng \
  --without-dvipdfm \
  --without-dvipdfmx \
  --without-xdvipdfmx \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

rm -rf libs/{curl,expat,freetype,freetype2,gd,howto,jpeg,libgnuw32,libgsw32,libpng,libttf,ncurses,regex,unzip,zlib,type1,t1lib,xpdf}/

# parallel build fails in libs/icu-xetex/common, build this one sequentially
( cd libs/icu-xetex || exit 1
  make -j${NJOBS} || make || exit 1
) || exit 1

make -j${NJOBS} || make || exit 1

( cd texk/web2c/${SRCDIRPT} || exit 1
  ./configure EUC || exit 1
  make -j${NJOBS} || make || exit 1
) || exit 1

( cd texk/${SRCDIRMK} || exit 1
  ./configure EUC || exit 1
  make -j${NJOBS} || make || exit 1
) || exit 1

mkdir -p ${PKG}/${SB_TEXMF_MAIN#\/}
mkdir -p ${PKG}/${SB_TEXMF_CONF#\/}
mkdir -p ${PKG}/${SB_TEXMF_VAR#\/}/web2c

export LD_LIBRARY_PATH=$(pwd)/texk/kpathsea/.libs

# a temporary placeholder for texmf.cnf
mkdir -p ${PKG}/usr/share/texmf-local/web2c
cp -a texk/kpathsea/texmf.cnf ${PKG}/usr/share/texmf-local/web2c

SB_INSTALL(){
make \
  prefix=${PKG}/usr \
  exec_prefix=${PKG}/usr \
  bindir=${PKG}/usr/bin \
  sbindir=${PKG}/usr/sbin \
  libdir=${PKG}/usr/lib${LIBDIRSUFFIX} \
  libexecdir=${PKG}/usr/libxecdir \
  sysconfdir=${PKG}/etc \
  datadir=${PKG}/usr/share \
  includedir=${PKG}/usr/include \
  libdir=${PKG}/usr/lib${LIBDIRSUFFIX} \
  localstatedir=${PKG}/var \
  sharedstatedir=${PKG}/var/lib \
  mandir=${PKG}/usr/man \
  infodir=${PKG}/usr/info \
  install $@
}

SB_INSTALL \
  texmf=${PKG}/${SB_TEXMF_MAIN#\/} \
  texmfmain=${PKG}/${SB_TEXMF_MAIN#\/} || exit 1

rm -rf ${PKG}/usr/share/texmf-local/

# remove all .la files
find ${PKG} -type f -name '*.la' -exec rm -f {} ';'

# set executable bit for the library for debuginfo creation
chmod a+x ${PKG}/usr/lib*/libkpathsea.so.*.*

## remove what is packages in other packages
# jadetex
rm -f ${PKG}/usr/bin/jadetex
rm -f ${PKG}/usr/bin/pdfjadetex
# xmltex
rm -f ${PKG}/usr/bin/xmltex
rm -f ${PKG}/usr/bin/pdfxmltex
# octave-forge
### looks to me like a name clash ?? Octave mex looks like it has nada to
### to with TeX
rm -f ${PKG}/usr/bin/mex
### not in octave-forge, nuking anyway
rm -f ${PKG}/usr/bin/pdfmex
rm -f ${PKG}/usr/bin/utf8mex

# these are owned by texmf-fonts package
rm -f ${PKG}/${SB_TEXMF_MAIN}/ls-R

rm -rf __chinfo_kpathsea
mkdir -p __chinfo_kpathsea/
mv ${PKG}/${SB_TEXMF_MAIN}/web2c/fmtutil.cnf \
  __chinfo_kpathsea/fmtutil.cnf-init || exit 1

# this file is different from the one in texmf-fonts, since it is
# the one from kpathsea which isn't specific of texlive. It is only
# used during build and to set the kpathsea default paths, however.
# Kept as documentation together with paths.h since they describe
# what the kpathsea default paths are
mkdir -p __chinfo_kpathsea/kpathsea_defaults
mv ${PKG}/${SB_TEXMF_MAIN}/web2c/texmf.cnf __chinfo_kpathsea/kpathsea_defaults/texmf-kpathsea-defaults.cnf
cp texk/kpathsea/paths.h __chinfo_kpathsea/kpathsea_defaults

# these are owned by texmf-doc package
rm -rf ${PKG}/${SB_TEXMF_MAIN}/doc/tetex

# remove pool files, they belong to texlive-texmf
rm -rf ${PKG}/${SB_TEXMF_MAIN}/web2c/*.pool
# ptex pool file is added later, and therefore kept

# Japanese pTeX
rm -f ${PKG}/usr/bin/platex

# Convert documents to UTF-8
mkdir -p ${PKG}/${SB_TEXMF_MAIN}/doc/ptex/ptex-src-${NAME} \
  ${PKG}/${SB_TEXMF_MAIN}/doc/pdvipsk
( cd texk/web2c/${SRCDIRPT}
  iconv -f ISO-2022-JP -t UTF-8 \
    COPYRIGHT.jis \
    -o ${PKG}/${SB_TEXMF_MAIN}/doc/ptex/ptex-src-${NAME}/COPYRIGHT-ja
  for i in README.txt Changes.txt ; do
    iconv -f EUC-JP -t UTF-8 ${i} \
    -o ${PKG}/${SB_TEXMF_MAIN}/doc/ptex/ptex-src-${NAME}/${i}
done
)
( cd pdvipsk
  for i in ChangeLog.jpatch README.jpatch ; do
    iconv -f EUC-JP -t UTF-8 ${i} -o ${PKG}/${SB_TEXMF_MAIN}/doc/pdvipsk/${i}
  done
)

( cd texk/web2c/${SRCDIRPT} || exit 1
  SB_INSTALL INSTALL="install -p" \
    texmf=${PKG}/${SB_TEXMF_MAIN#\/} \
    texmfmain=${PKG}/${SB_TEXMF_MAIN#\/} || exit 1
  # texmf.cnf is prepared by texlive-texmf package.
  rm -f ${PKG}/${SB_TEXMF_MAIN}/web2c/texmf.cnf
) || exit 1

# mendexk install
( cd texk/${SRCDIRMK} || exit 1
  sh ../libtool --mode=install install mendex ${PKG}/usr/bin || exit 1
) || exit 1

( cd texk/${SRCDIRMK}
  mkdir -p ${PKG}/usr/man/ja/man1
  iconv -f EUC-JP -t UTF-8 mendex.1 -o ${PKG}/usr/man/ja/man1/mendex.1
  mkdir -p ${PKG}/usr/share/texmf/doc/mendexk-${NAME}
  install -p -m 644 COPYRIGHT ChangeLog ${PKG}/usr/share/texmf/doc/mendexk-${NAME}
  iconv -f EUC-JP -t UTF-8 README.txt -o ${PKG}/usr/share/texmf/doc/mendexk-${NAME}/README
  iconv -f ISO-2022-JP -t UTF-8 COPYRIGHT.jis \
    -o ${PKG}/usr/share/texmf/doc/mendexk-${NAME}/COPYRIGHT.jis
)

# remove useless files in texconfig
rm -rf ${PKG}/${SB_TEXMF_MAIN}/texconfig/{g,v,x,README,generic}

# move the configuration files that should be under user control
mkdir -p ${PKG}/${SB_TEXMF_CONF}/{web2c/,dvipdfm/}
mv ${PKG}/${SB_TEXMF_MAIN}/web2c/mktexdir.opt \
  ${PKG}/${SB_TEXMF_CONF}/web2c/mktexdir.opt.new || exit 1

# separated projects
rm -f ${PKG}/usr/bin/devnag
rm -f ${PKG}/usr/bin/afm2pl ${PKG}/usr/{share/,}man/man1/afm2pl.1*

# remove unused ConTeXt stuff
rm -rf ${PKG}/usr/{share/,}man/man1/texfind.1* ${PKG}/usr/{share/,}man/man1/fdf2tex.1*

# remove (x)dvipdfmx related stuff
rm -f ${PKG}/usr/bin/dvipdfmx
rm -f ${PKG}/usr/bin/xdvipdfmx
rm -rf ${PKG}/${SB_TEXMF_MAIN}/dvipdfm

# remove tcfmgr stuff, it is packaged in texlive-texmf
rm -rf ${PKG}/${SB_TEXMF_MAIN}/texconfig/tcfmgr*

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  __chinfo_kpathsea/{kpathsea_defaults,fmtutil.cnf-init} ${CWD}/ChangeLog.SB \
   ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *.info*
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required | sed "s|_VERSION_|${VERSION}|g" \
  > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
# Install the info files for this package
if [ -x usr/bin/install-info ] ; then
  \${CHROOT} /usr/bin/install-info --info-dir=/usr/info usr/info/dvips.info.gz 2>/dev/null
  \${CHROOT} /usr/bin/install-info --info-dir=/usr/info usr/info/kpathsea.info.gz 2>/dev/null
  \${CHROOT} /usr/bin/install-info --info-dir=/usr/info usr/info/latex.info.gz 2>/dev/null
  \${CHROOT} /usr/bin/install-info --info-dir=/usr/info usr/info/web2c.info.gz 2>/dev/null
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
if [ -x usr/bin/texconfig-sys ] ; then
  ${CHROOT} /usr/bin/texconfig-sys init &> /dev/null
fi
if [ -x usr/bin/texconfig-sys ] ; then
  ${CHROOT} /usr/bin/texconfig-sys rehash 2>/dev/null || :
fi
if [ -x usr/bin/fmtutil-sys ] ; then
  ${CHROOT} /usr/bin/fmtutil-sys --all &> /dev/null
fi
if [ -x usr/bin/updmap-sys ] ; then
  ${CHROOT} /usr/bin/updmap-sys --syncwithtrees &> /dev/null
fi
EOF
sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/${FEDORACVS} ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.gz \
                 ${SBDIR}/patches/
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
