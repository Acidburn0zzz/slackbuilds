#!/bin/sh
#-- gnuchess for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ gnuchess.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008, 2009 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# ftp://ftp.gnu.org/pub/gnu/chess/
# http://www.bergo.eng.br/eboard/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=gnuchess
SJNAME=Sjeng-Free
EBNAME=eboard
XBNAME=xboard
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-5.07}
SJVER=${SJVER:-11.2}
EBVER=${EBVER:-1.1.1}
XBVER=${XBVER:-4.2.7}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-2}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SJDOCDIR=${PKG}/usr/doc/${SJNAME}-${SJVER}
EBDOCDIR=${PKG}/usr/doc/${EBNAME}-${EBVER}
XBDOCDIR=${PKG}/usr/doc/${XBNAME}-${XBVER}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SJSRCDIR=${SJNAME}-${SJVER}
EBSRCDIR=${EBNAME}-${EBVER}
XBSRCDIR=${XBNAME}-${XBVER}
SRCARCHIVE=${SRCDIR}.tar.gz
SJSRCARCHIVE=${SJSRCDIR}.tar.gz
EBSRCARCHIVE=${EBSRCDIR}.tar.bz2
XBSRCARCHIVE=${XBSRCDIR}.tar.gz

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
GNU_MIRROR=${GNU_MIRROR:-http://ftp.gnu.org/gnu}
SF_MIRROR=${SF_MIRROR:-http://prdownloads.sourceforge.net}
DL_URL="${GNU_MIRROR}/chess/${SRCARCHIVE}"
SJDL_URL="http://sjeng.org/ftp/${SJSRCARCHIVE}"
EBDL_URL="${SF_MIRROR}/${EBNAME}/${EBSRCARCHIVE}"
XBDL_URL="${GNU_MIRROR}/${XBNAME}/${XBSRCARCHIVE}"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi
if ! test -r ${SJSRCARCHIVE}; then
  test -r ${CWD}/${SJSRCARCHIVE} || wget ${DL_OPTS} ${SJDL_URL} || exit 1
fi
if ! test -r ${EBSRCARCHIVE}; then
  test -r ${CWD}/${EBSRCARCHIVE} || wget ${DL_OPTS} ${EBDL_URL} || exit 1
fi
if ! test -r ${XBSRCARCHIVE}; then
  test -r ${CWD}/${XBSRCARCHIVE} || wget ${DL_OPTS} ${XBDL_URL} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

for file in ${SJSRCARCHIVE} ${EBSRCARCHIVE} ${XBSRCARCHIVE} ;do
  if $(file -L ${CWD}/${file} | grep -q ": bzip2"); then
    tar -xjvf ${CWD}/${file} || exit 1
  elif $(file -L ${CWD}/${file} | grep -q ": gzip"); then
    tar -xzvf ${CWD}/${file} || exit 1
  fi
done

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1

# make gnuchess compile with gcc4
zcat ${CWD}/patches/${NAME}.gcc4_fix.diff.gz | patch -p1 --verbose --backup --suffix=.orig || exit 1
# Fix for glibc >= 2.9.90
zcat ${CWD}/patches/${NAME}-5.07-glibc.patch.gz | patch -p0 --verbose --backup --suffix=.orig || exit 1

SB_CONFIGURE(){
CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --build=${SLKTARGET}-${SLKDTARGET}-linux $@
}

SB_CONFIGURE || exit 1

make -j${NJOBS} || make || exit 1
make install DESTDIR=${PKG} || exit 1

( cd ${SJSRCDIR} || exit 1

  SB_CONFIGURE || exit 1

  make -j${NJOBS} || make || exit 1
  make install DESTDIR=${PKG} || exit 1

  mkdir -p ${SJDOCDIR}
  cp -a \
    AUTHORS BUGS COPYING NEWS README THANKS TODO ${CWD}/ChangeLog.SB \
    ${SJDOCDIR}/ || :
) || exit 1

( cd ${EBSRCDIR} || exit 1
  unset LDFLAGS
  sed -i -e 's|-O6|-O2|g' configure || exit 1
  ./configure \
    --prefix=/usr \
    --extra-flags=$(echo "${SLKCFLAGS}" | sed -e "y/ /:/") || exit 1

  sed -i -e "/^LDFLAGS/s|$| ${LDFLAGS}|g" Makefile || exit 1
  make -j${NJOBS} || make || exit 1
  make install DESTDIR=${PKG} || exit 1

  mkdir -p ${EBDOCDIR}
  cp -a \
    AUTHORS COPYING README TODO Documentation/*.txt ${CWD}/ChangeLog.SB \
    ${EBDOCDIR}/ || :
) || exit 1

( cd ${XBSRCDIR} || exit 1

  # --infodir is fubar.
  zcat ${CWD}/patches/${XBNAME}.infodir.diff.gz | patch -p1 --verbose --backup --suffix=.orig || exit 1
  # Taken from Debian to fix CVE-2004-2552
  # FOR WHICH THERE IS NO ATTACK VECTOR!!!
  zcat ${CWD}/patches/${XBNAME}.buffer_overflow_fix.diff.gz | patch -p1 --verbose --backup --suffix=.orig || exit 1

  SB_CONFIGURE || exit 1
  make -j${NJOBS} || make || exit 1

  install -m0755 xboard ${PKG}/usr/bin/xboard || exit 1
  install -m0755 zic2xpm ${PKG}/usr/bin/zic2xpm || exit 1
  install -m0755 cmail ${PKG}/usr/bin/cmail || exit 1
  install -m0755 ./pxboard ${PKG}/usr/bin/pxboard || exit 1
  install -pm 0644 ./xboard.man ${PKG}/usr/man/man6/xboard.6 || exit 1
  install -pm 0644 ./zic2xpm.man ${PKG}/usr/man/man6/zic2xpm.6 || exit 1
  mkdir -p ${PKG}/usr/info
  install -pm 644 xboard.info ${PKG}/usr/info/xboard.info || exit 1

  mkdir -p ${XBDOCDIR}
  cp -a \
    AUTHORS COPYING COPYRIGHT FAQ FAQ.html NEWS READ_ME ${CWD}/ChangeLog.SB \
    ${XBDOCDIR}/ || :
) || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/usr/share/applications

SB_DESKTOP(){
cat > ${PKG}/usr/share/applications/${2}.desktop <<EOF
[Desktop Entry]
Name=${1}
GenericName=Chess Game
Comment=A graphical chess engine frontend
Exec=${2}
Icon=chess
Terminal=false
Type=Application
Categories=Game;BoardGame;
EOF
}

SB_DESKTOP eboard eboard || exit 1
SB_DESKTOP XBoard xboard || exit 1

mkdir -p ${PKG}/usr/share/icons/hicolor/48x48/apps
zcat ${CWD}/chess.png.gz > ${PKG}/usr/share/icons/hicolor/48x48/apps/chess.png || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  doc/README AUTHORS COPYING NEWS TODO ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${PKG}/usr/doc/ -type d -print0 | xargs -0 chmod 0755
find ${PKG}/usr/doc/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *.info*
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
# Install the info files for this package
if [ -x usr/bin/install-info ] ; then
  \${CHROOT} /usr/bin/install-info --info-dir=/usr/info usr/info/${XBNAME}.info.gz 2>/dev/null
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/chess.png.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0755 ${CWD}/patches/*.gz \
                 ${SBDIR}/patches/
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
