diff -up slip/util/files.py.orig slip/util/files.py
--- slip/util/files.py.orig	2013-03-08 07:55:58.000000000 -0300
+++ slip/util/files.py	2013-03-10 01:00:43.705707771 -0300
@@ -24,7 +24,6 @@ __all__ = ["issamefile", "linkfile", "co
            "overwrite_safely"]
 
 import os
-import selinux
 import shutil
 import tempfile
 import errno
@@ -84,7 +83,7 @@ def linkfile(srcpath, dstpath):
         os.rename(_dsttmp, dstpath)
 
 
-def copyfile(srcpath, dstpath, copy_mode_from_dst=True, run_restorecon=True):
+def copyfile(srcpath, dstpath, copy_mode_from_dst=True):
     """Copy srcpath to dstpath.
 
     Abort operation if e.g. not enough space is available.  Attempt to
@@ -134,12 +133,8 @@ def copyfile(srcpath, dstpath, copy_mode
 
     os.rename(dsttmpfile.name, dstpath)
 
-    if run_restorecon and selinux.is_selinux_enabled() > 0:
-        selinux.restorecon(dstpath)
 
-
-def linkorcopyfile(srcpath, dstpath, copy_mode_from_dst=True,
-    run_restorecon=True):
+def linkorcopyfile(srcpath, dstpath, copy_mode_from_dst=True):
     """First attempt to hardlink srcpath to dstpath, if hardlinking isn't
     possible, attempt copying srcpath to dstpath."""
 
@@ -158,31 +153,16 @@ def linkorcopyfile(srcpath, dstpath, cop
 
             pass
 
-    copyfile(srcpath, dstpath, copy_mode_from_dst, run_restorecon)
+    copyfile(srcpath, dstpath, copy_mode_from_dst)
 
-def symlink_atomically(srcpath, dstpath, force=False, preserve_context=True):
-    """Create a symlink, optionally replacing dstpath atomically, optionally
-    setting or preserving SELinux context."""
+def symlink_atomically(srcpath, dstpath, force=False):
+    """Create a symlink, optionally replacing dstpath atomically."""
 
     dstdname = os.path.dirname(dstpath)
     dstbname = os.path.basename(dstpath)
 
-    run_restorecon = False
     ctx = None
 
-    if preserve_context and selinux.is_selinux_enabled() <= 0:
-        preserve_context = False
-    else:
-        try:
-            ret, ctx = selinux.lgetfilecon(dstpath)
-            if ret < 0:
-                raise RuntimeError("getfilecon(%r) failed" % dstpath)
-        except OSError, e:
-            if e.errno == errno.ENOENT:
-                run_restorecon = True
-            else:
-                raise
-
     if not force:
         os.symlink(srcpath, dstpath)
         if preserve_context:
@@ -206,9 +186,6 @@ def symlink_atomically(srcpath, dstpath,
             raise IOError(errno.EEXIST,
                     "No suitable temporary symlink could be created.")
 
-        if preserve_context and not run_restorecon:
-            selinux.lsetfilecon(dsttmp, ctx)
-
         try:
             os.rename(dsttmp, dstpath)
         except:
@@ -216,13 +193,9 @@ def symlink_atomically(srcpath, dstpath,
             os.remove(dsttmp)
             raise
 
-        if run_restorecon:
-            selinux.restorecon(dstpath)
-
-def overwrite_safely(path, content, preserve_mode=True, preserve_context=True):
+def overwrite_safely(path, content, preserve_mode=True):
     """Safely overwrite a file by creating a temporary file in the same
-    directory, writing it, moving it over the original file, eventually
-    preserving file mode and SELinux context."""
+    directory, writing it, moving it over the original file."""
 
     path = os.path.realpath(path)
     dir_ = os.path.dirname(path)
@@ -234,9 +207,6 @@ def overwrite_safely(path, content, pres
 
     exists = os.path.exists(path)
 
-    if preserve_context and selinux.is_selinux_enabled() <= 0:
-        preserve_context = False
-
     try:
         fd, tmpname = tempfile.mkstemp(prefix=base + os.path.extsep,
                                        dir=dir_)
@@ -244,11 +214,6 @@ def overwrite_safely(path, content, pres
         if exists and preserve_mode:
             shutil.copymode(path, tmpname)
 
-        if exists and preserve_context:
-            ret, ctx = selinux.getfilecon(path)
-            if ret < 0:
-                raise RuntimeError("getfilecon(%r) failed" % path)
-
         f = os.fdopen(fd, "w")
         fd = None
 
@@ -259,12 +224,6 @@ def overwrite_safely(path, content, pres
 
         os.rename(tmpname, path)
 
-        if preserve_context:
-            if exists:
-                selinux.setfilecon(path, ctx)
-            else:
-                selinux.restorecon(path)
-
     finally:
         if f:
             f.close()
