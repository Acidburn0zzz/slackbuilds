#!/bin/sh
#-- mysql-compat32 for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ mysql.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008, 2009, 2010, 2011 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.mysql.com

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}
# Set YES to remove libtool .la files
SB_RMLA=${SB_RMLA:-NO}
# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=mysql
NAME=mysql-compat32
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-5.5.19}
SVER=$(echo ${VERSION} | cut -d . -f1-2)
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH32=${ARCH32:-$(linux32 uname -m)}
else
  ARCH32=${ARCH32:-i686}
fi
SLKTARGET32=${SLKTARGET32:-i486}
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${PNAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH32}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz
SSRCARCHIVE=${SRCARCHIVE}.asc

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MYSQL_MIRROR=${MYSQL_MIRROR:-http://dev.mysql.com/get/Downloads}
DL_URL="${MYSQL_MIRROR}/MySQL-${SVER}"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH32}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH32} -mtune=i686"
                 ;;
  esac
fi
LIBDIRSUFFIX=""
export CC="gcc -m32"
export CXX="g++ -m32"
export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:${PKG_CONFIG_PATH}"

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

# workaround for upstream bug #56342
rm -f mysql-test/t/ssl_8k_key-master.opt

# upstream has fallen down badly on symbol versioning, do it ourselves
[ -s libmysql.version ] || cat ${CWD}/libmysql.version > libmysql/libmysql.version

export CFLAGS="${SLKCFLAGS} -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -fno-strict-aliasing -fwrapv -fPIC"
export CXXFLAGS="${CFLAGS}"
export FFLAGS="${SLKCFLAGS}"

cmake . \
  -DBUILD_CONFIG=mysql_release \
  -DFEATURE_SET="community" \
  -DINSTALL_LAYOUT=RPM \
  -DCMAKE_INSTALL_PREFIX="/usr" \
  -DINSTALL_INCLUDEDIR=include/mysql \
  -DINSTALL_INFODIR=info \
  -DINSTALL_LIBDIR="lib${LIBDIRSUFFIX}/mysql" \
  -DINSTALL_MANDIR=share/man \
  -DINSTALL_MYSQLSHAREDIR=share/mysql \
  -DINSTALL_MYSQLTESTDIR=share/mysql-test \
  -DINSTALL_PLUGINDIR="lib${LIBDIRSUFFIX}/mysql/plugin" \
  -DINSTALL_SBINDIR=libexec \
  -DINSTALL_SCRIPTDIR=bin \
  -DINSTALL_SQLBENCHDIR=share \
  -DINSTALL_SUPPORTFILESDIR=share/mysql \
  -DMYSQL_DATADIR="/var/lib/mysql" \
  -DMYSQL_UNIX_ADDR="/var/run/mysql/mysql.sock" \
  -DENABLED_LOCAL_INFILE=ON \
  -DENABLE_DTRACE=OFF \
  -DWITH_EMBEDDED_SERVER=ON \
  -DWITH_READLINE=ON \
  -DWITH_SSL=system \
  -DWITH_ZLIB=system \
  || exit $?

( set -o xtrace
  gcc ${CFLAGS} ${LDFLAGS} -o scriptstub "-DLIBDIR=\"/usr/lib${LIBDIRSUFFIX}/mysql\"" \
  ${CWD}/scriptstub.c || exit 1
) || exit 1

make -j${NJOBS} VERBOSE=1 || make VERBOSE=1 || exit $?

# regular build will make libmysqld.a but not libmysqld.so :-(
mkdir libmysqld/work
( cd libmysqld/work
  ar -x ../libmysqld.a
  rm -f sql_binlog.cc.o rpl_utility.cc.o
  ( set -o xtrace
    ${CC} ${SLKCFLAGS} ${LDFLAGS} -shared -Wl,-soname,libmysqld.so.0 -o libmysqld.so.0.0.1 \
    *.o \
    -lpthread -laio -lcrypt -lssl -lcrypto -lz -lrt -lstdc++ -ldl -lm -lc || exit 1
  ) || exit 1

  # this is to check that we built a complete library
  cat ${CWD}/mysql-embedded-check.c > mysql-embedded-check.c
  ln -s libmysqld.so.0.0.1 libmysqld.so.0
  ${CC} -I../../include ${CFLAGS} mysql-embedded-check.c libmysqld.so.0 || exit 1
  LD_LIBRARY_PATH=. ldd ./a.out || exit 1
) || exit 1

make install DESTDIR=${PKG} || exit $?

sed -e 's/-lprobes_mysql//' -e 's/-lmysqlclient_r/-lmysqlclient/' \
  ${PKG}/usr/bin/mysql_config >mysql_config.tmp
cp -f mysql_config.tmp ${PKG}/usr/bin/mysql_config || exit 1
chmod 755 ${PKG}/usr/bin/mysql_config

rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/mysql/libmysqld.a
install -m 0755 libmysqld/work/libmysqld.so.0.0.1 \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/mysql/libmysqld.so.0.0.1 || exit 1
ln -s libmysqld.so.0.0.1 ${PKG}/usr/lib${LIBDIRSUFFIX}/mysql/libmysqld.so.0
ln -s libmysqld.so.0 ${PKG}/usr/lib${LIBDIRSUFFIX}/mysql/libmysqld.so

[ "${SB_RMLA}" = "YES" ] && rm -f ${PKG}/usr/lib*/mysql/*.*a ${PKG}/usr/lib*/*/plugin/*.*a

rm -f ${PKG}/usr/{COPYING,README}
# Remove files we don't want installed at all
rm -f ${PKG}/usr/INSTALL-BINARY
rm -f ${PKG}/usr/docs/ChangeLog
rm -f ${PKG}/usr/data/mysql/.empty
rm -f ${PKG}/usr/data/test/.empty
rm -f ${PKG}/usr/bin/mysqlaccess.conf
rm -f ${PKG}/usr/share/mysql/binary-configure
rm -f ${PKG}/usr/share/mysql/magic
rm -f ${PKG}/usr/share/mysql/ndb-config-2-node.ini
rm -f ${PKG}/usr/share/mysql/mysql.server
rm -f ${PKG}/usr/share/mysql/mysqld_multi.server
rm -f ${PKG}/usr/share/mysql/mysql-log-rotate
rm -f ${PKG}/usr/man/man1/comp_err.1*
rm -f ${PKG}/usr/man/man1/mysql-stress-test.pl.1*
rm -f ${PKG}/usr/man/man1/mysql-test-run.pl.1*

rmdir -p ${PKG}/usr/docs
rmdir -p ${PKG}/usr/data/*

mv ${PKG}/usr/bin/mysqlbug ${PKG}/usr/lib${LIBDIRSUFFIX}/mysql/mysqlbug-32 || exit 1
mv ${PKG}/usr/bin/mysql_config ${PKG}/usr/lib${LIBDIRSUFFIX}/mysql/mysql_config-32 || exit 1

rm -rf ${PKG}/usr/{mysql-test,sql-bench,bin/*,sbin,doc,libexec,man,info,share} ${PKG}/{etc,var}

install -m 0755 scriptstub ${PKG}/usr/bin/mysqlbug-32 || exit 1
install -m 0755 scriptstub ${PKG}/usr/bin/mysql_config-32 || exit 1

mkdir -p ${PKG}/etc/ld.so.conf.d
echo "/usr/lib${LIBDIRSUFFIX}/mysql" \
  > ${PKG}/etc/ld.so.conf.d/51-${PNAME}-${ARCH}.conf || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mv ${PKG}/usr/include/mysql/my_config.h my_config_i386.h
if [ -f ${PKG}/usr/include/mysql/storage/ndb/ndb_types.h ] ;then
  mv ${PKG}/usr/include/mysql/storage/ndb/ndb_types.h ndb_types_i386.h
fi
rm -rf ${PKG}/usr/include/mysql/*
mv my_config_i386.h ${PKG}/usr/include/mysql/my_config_i386.h || exit 1

if [ -f ${PKG}/usr/include/mysql/storage/ndb/ndb_types.h ] ;then
  mkdir -p ${PKG}/usr/include/mysql/storage/ndb
  mv ndb_types_i386.h ${PKG}/usr/include/mysql/storage/ndb/ndb_types_i386.h || exit 1
fi

rm -f ${PKG}/usr/lib*/libmysqlclient.so*
for libname in libmysqlclient libmysqld ;do
  reldir=mysql
  oldlink=$(readlink ${PKG}/usr/lib${LIBDIRSUFFIX}/mysql/${libname}.so)
  ln -sf ${reldir}/$(basename ${oldlink}) ${PKG}/usr/lib${LIBDIRSUFFIX}/${libname}.so || exit 1
done

rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/mysql/libmysqlclient_r.so*
ln -s libmysqlclient.so ${PKG}/usr/lib${LIBDIRSUFFIX}/mysql/libmysqlclient_r.so
oldlink=$(readlink ${PKG}/usr/lib${LIBDIRSUFFIX}/mysql/libmysqlclient.so)
ln -s ${reldir}/$(basename ${oldlink}) ${PKG}/usr/lib${LIBDIRSUFFIX}/libmysqlclient_r.so

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc-compat32 > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
# Add ld.so.conf.d directory to /etc/ld.so.conf:
if fgrep ld.so.conf.d etc/ld.so.conf 1> /dev/null 2> /dev/null ; then
  true
else
  echo 'include /etc/ld.so.conf.d/*.conf' >> etc/ld.so.conf
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc-compat32 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
