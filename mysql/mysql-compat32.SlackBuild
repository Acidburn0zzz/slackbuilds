#!/bin/sh
#-- mysql-compat32 for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ mysql.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008, 2009 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.mysql.com

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=mysql
NAME=mysql-compat32
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-5.1.40}
SVER=$(echo ${VERSION} | cut -d . -f1-2)
[ "${ARCH}" = "x86_64" ] && ARCH=i486
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(linux32 uname -m)}
else
  ARCH=${ARCH:-i686}
fi
[ "${SLKTARGET}" = "x86_64" ] && SLKTARGET=i486
SLKTARGET=${SLKTARGET:-i486}
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${PNAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MYSQL_MIRROR=${MYSQL_MIRROR:-http://dev.mysql.com/get/Downloads/}
DL_URL="${MYSQL_MIRROR}/MySQL-${SVER}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
  esac
fi
LIBDIRSUFFIX=""
export CC="gcc -m32"
export CXX="g++ -m32"
export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:${PKG_CONFIG_PATH}"

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

libtoolize --force || exit 1
aclocal || exit 1
automake --add-missing -Wno-portability || exit 1
autoconf || exit 1
autoheader || exit 1

CFLAGS="${SLKCFLAGS} -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -fno-strict-aliasing -fwrapv -fPIC" \
CXXFLAGS="${SLKCFLAGS} -felide-constructors -fno-exceptions -fno-rtti" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var/lib/mysql \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --with-mysqld-user=mysql \
  --with-unix-socket-path=/var/run/mysql/mysql.sock \
  --localstatedir=/var/lib/mysql \
  --enable-assembler \
  --with-raid \
  --without-debug \
  --enable-thread-safe-client \
  --without-bench \
  --with-extra-charsets=complex \
  --with-vio \
  --with-innodb \
  --with-ssl=/usr \
  --without-docs \
  --without-man \
  --without-server \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

make -j${NJOBS} || make || exit 1
make install DESTDIR=${PKG} || exit 1

rm -rf ${PKG}/usr/{mysql-test,sql-bench,bin,sbin,doc,libexec,man,info,share} ${PKG}/{etc,var}

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# multilib header hacks
case "${ARCH}" in
  i[3-6]86)  MARCH=i386
             ;;
    s390)    MARCH=s390
             ;;
    x86_64)  MARCH=x86_64
             ;;
esac

mv ${PKG}/usr/include/mysql/my_config.h my_config_${MARCH}.h
if [ -f ${PKG}/usr/include/mysql/storage/ndb/ndb_types.h ] ;then
  mv ${PKG}/usr/include/mysql/storage/ndb/ndb_types.h ndb_types_${MARCH}.h
fi
rm -rf ${PKG}/usr/include/mysql/*
mv my_config_${MARCH}.h ${PKG}/usr/include/mysql/my_config_${MARCH}.h || exit 1

if [ -f ${PKG}/usr/include/mysql/storage/ndb/ndb_types.h ] ;then
  mkdir -p ${PKG}/usr/include/mysql/storage/ndb
  mv ndb_types_${MARCH}.h ${PKG}/usr/include/mysql/storage/ndb/ndb_types_${MARCH}.h || exit 1
fi

# Add some handy library symlinks:
if [ -r ${PKG}/usr/lib${LIBDIRSUFFIX}/mysql/libmysqlclient.so.16 ]; then
  ( cd ${PKG}/usr/lib${LIBDIRSUFFIX}
    rm -f libmysqlclient.so libmysqlclient.so.16
    ln -sf mysql/libmysqlclient.so .
    ln -sf mysql/libmysqlclient.so.16 .
  )
else
  exit 1
fi
if [ -r ${PKG}/usr/lib${LIBDIRSUFFIX}/mysql/libmysqlclient_r.so.16 ]; then
  ( cd ${PKG}/usr/lib${LIBDIRSUFFIX}
    rm -f libmysqlclient_r.so libmysqlclient_r.so.16
    ln -sf mysql/libmysqlclient_r.so .
    ln -sf mysql/libmysqlclient_r.so.16 .
  )
else
  exit 1
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc-compat32 > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc-compat32 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
