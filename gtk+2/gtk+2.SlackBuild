#!/bin/bash
#-- gtk+2 for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ gtk+2.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008, 2009 Phantom X, Goiania, Brazil..
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.gtk.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=gtk+
NAME=gtk+2
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-2.18.3}
SVER=$(echo ${VERSION} | cut -d . -f1-2)
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
GNOME_MIRROR=${GNOME_MIRROR:-http://ftp.gnome.org/pub/GNOME/sources}
DL_URL="${GNOME_MIRROR}/${PNAME}/${SVER}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

# make sure that gtkbuiltincache.h gets regenerated during the build
rm -f ./gtk/gtkbuiltincache.h

rm -f ./gtk/gtkmarshalers.c
rm -f ./gtk/gtkmarshalers.h

autoreconf -ivf || exit 1

# Autoconf changes linux to linux-gnu.
# Our host is $ARCH-slackware-linux not $ARCH-slackware-linux-gnu:
sed -i -e 's#linux|linux-gnu|#linux|linux|#' config.sub

CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --with-xinput=yes \
  --disable-rebuilds \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

make -j${NJOBS} || make || exit 1

# Check the host value that is passed to the compile to the one in this script:
host="${SLKTARGET}-${SLKDTARGET}-linux"
compile_host=$(grep 'host_triplet =' gtk/Makefile | sed -e "s/.* = //")
if [ "x$compile_host" != "x$host" ]; then
  echo "Host mismatch: compile='$compile_host', SlackBuild='$host'" && exit 1
fi

make install DESTDIR=${PKG} \
  RUN_QUERY_IMMODULES_TEST=false RUN_QUERY_LOADER_TEST=false || exit 1

# Do not remove .la file for compatibility with Slackware stock package
#rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/*.la
rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/gtk-2.0/*/*/*.la

mkdir -p ${PKG}/etc/gtk-2.0/${host}
mv ${PKG}/etc/gtk-2.0/*.conf ${PKG}/etc/gtk-2.0/${host}/
touch ${PKG}/etc/gtk-2.0/${host}/gdk-pixbuf.loaders
touch ${PKG}/etc/gtk-2.0/${host}/gtk.immodules

mv ${PKG}/etc/gtk-2.0/${host}/im-multipress.conf \
   ${PKG}/etc/gtk-2.0/${host}/im-multipress.conf.new || exit 1

# We need to have separate 32-bit and 64-bit binaries
# for places where we have two copies of the GTK+ package installed.
# (we might have x86_64 and i486 packages on the same system, for example.)
case "${host}" in
  s390x*|x86_64*)
   mv ${PKG}/usr/bin/gtk-query-immodules-2.0{,-64}
   mv ${PKG}/usr/bin/gdk-pixbuf-query-loaders{,-64}
   ( cd ${PKG}/usr/bin
     ln -sf gtk-query-immodules-2.0-64 gtk-query-immodules-2.0
     ln -sf gdk-pixbuf-query-loaders-64 gdk-pixbuf-query-loaders
   )
   ;;
  *)
   mv ${PKG}/usr/bin/gtk-query-immodules-2.0{,-32}
   mv ${PKG}/usr/bin/gdk-pixbuf-query-loaders{,-32}
   ( cd ${PKG}/usr/bin
     ln -sf gtk-query-immodules-2.0-32 gtk-query-immodules-2.0
     ln -sf gdk-pixbuf-query-loaders-32 gdk-pixbuf-query-loaders
   )
   ;;
esac

# Install wrappers for the binaries:
for wrapper in update-gdk-pixbuf-loaders update-gtk-immodules ;do
  zcat ${CWD}/${wrapper}.gz | sed -e "s|_SLKDTARGET|${SLKDTARGET}|g" \
   > ${PKG}/usr/bin/${wrapper}
done
chmod 0755 ${PKG}/usr/bin/update-*

mkdir -p ${PKG}/var/log/setup
cat > ${PKG}/var/log/setup/setup.07.gtk-update-icon-cache  <<EOF
chroot . /usr/bin/gtk-update-icon-cache -f -t /usr/share/icons/hicolor 1> /dev/null 2> /dev/null
EOF
chmod 0755 ${PKG}/var/log/setup/setup.07.gtk-update-icon-cache

mkdir -p ${PKG}/etc/profile.d
for file in ${PNAME}.{csh,sh} ;do
  install -m0755 ${CWD}/profile.d/${file} \
                 ${PKG}/etc/profile.d/${file}.new || exit 1
done

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING ChangeLog* README NEWS THANKS TODO ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on profile files:
if [ -r etc/profile.d/${PNAME}.csh -a -r etc/profile.d/${PNAME}.csh.new ]; then
  chmod --reference=etc/profile.d/${PNAME}.csh etc/profile.d/${PNAME}.csh.new
fi
if [ -r etc/profile.d/${PNAME}.sh -a -r etc/profile.d/${PNAME}.sh.new ]; then
  chmod --reference=etc/profile.d/${PNAME}.sh etc/profile.d/${PNAME}.sh.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<EOF
if [ -d usr/share/icons/hicolor ]; then
  if [ -x usr/bin/gtk-update-icon-cache ]; then
    \${CHROOT} /usr/bin/gtk-update-icon-cache -f -t usr/share/icons/hicolor 1> /dev/null 2> /dev/null
  fi
fi
\${CHROOT} /sbin/ldconfig 2> /dev/null
if [ -e usr/lib${LIBDIRSUFFIX}/libX11.so.6 ] && [ -x usr/bin/gtk-query-immodules-2.0 ] ; then
  \${CHROOT} /usr/bin/update-gdk-pixbuf-loaders
  \${CHROOT} /usr/bin/update-gtk-immodules
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{patches,profile.d}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/update-*.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.gz \
                 ${SBDIR}/patches/
  install -m0644 ${CWD}/profile.d/* \
                 ${SBDIR}/profile.d/
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
