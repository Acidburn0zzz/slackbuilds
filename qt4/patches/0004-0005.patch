diff -U 3 -dHrN -- qt-everywhere-opensource-src-4.7.0/src/corelib/kernel/qobject.cpp qt4-4.7.0-patched/src/corelib/kernel/qobject.cpp
--- qt-everywhere-opensource-src-4.7.0/src/corelib/kernel/qobject.cpp	2010-09-10 06:05:25.000000000 -0300
+++ qt4-4.7.0-patched/src/corelib/kernel/qobject.cpp	2010-09-21 11:14:38.000000000 -0300
@@ -1101,8 +1101,18 @@
 
     if (objectNameChanged) 
         d->declarativeData->objectNameChanged(d->declarativeData, this);
+
+#if defined(Q_WS_X11)
+    d->checkWindowRole();
+#endif
+
 }
 
+#if defined(Q_WS_X11)
+void QObjectPrivate::checkWindowRole()
+{
+}
+#endif
 
 #ifdef QT3_SUPPORT
 /*! \internal
diff -U 3 -dHrN -- qt-everywhere-opensource-src-4.7.0/src/corelib/kernel/qobject_p.h qt4-4.7.0-patched/src/corelib/kernel/qobject_p.h
--- qt-everywhere-opensource-src-4.7.0/src/corelib/kernel/qobject_p.h	2010-09-10 06:05:25.000000000 -0300
+++ qt4-4.7.0-patched/src/corelib/kernel/qobject_p.h	2010-09-21 11:14:38.000000000 -0300
@@ -82,7 +82,9 @@
 
 extern QSignalSpyCallbackSet Q_CORE_EXPORT qt_signal_spy_callback_set;
 
-enum { QObjectPrivateVersion = QT_VERSION };
+// add 0x1000000 to mark it as qt-copy version, with possible modifications
+// in some Q*Private class
+enum { QObjectPrivateVersion = QT_VERSION + 0x1000000 };
 
 class Q_CORE_EXPORT QAbstractDeclarativeData
 {
@@ -155,6 +157,9 @@
     void sendPendingChildInsertedEvents();
     void removePendingChildInsertedEvents(QObject *child);
 #endif
+#if defined(Q_WS_X11)
+    virtual void checkWindowRole();
+#endif
 
     static inline Sender *setCurrentSender(QObject *receiver,
                                     Sender *sender);
diff -U 3 -dHrN -- qt-everywhere-opensource-src-4.7.0/src/gui/kernel/qwidget_p.h qt4-4.7.0-patched/src/gui/kernel/qwidget_p.h
--- qt-everywhere-opensource-src-4.7.0/src/gui/kernel/qwidget_p.h	2010-09-10 06:05:24.000000000 -0300
+++ qt4-4.7.0-patched/src/gui/kernel/qwidget_p.h	2010-09-21 11:14:38.000000000 -0300
@@ -757,6 +757,7 @@
     static QWidget *keyboardGrabber;
 
     void setWindowRole();
+    virtual void checkWindowRole();
     void sendStartupMessage(const char *message) const;
     void setNetWmWindowTypes();
     void x11UpdateIsOpaque();
diff -U 3 -dHrN -- qt-everywhere-opensource-src-4.7.0/src/gui/kernel/qwidget_x11.cpp qt4-4.7.0-patched/src/gui/kernel/qwidget_x11.cpp
--- qt-everywhere-opensource-src-4.7.0/src/gui/kernel/qwidget_x11.cpp	2010-09-10 06:05:24.000000000 -0300
+++ qt4-4.7.0-patched/src/gui/kernel/qwidget_x11.cpp	2010-09-21 21:26:00.961746836 -0300
@@ -824,13 +824,17 @@
         data.fstrut_dirty = 1;
 
         // declare the widget's window role
+        QByteArray windowRole;
         if (QTLWExtra *topData = maybeTopData()) {
-            if (!topData->role.isEmpty()) {
-                QByteArray windowRole = topData->role.toUtf8();
-                XChangeProperty(dpy, id,
-                                ATOM(WM_WINDOW_ROLE), XA_STRING, 8, PropModeReplace,
-                                (unsigned char *)windowRole.constData(), windowRole.length());
-            }
+            if (!topData->role.isEmpty())
+                windowRole = topData->role.toUtf8();
+        }
+        if (windowRole.isEmpty()) // use object name as a fallback
+            windowRole = objectName.toUtf8();
+        if (!windowRole.isEmpty()) {
+            XChangeProperty(dpy, id,
+                            ATOM(WM_WINDOW_ROLE), XA_STRING, 8, PropModeReplace,
+                            (unsigned char *)windowRole.constData(), windowRole.length());
         }
 
         // set client leader property
@@ -2939,6 +2943,17 @@
     XChangeProperty(X11->display, q->internalWinId(),
                     ATOM(WM_WINDOW_ROLE), XA_STRING, 8, PropModeReplace,
                     (unsigned char *)windowRole.constData(), windowRole.length());
+}
+
+void QWidgetPrivate::checkWindowRole()
+{
+    Q_Q(QWidget);
+    if( !q->windowRole().isEmpty() || !q->internalWinId())
+        return;
+    QByteArray windowRole = objectName.toUtf8(); // use as a fallback
+    XChangeProperty(X11->display, q->internalWinId(),
+                    ATOM(WM_WINDOW_ROLE), XA_STRING, 8, PropModeReplace,
+                    (unsigned char *)windowRole.constData(), windowRole.length());
 }
 
 Q_GLOBAL_STATIC(QX11PaintEngine, qt_widget_paintengine)
