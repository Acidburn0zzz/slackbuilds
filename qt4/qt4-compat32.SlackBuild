#!/bin/sh
#-- qt4-compat32 for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ qt4-compat32.SlackBuild 2>&1 | tee build.log
#--
# Using code from Rex Dieter <rexdieter[AT]users.sf.net> RPM spec file
# Copyright 2008, 2009, 2010 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.qtsoftware.com/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=qt
PNAME2=qt4
NAME=${PNAME}4-compat32
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-4.6.2}
PVER=${PVER:-4.6.2-20100503}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
BUILD=${BUILD:-6}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${PNAME2}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${PNAME2}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable enable precompiled headers
SB_PCH=${SB_PCH:-NO}

# Set to YES to enable phonon support
SB_PHONON=${SB_PHONON:-NO}
SB_PHONON_BACKEND=${SB_PHONON_BACKEND:-NO}
# Set to YES to use internal phonon, else standalone phonon package is REQUIRED after,
# case above options is YES
SB_PHONON_INTERNAL=${SB_PHONON_INTERNAL:-NO}

# Set to YES to enable pulseaudio as default on phonon
SB_PA=${SB_PA:-NO}

# Set to YES to enable webkit module
SB_WEBKIT=${SB_WEBKIT:-YES}

# Set to YES to build demo and examples
SB_DEMOS=${SB_DEMOS:-NO}

# Set to YES to enable postgresql plugin
SB_PGSQL=${SB_PGSQL:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-everywhere-opensource-src-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz
PSRCARCHIVE=kde-qt-patches-${PVER}.tar.xz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
QT_MIRROR=${QT_MIRROR:-http://get.qt.nokia.com}
DL_URL="${QT_MIRROR}/qt/source/${SRCARCHIVE}"
PDL_URL="http://cloud.github.com/downloads/PhantomX/slackbuilds/${PSRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1
test -r ${CWD}/${PSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${PDL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH32}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH32} -mtune=i686"
                 ;;
  esac
fi
LIBDIRSUFFIX=""
export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:${PKG_CONFIG_PATH}"

unset CFLAGS CXXFLAGS CPPFLAGS

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1
tar -xvf ${CWD}/${PSRCARCHIVE} || exit 1

SB_SROOT="$(pwd)"

# these should match contents of qt4.macros:
_qt4_prefix=/usr/lib${LIBDIRSUFFIX}/qt4
_qt4_bindir=${_qt4_prefix}/bin
_qt4_datadir=${_qt4_prefix}
_qt4_demosdir=${_qt4_prefix}/demos
_qt4_docdir=/usr/doc/qt4
_qt4_examplesdir=${_qt4_prefix}/examples
_qt4_headerdir=/usr/include
_qt4_libdir=/usr/lib${LIBDIRSUFFIX}
_qt4_plugindir=${_qt4_prefix}/plugins
_qt4_sysconfdir=/etc
_qt4_translationdir=/usr/share/qt4/translations

unset QTDIR QTINC QTLIB QMAKESPEC
export QT4DIR="$(pwd)"
export PATH=${QT4DIR}/bin:${PATH}
export LD_LIBRARY_PATH=${QT4DIR}/lib:${LD_LIBRARY_PATH}

# Fix file perms:
chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

if [ -f ${CWD}/qt_pt_BR.ts.gz ] ;then
  zcat ${CWD}/qt_pt_BR.ts.gz > translations/qt_pt_BR.ts || exit 1
fi

# drop -fexceptions from $SLKCFLAGS
SLKCFLAGS="$(echo ${SLKCFLAGS} | sed 's|-fexceptions||g')"

## customize our platform
platform=linux-g++-32

sed -i \
  -e "s|-O2|${SLKCFLAGS}|g" \
  -e "s|g++.conf|g++-multilib.conf|g" \
  -e '/^QMAKE_LIBDIR_X11/d' \
  -e '/^QMAKE_LIBDIR_OPENGL/d' \
  mkspecs/linux-g++{,-32,-64}/qmake.conf || exit 1
sed -e "s|^QMAKE_CFLAGS_RELEASE|#QMAKE_CFLAGS_RELEASE|g" \
 mkspecs/common/g++.conf > mkspecs/common/g++-multilib.conf

# 
if [ "${_qt4_libdir}" == "/usr/lib${LIBDIRSUFFIX}" ] ;then
  sed -i \
    -e "s|^QMAKE_LIBDIR_QT.*=.*|QMAKE_LIBDIR_QT       =|" \
    -e "s,QMAKE_LIBDIR_X11.*,QMAKE_LIBDIR_X11\t=," \
    -e "s,QMAKE_INCDIR_X11.*,QMAKE_INCDIR_X11\t=," \
    -e "s,QMAKE_INCDIR_OPENGL.*,QMAKE_INCDIR_OPENGL\t=," \
    -e "s,QMAKE_LIBDIR_OPENGL.*,QMAKE_LIBDIR_OPENGL\t=," \
    mkspecs/common/linux.conf
fi

unset SLKLDFLAGS
if [ "${LDFLAGS}" ] ;then
  SLKLDFLAGS="${LDFLAGS}"
  sed -i -e "/^QMAKE_LFLAGS_RELEASE/s|$| ${SLKLDFLAGS}|g" \
            mkspecs/*/qmake*.conf mkspecs/common/g++-multilib.conf || exit 1
fi
unset LDFLAGS

# undefine QMAKE_STRIP, so we get useful -debuginfo pkgs
sed -i -e "s|^QMAKE_STRIP.*=.*|QMAKE_STRIP             =|" \
  mkspecs/common/linux.conf

# set correct lib path
if [ "lib${LIBDIRSUFFIX}" == "lib64" ] ; then
  sed -i -e "s,/usr/lib /lib,/usr/lib${LIBDIRSUFFIX} /lib${LIBDIRSUFFIX},g" config.tests/{unix,x11}/*.test
  sed -i -e "s,/lib /usr/lib,/lib${LIBDIRSUFFIX} /usr/lib${LIBDIRSUFFIX},g" config.tests/{unix,x11}/*.test
fi

# let syncqt to create new header
rm -rf include

sed -r -e 's:(assistant|designer|linguist|qtconfig)::g' -i tools/tools.pro || exit 1
sed -e 's:qdbusviewer::g' -i tools/qdbus/qdbus.pro || exit 1

unset SB_DEMOSOPTS SB_PHONONOPTS SB_PHONON_BACKENDOPTS SB_WEBKITOPTS SB_PGSQLOPTS
if [ "${SB_DEMOS}" != "YES" ] ; then
  sed -i '/^CFG_NOBUILD_PARTS=/s|"$| demos examples"|g' \
    configure || exit 1
  SB_DEMOSOPTS="-nomake demos -nomake examples"
fi

[ "${SB_PCH}" == "YES" ] || SB_PCHOPTS="-no-pch"
if [ "${SB_PHONON}" == "YES" ] ;then
  SB_PHONONOPTS="-phonon"
else
  SB_PHONONOPTS="-no-phonon"
fi
if [ "${SB_PHONON_BACKEND}" == "YES" ] ;then
  SB_PHONON_BACKENDOPTS="-phonon-backend"
else
  SB_PHONON_BACKENDOPTS="-no-phonon-backend"
fi
[ "${SB_WEBKIT}" == "YES" ] || SB_WEBKITOPTS="-no-webkit"

[ "${SB_PGSQL}" = "YES" ] && SB_PGSQLOPTS="-plugin-sql-psql"

# And here's what we are currently using.  The "-confirm-license" agrees to the GPL, so don't run this script if you
# don't agree.  :-)
./configure -v \
  -confirm-license \
  -opensource \
  -optimized-qmake \
  -prefix ${_qt4_prefix} \
  -bindir ${_qt4_bindir} \
  -datadir ${_qt4_datadir} \
  -demosdir ${_qt4_demosdir} \
  -docdir ${_qt4_docdir} \
  -examplesdir ${_qt4_examplesdir} \
  -headerdir ${_qt4_headerdir} \
  -libdir ${_qt4_libdir} \
  -plugindir ${_qt4_plugindir} \
  -sysconfdir ${_qt4_sysconfdir} \
  -translationdir ${_qt4_translationdir} \
  -platform ${platform} \
  -release \
  -shared \
  -cups \
  -fontconfig \
  -largefile \
  -gtkstyle \
  -qt-gif \
  -no-rpath \
  -reduce-relocations \
  -no-separate-debug-info \
  -sm \
  -stl \
  -system-libmng \
  -system-libpng \
  -system-libjpeg \
  -system-libtiff \
  -system-zlib \
  -xcursor \
  -xfixes \
  -xinerama \
  -xshape \
  -xrandr \
  -xrender \
  -xkb \
  -glib \
  -openssl-linked \
  -xmlpatterns \
  -opengl \
  -dbus-linked \
  ${SB_PCHOPTS} ${SB_WEBKITOPTS} ${SB_PHONONOPTS} ${SB_PHONON_BACKENDOPTS} ${SB_DEMOSOPTS} \
  -plugin-sql-mysql ${SB_PGSQLOPTS} \
  -plugin-sql-sqlite -system-sqlite \
  -no-multimedia \
  -no-scripttools \
  -nomake doc || exit 1

make -j${NJOBS} || make || exit 1

make install INSTALL_ROOT=${PKG} || exit 1

## pkg-config
# strip extraneous dirs/libraries -- Rex
# FIXME?: qt-4.5 seems to use Libs.private properly, so this hackery should 
#         no longer be required -- Rex
# safe ones
glib2_libs="$(pkg-config --libs glib-2.0 gobject-2.0 gthread-2.0)"
ssl_libs="$(pkg-config --libs openssl)"
for dep in \
  -laudio -ldbus-1 -lfreetype -lfontconfig ${glib2_libs} \
  -ljpeg -lm -lmng -lpng ${ssl_libs} -lsqlite3 -lz \
  -L/usr/X11R6/lib${LIBDIRSUFFIX} -L/usr/lib${LIBDIRSUFFIX} \
  -L${SB_SROOT}/lib ; do
  sed -i -e "s|${dep} ||g" ${PKG}/${_qt4_libdir}/lib*.la ||:
  sed -i -e "s|${dep} ||g" ${PKG}/${_qt4_libdir}/pkgconfig/*.pc
  sed -i -e "s|${dep} ||g" ${PKG}/${_qt4_libdir}/*.prl
done

# riskier
for dep in -lXrender -lXrandr -lXcursor -lXfixes -lXinerama -lXi -lXft -lXt -lXext -lX11 -lSM -lICE -ldl -lpthread ; do
  sed -i -e "s|${dep} ||g" ${PKG}/${_qt4_libdir}/lib*.la ||:
  sed -i -e "s|${dep} ||g" ${PKG}/${_qt4_libdir}/pkgconfig/*.pc
  sed -i -e "s|${dep} ||g" ${PKG}/${_qt4_libdir}/*.prl
done

# nuke dandling reference(s) to ${PKG}
sed -i -e "/^QMAKE_PRL_BUILD_DIR/d" ${PKG}/${_qt4_libdir}/*.prl

# nuke QMAKE_PRL_LIBS, seems similar to static linking and .la files (#520323)
sed -i -e "s|^QMAKE_PRL_LIBS|#QMAKE_PRL_LIBS|" ${PKG}/${_qt4_libdir}/*.prl

# _debug lib symlinks
( cd ${PKG}/${_qt4_libdir}
  for lib in libQt*.so ; do
    libbase=$(basename ${lib} .so | sed -e 's/^lib//')
    #ln -s ${lib} $(basename ${lib} .so)_debug.so
    echo "INPUT(-l${libbase})" > lib${libbase}_debug.so 
  done
  for lib in libQt*.a ; do
    libbase=$(basename ${lib} .a | sed -e 's/^lib//')
    #ln -s ${lib} $(basename ${lib} .a)_debug.a
    echo "INPUT(-l${libbase})" > lib${libbase}_debug.a
  done
) || exit 1

# .la files, die, die, die.
rm -f ${PKG}/${_qt4_libdir}/lib*.la

# Put this back as shipped:
sed -i -e "s|${SLKCFLAGS}|-O2|g" \
          ${PKG}/${_qt4_datadir}/mkspecs/*/qmake.conf || exit 1
if [ "${SLKLDFLAGS}" ] ;then
  sed -i -e "/^QMAKE_LFLAGS_RELEASE/s| ${SLKLDFLAGS}||g" \
    ${PKG}/${_qt4_datadir}/mkspecs/*/qmake*.conf \
    ${PKG}/${_qt4_datadir}/mkspecs/common/g++-multilib.conf || exit 1
fi

# multilib: qconfig.h
mv ${PKG}/${_qt4_headerdir}/Qt/qconfig.h qconfig-i386.h || exit 1
  ${PKG}/${_qt4_headerdir}/QtCore/qconfig-i386.h || exit 1
rm -rf ${PKG}/${_qt4_headerdir}/*
mkdir -p ${PKG}/${_qt4_headerdir}/QtCore
mv qconfig-i386.h ${PKG}/${_qt4_headerdir}/QtCore/qconfig-i386.h || exit 1

if [ "${_qt4_datadir}" != "${_qt4_prefix}" ] ;then
  # multilib: mkspecs hacks, unfortunately, breaks some stuff
  mkdir -p ${PKG}/${_qt4_prefix}/mkspecs
  mv ${PKG}/${_qt4_datadir}/mkspecs/{default,linux-g++*,qconfig.pri} \
     ${PKG}/${_qt4_prefix}/mkspecs/
  ln -s ${_qt4_datadir}/mkspecs/common ${PKG}/${_qt4_prefix}/mkspecs/common
fi

if [ ! -d ${PKG}/${_qt4_translationdir} ] ;then
  mkdir -p ${PKG}/${_qt4_translationdir}
fi

if [ "${_qt4_libdir}" != "/usr/lib${LIBDIRSUFFIX}" ] ;then
mkdir -p ${PKG}/etc/ld.so.conf.d
cat > ${PKG}/etc/ld.so.conf.d/qt4-${ARCH}.conf.new << EOF
${_qt4_libdir}
EOF
fi

mkdir -p ${PKG}/${_qt4_plugindir}/styles
mkdir -p ${PKG}/${_qt4_plugindir}/gui_platform

if [ "${SB_PHONON}" == "YES" ] && [ "${SB_PHONON_INTERNAL}" == "YES" ] ;then
  mkdir -p ${PKG}/${_qt4_plugindir}/phonon_backend
else
  rm -fv  ${PKG}/${_qt4_libdir}/libphonon.so*
  rm -rfv ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/phonon.pc
  # contents slightly different between phonon-4.3.1 and qt-4.5.0
  rm -fv  ${PKG}/usr/include/phonon/phononnamespace.h
  # contents dup'd but should remove just in case
  rm -fv  ${PKG}/usr/include/phonon/*.h
  rm -rfv ${PKG}/${_qt4_headerdir}/phonon*
  #rm -rfv ${PKG}/${_qt4_headerdir}/Qt/phonon*
  rm -fv ${PKG}/usr/share/dbus-1/interfaces/org.kde.Phonon.AudioOutput.xml
fi

rm -rf ${PKG}/usr/{bin,sbin,doc,libexec,man,info} ${PKG}/{etc,var}

rm -rf ${PKG}/${_qt4_translationdir}/* ${PKG}/${_qt4_docdir}/*
rm -rf ${PKG}/usr/share/dbus-1 ${PKG}/usr/share/kde4
rmdir -p ${PKG}/${_qt4_translationdir}
rmdir -p ${PKG}/${_qt4_docdir}
rmdir -p ${PKG}/usr/share

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Qt.pc
cat > ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/Qt.pc <<EOFP
prefix=${_qt4_prefix}
exec_prefix=\${prefix}
bindir=${_qt4_bindir}
datadir=${_qt4_datadir}
demosdir=${_qt4_demosdir}
docdir=${_qt4_docdir}
examplesdir=${_qt4_examplesdir}
headerdir=${_qt4_headerdir}
libdir=${_qt4_libdir}
plugindir=${_qt4_plugindir}
qmake=${_qt4_bindir}/qmake
sysconfdir=${_qt4_sysconfdir}
translationdir=${_qt4_translationdir}

Name: Qt
Description: Qt Configuration
Version: ${VERSION}
EOFP


if [ "${SB_PHONON_BACKEND}" == "YES" ] && [ "${SB_PHONON_INTERNAL}" == "YES" ] ;then
  :
else
  rm -fv ${PKG}/${_qt4_plugindir}/phonon_backend/*_gstreamer.so
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc-compat32 > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Add ld.so.conf.d directory to /etc/ld.so.conf:
if fgrep ld.so.conf.d etc/ld.so.conf 1> /dev/null 2> /dev/null ; then
  true
else
  echo 'include /etc/ld.so.conf.d/*.conf' >> etc/ld.so.conf
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc-compat32 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
