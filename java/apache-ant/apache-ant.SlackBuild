#!/bin/sh
#-- apache-ant for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ apache-ant.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2014 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://ant.apache.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=apache-ant
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.9.3}
ARCH=noarch
SLKTARGET=${SLKTARGET:-x86_64}
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/java/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}-bin.tar.bz2
SSRCARCHIVE=${SRCARCHIVE}.asc

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="https://archive.apache.org/dist/ant/binaries"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

ant_home=/usr/share/ant
javadir=/usr/share/java
mavenpomdir=/usr/share/maven-poms

# ANT_HOME and subdirs
mkdir -p ${PKG}/${ant_home}/{lib,etc,bin}

# jars
mkdir -p ${PKG}/${javadir}/ant
mkdir -p ${PKG}/${mavenpomdir}

for jar in lib/*.jar
do
  jarname=$(basename ${jar} .jar)
  pomname="JPP.ant-${jarname}.pom"

  #instal jar
  install -m 644 ${jar} ${PKG}/${javadir}/ant/${jarname}.jar || exit 1
  # jar aliases
  ln -sf ../../java/ant/${jarname}.jar ${PKG}/${ant_home}/lib/${jarname}.jar || exit 1

  #bootstrap does not have a pom
  [ ${jarname} == ant-bootstrap ] && continue

  # add backward compatibility for nodeps jar that is now part of main
  # jar
  alias=
  [ ${jarname} == ant ] && alias=org.apache.ant:ant-nodeps

  #install pom
  install -p -m 644 lib/${jarname}.pom \
    ${PKG}/${mavenpomdir}/${pomname} || exit 1

done

install -pm0644 etc/ant-bootstrap.jar ${PKG}/${javadir}/ant/ant-bootstrap.jar || exit 1

for mod in ant ant-bootstrap ant-launcher; do
  ln -sf ant/${mod}.jar ${PKG}/${javadir}/ || exit 1
done

# ant-parent pom
install -p -m 644 lib/ant-parent.pom ${PKG}/${mavenpomdir}/JPP-ant-parent.pom

# scripts: remove dos and os/2 scripts
rm -f bin/*.bat
rm -f bin/*.cmd

# XSLs
cp -p etc/*.xsl ${PKG}/${ant_home}/etc/ || exit 1

# install everything else
mkdir -p ${PKG}/usr/bin
install -pm0755 bin/* ${PKG}/usr/bin/ || exit 1

reldir=$(perl -e 'use File::Spec; print File::Spec->abs2rel($ARGV[0], $ARGV[1])' /usr/bin /${ant_home}/bin)

ln -sf ${reldir}/ant ${PKG}/${ant_home}/bin/ || exit 1
ln -sf ${reldir}/antRun ${PKG}/${ant_home}/bin/ || exit 1

# default ant.conf
mkdir -p ${PKG}/etc/ant.d
install -pm0644 ${CWD}/apache-ant-1.8.ant.conf ${PKG}/etc/ant.conf.new || exit 1

# OPT_JAR_LIST fragments
echo "ant/ant-jmf" > ${PKG}/etc/ant.d/jmf.new
echo "ant/ant-swing" > ${PKG}/etc/ant.d/swing.new
echo "antlr ant/ant-antlr" > ${PKG}/etc/ant.d/antlr.new
echo "bsf ant/ant-apache-bsf" > ${PKG}/etc/ant.d/apache-bsf.new
echo "xml-commons-resolver ant/ant-apache-resolver" > ${PKG}/etc/ant.d/apache-resolver.new
echo "apache-commons-logging ant/ant-commons-logging" > ${PKG}/etc/ant.d/commons-logging.new
echo "apache-commons-net ant/ant-commons-net" > ${PKG}/etc/ant.d/commons-net.new
#echo "jai ant/ant-jai" > ${PKG}/etc/ant.d.d/jai.new
echo "bcel ant/ant-apache-bcel" > ${PKG}/etc/ant.d/apache-bcel.new
echo "log4j ant/ant-apache-log4j" > ${PKG}/etc/ant.d/apache-log4j.new
echo "oro ant/ant-apache-oro" > ${PKG}/etc/ant.d/apache-oro.new
echo "regexp ant/ant-apache-regexp" > ${PKG}/etc/ant.d/apache-regexp.new
echo "xalan-j2 xalan-j2-serializer ant/ant-apache-xalan2" > ${PKG}/etc/ant.d/apache-xalan2.new
echo "javamail jaf ant/ant-javamail" > ${PKG}/etc/ant.d/javamail.new
echo "jdepend ant/ant-jdepend" > ${PKG}/etc/ant.d/jdepend.new
echo "jsch ant/ant-jsch" > ${PKG}/etc/ant.d/jsch.new
echo "junit ant/ant-junit" > ${PKG}/etc/ant.d/junit.new
echo "junit ant/ant-junit4" > ${PKG}/etc/ant.d/junit4.new
echo "testutil ant/ant-testutil" > ${PKG}/etc/ant.d/testutil.new

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  KEYS LICENSE NOTICE README ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r WHATSNEW ] && head -n 1000 WHATSNEW > ${DOCDIR}/WHATSNEW
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
  ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -pm0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/*.ant.conf ${SBDIR}/
  install -pm0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -pm0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
