diff -up tcpdump-4.4.0/tcpdump.1.in.eperm tcpdump-4.4.0/tcpdump.1.in
--- tcpdump-4.4.0/tcpdump.1.in.eperm	2013-05-04 17:18:44.233077426 -0300
+++ tcpdump-4.4.0/tcpdump.1.in	2013-05-04 17:18:44.241075727 -0300
@@ -221,6 +221,9 @@ have the name specified with the
 flag, with a number after it, starting at 1 and continuing upward.
 The units of \fIfile_size\fP are millions of bytes (1,000,000 bytes,
 not 1,048,576 bytes).
+
+Note that when used with \fB\-Z\fR option (enabled by default), privileges
+are dropped before opening first savefile.
 .TP
 .B \-d
 Dump the compiled packet-matching code in a human readable form to
@@ -720,7 +723,9 @@ but before opening any savefiles for out
 and the group ID to the primary group of
 .IR user .
 .IP
-This behavior can also be enabled by default at compile time.
+This behavior is enabled by default (\fB\-Z tcpdump\fR), and can
+be disabled by \fB\-Z root\fR.
+
 .IP "\fI expression\fP"
 .RS
 selects which packets will be dumped.
diff -up tcpdump-4.4.0/tcpdump.c.eperm tcpdump-4.4.0/tcpdump.c
--- tcpdump-4.4.0/tcpdump.c.eperm	2013-05-04 17:18:44.243075302 -0300
+++ tcpdump-4.4.0/tcpdump.c	2013-05-04 17:23:42.906636378 -0300
@@ -1426,9 +1426,26 @@ main(int argc, char **argv)
 	}
 #endif /* HAVE_CAP_NG_H */
 
-	if (getuid() == 0 || geteuid() == 0) {
-		if (username || chroot_dir)
-			droproot(username, chroot_dir);
+	/* If user is running tcpdump as root and wants to write to the savefile,
+	 * we will check if -C is set and if it is, we will drop root
+	 * privileges right away and consequent call to	pcap_dump_open()
+	 * will most likely fail for the first file. If -C flag is not set we
+	 * will create file as root then change ownership of file to proper
+	 * user(default tcpdump) and drop root privileges.
+	 */
+	int chown_flag = 0;
+	if (WFileName && (getuid() == 0 || geteuid() == 0)) {
+		if (Cflag != 0) {
+			if (username || chroot_dir)
+				droproot(username, chroot_dir);
+		} else {
+			chown_flag = 1;
+		}
+	} else {
+		if (getuid() == 0 || geteuid() == 0) {
+			if (username || chroot_dir)
+				droproot(username, chroot_dir);
+		}
 
 	}
 #endif /* WIN32 */
@@ -1454,6 +1471,40 @@ main(int argc, char **argv)
         /* Give up capabilities, clear Effective set */
         capng_clear(CAPNG_EFFECTIVE);
 #endif
+
+		/* Change ownership of file and drop root privileges */
+		if (chown_flag) {
+			struct passwd pwd;
+			struct passwd *p_pwd;
+			char *username_buf;
+			long initlen;
+			size_t len;
+
+			initlen = sysconf(_SC_GETPW_R_SIZE_MAX);
+			if (initlen == -1) {
+				len = 1024;
+			} else {
+				len = (size_t) initlen;
+			}
+
+			username_buf = (char *) malloc(len * sizeof(char));
+			if (username_buf == NULL) {
+				error("malloc of username_buf");
+			}
+
+			getpwnam_r(username, &pwd, username_buf, len, &p_pwd);
+			if (p_pwd == NULL) {
+				error("Couldn't find user '%s'", username);
+			}
+
+			chown(dumpinfo.CurrentFileName, pwd.pw_uid, pwd.pw_gid);
+
+			if (username || chroot_dir)
+				droproot(username, chroot_dir);
+							
+			free(username_buf);
+		}
+
 		if (p == NULL)
 			error("%s", pcap_geterr(pd));
 		if (Cflag != 0 || Gflag != 0) {
