From e42a38dd9dd4bbeb0fbd6e99f35d796ba37b6879 Mon Sep 17 00:00:00 2001
From: Adhemerval Zanella <azanella@linux.vnet.ibm.com>
Date: Fri, 22 Mar 2013 12:39:10 -0300
Subject: [PATCH 2/2] BZ#13889: expl (709.75) wrongly overflows for ldbl-128ibm

The patch increase the high value to check if expl overflows. Current
high mark value is not really correct, the algorithm accepts high values.
It also adds a correct wrapper function to check for overflow and underflow.
---
 math/libm-test.inc                   |  3 +++
 sysdeps/ieee754/ldbl-128ibm/e_expl.c |  4 ++--
 sysdeps/ieee754/ldbl-128ibm/w_expl.c | 26 ++++++++++++++++++++++----
 5 files changed, 40 insertions(+), 10 deletions(-)

diff --git a/math/libm-test.inc b/math/libm-test.inc
index 1b70c35..85ae23f 100644
--- a/math/libm-test.inc
+++ b/math/libm-test.inc
@@ -4564,6 +4564,9 @@ exp_test (void)
   TEST_f_f (exp, 0.75L, 2.11700001661267466854536981983709561L);
   TEST_f_f (exp, 50.0L, 5184705528587072464087.45332293348538L);
   TEST_f_f (exp, 88.72269439697265625L, 3.40233126623160774937554134772290447915e38L);
+#ifndef TEST_FLOAT
+  TEST_f_f (exp, 709.75L, 1.739836873264160557698252711673830393864768e+308L);
+#endif
 #if defined TEST_LDOUBLE && __LDBL_MAX_EXP__ > 1024
   /* The result can only be represented in sane long double.  */
   TEST_f_f (exp, 1000.0L, 0.197007111401704699388887935224332313e435L);
diff --git a/sysdeps/ieee754/ldbl-128ibm/e_expl.c b/sysdeps/ieee754/ldbl-128ibm/e_expl.c
index 8236390..9fd6198 100644
--- a/sysdeps/ieee754/ldbl-128ibm/e_expl.c
+++ b/sysdeps/ieee754/ldbl-128ibm/e_expl.c
@@ -70,11 +70,11 @@
 static const long double C[] = {
 /* Smallest integer x for which e^x overflows.  */
 #define himark C[0]
- 709.08956571282405153382846025171462914L,
+ 709.78271289338399678773454114191496482L,
 
 /* Largest integer x for which e^x underflows.  */
 #define lomark C[1]
--744.44007192138121808966388925909996033L,
+-744.44007192138126231410729844608163411L,
 
 /* 3x2^96 */
 #define THREEp96 C[2]
diff --git a/sysdeps/ieee754/ldbl-128ibm/w_expl.c b/sysdeps/ieee754/ldbl-128ibm/w_expl.c
index a5e72b2..70fe5f6 100644
--- a/sysdeps/ieee754/ldbl-128ibm/w_expl.c
+++ b/sysdeps/ieee754/ldbl-128ibm/w_expl.c
@@ -1,6 +1,24 @@
-/* Looks like we can use ieee854 w_expl.c as is for IBM extended format. */
+#include <math.h>
+#include <math_private.h>
 #include <math_ldbl_opt.h>
-#undef weak_alias
-#define weak_alias(n,a)
-#include <sysdeps/ieee754/ldbl-128/w_expl.c>
+
+static const long double o_thres = 709.78271289338399678773454114191496482L;
+static const long double u_thres = -744.44007192138126231410729844608163411L;
+
+long double __expl(long double x)	/* wrapper exp  */
+{
+  long double z;
+  z = __ieee754_expl(x);
+  if (_LIB_VERSION == _IEEE_)
+    return z;
+  if (__finitel(x))
+    {
+      if (x >= o_thres)
+	return __kernel_standard_l(x,x,206); /* exp overflow  */
+      else if (x <= u_thres)
+	return __kernel_standard_l(x,x,207); /* exp underflow  */
+    }
+  return z;
+}
+hidden_def (__expl)
 long_double_symbol (libm, __expl, expl);
-- 
1.8.2

