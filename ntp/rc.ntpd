#!/bin/sh
# Start/stop/restart ntpd.

exec="/usr/sbin/ntpd"
prog=$(basename ${exec})

unset NTPD_OPTIONS
[ -e /etc/default/${prog} ] && . /etc/default/${prog}
NTPD_OPTIONS=${NTPD_OPTIONS:-"-g"}

RETVAL=0

# Start ntpd:
ntpd_start() {
  [ -x "${exec}" ] || exit 5
  echo -n "Starting NTP daemon:  ${exec} ${NTPD_OPTIONS}"
  ${exec} -u ntp:ntp -p /var/run/ntpd.pid ${NTPD_OPTIONS}
  RETVAL=$?
  echo
  # The kernel is now mocking around with the the hardware clock if
  # ntpd is running, so if the hardware clock (wall clock) is set to
  # 'localtime' execute hwclock --localtime --systohc to disable the
  # 11 minute mode kernel function:
  if [ -x /sbin/hwclock ]; then
    # Check for a broken motherboard RTC clock (where ioports for rtc are
    # unknown) to prevent hwclock causing a hang:
    if ! grep -q -w rtc /proc/ioports ; then
      CLOCK_OPT="--directisa"
    fi
    if ! grep -q "^UTC" /etc/hardwareclock 2> /dev/null ; then 
      echo "Saving system time to the hardware clock (localtime)."
      /sbin/hwclock  ${CLOCK_OPT} --localtime --systohc
    fi
  fi
  return ${RETVAL}
}

# Stop ntpd:
ntpd_stop() {
  echo -n "Stopping NTP daemon..."
  kill $(cat /var/run/ntpd.pid)
  echo
  sleep 1
  rm -f /var/run/ntpd.pid
  killall ntpd 2> /dev/null
  RETVAL=$?
  return ${RETVAL}
}

# Restart ntpd:
ntpd_restart() {
  ntpd_stop
  sleep 1
  ntpd_start
}

# Check if ntpd is running
ntpd_status() {
  if [ -e /var/run/ntpd.pid ]; then
    echo "ntpd is running."
  else 
    echo "ntpd is stopped."
  fi
}

case "$1" in
'start')
  ntpd_start
  ;;
'stop')
  ntpd_stop
  ;;
'restart')
  ntpd_restart
  ;;
'status')
  ntpd_status
  ;;
*)
  echo "Usage $0 start|stop|restart|status"
esac

exit ${RETVAL}
