#!/bin/sh
#-- systemd for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ systemd.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008, 2009, 2010, 2011, 2012 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.freedesktop.org/wiki/Software/systemd

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}
# Set YES to remove libtool .la files
SB_RMLA=${SB_RMLA:-NO}
# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=systemd
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-194}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
SLKDIST=${SLKDIST:-Slackware}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set YES to systemd as default init
SB_DEF=${SB_DEF:-NO}
# Set YES to enable QR support (qrencode)
SB_QR=${SB_QR:-NO}

grep --quiet '^lock:' /etc/group && SB_HGROUP=1

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.xz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www.freedesktop.org/software/${NAME}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

sed -i \
  -e 's|/etc/rc.local|/etc/rc.d/rc.local|g' \
  -e '/^ConditionFileIsExecutable=/aConditionFileIsExecutable=/etc/rc.d/rc.local_shutdown' \
  -e '/^ExecStart/s| start||g' \
  -e 's|^Type=.*$|ExecStop=/etc/rc.d/rc.local_shutdown|g' \
  units/fedora/rc-local.service || exit 1

sed -i -e '/^exec_prefix=/s|=.*$|=/|g' \
  src/libudev/libudev.pc.in || exit 1

sed -i -e 's|@bindir@|/sbin|g' \
  units/systemd-udev-settle.service.in \
  units/systemd-udev-trigger.service.in || exit 1

mkdir -p ${PKG}/lib/udev/rules.d
mkdir -p ${PKG}/run

find . -name "*.[1-8]" -exec touch '{}' ';'

unset SB_QROPTS
[ "${SB_QR}" = "YES" ] || SB_QROPTS='--disable-qrencode'

CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --libexecdir=/lib \
  --with-rootprefix= \
  --with-rootlibdir=/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --disable-silent-rules \
  --enable-static \
  --with-distro=slackware \
  --enable-split-usr \
  --disable-pam \
  --disable-audit \
  --disable-tcpwrap \
  --disable-selinux \
  --with-pci-ids-path=/usr/share/hwdata/pci.ids \
  --with-usb-ids-path=/usr/share/hwdata/usb.ids \
  ${SB_QROPTS} \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit $?

make -j${NJOBS} || make || exit $?
make install DESTDIR=${PKG} \
  pkgconfigdatadir=/usr/lib${LIBDIRSUFFIX}/pkgconfig \
  sharepkgconfigdir=/usr/lib${LIBDIRSUFFIX}/pkgconfig \
  || exit $?

[ "${SB_RMLA}" = "YES" ] && find ${PKG} -name '*.la' -exec rm {} ';'

rmdir -p ${PKG}/lib${LIBDIRSUFFIX}/security
rmdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/security

# Good to have on path
mkdir -p ${PKG}/sbin
( cd ${PKG}/sbin
  ln -s ../lib/udev/scsi_id scsi_id || exit 1
  ln -s ../lib/systemd/systemd-udevd udevd || exit 1
) || exit 1

mv ${PKG}/usr/bin/udevadm ${PKG}/sbin/ || exit 1
ln -s ../../sbin/udevadm ${PKG}/usr/bin/udevadm

ln -s ../systemd/systemd-udevd ${PKG}/lib/udev/udevd || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

################################### systemd ####################################
# Slackware inittab compliance
ln -sf graphical.target ${PKG}/lib/systemd/system/runlevel4.target || exit 1

install -pm0644 ${CWD}/var-{lock,run}.mount ${PKG}/lib/systemd/system/ || exit 1
ln -sf ../var-lock.mount \
  ${PKG}/lib/systemd/system/local-fs.target.wants/var-lock.mount || exit 1
ln -sf ../var-run.mount \
  ${PKG}/lib/systemd/system/local-fs.target.wants/var-run.mount || exit 1

# rc.local and rc.local_shutdown
install -pm0644 units/fedora/rc-local.service \
  ${PKG}/lib/systemd/system/ || exit 1

ln -s ../rc-local.service \
  ${PKG}/lib/systemd/system/multi-user.target.wants/rc-local.service || exit 1

# Put this here for the time
mkdir -p ${PKG}/etc/rc.d
cat > ${PKG}/etc/rc.d/rc.local_shutdown.new <<'EOF'
#!/bin/sh

exit 0
EOF
chmod 0755 ${PKG}/etc/rc.d/rc.local_shutdown.new || exit 1

mv ${PKG}/lib/systemd/systemd ${PKG}/lib/systemd/systemd.new || exit 1
chmod 0755 ${PKG}/lib/systemd/systemd.new
ln -sf ../lib/systemd/systemd ${PKG}/bin/systemd || exit 1

if [ "${SB_DEF}" = "YES" ] ;then
  mkdir -p ${PKG}/sbin
  ln -s ../lib/systemd/systemd ${PKG}/sbin/init
  ln -s ../bin/systemctl ${PKG}/sbin/reboot
  ln -s ../bin/systemctl ${PKG}/sbin/halt
  ln -s ../bin/systemctl ${PKG}/sbin/poweroff
  ln -s ../bin/systemctl ${PKG}/sbin/shutdown
  ln -s ../bin/systemctl ${PKG}/sbin/telinit
  ln -s ../bin/systemctl ${PKG}/sbin/runlevel
else
  for manpage in telinit halt reboot poweroff runlevel shutdown; do
    mv ${PKG}/usr/man/man8/{,systemd.}"${manpage}.8" || exit 1
  done
fi
rm -f ${PKG}/usr/man/man8/pam*

if [ -f "${CWD}/${SLKDIST}" ] ; then
  cat ${CWD}/${SLKDIST} > ${PKG}/etc/os-release.new || exit 1
fi

# We create all wants links manually at installation time to make sure
# they are not owned and hence overriden by rpm after the used deleted
# them.
#rm -rf ${PKG}/etc/systemd/system/*.target.wants

#touch ${PKG}/etc/hostname.new
touch ${PKG}/etc/vconsole.conf.new
touch ${PKG}/etc/locale.conf.new
touch ${PKG}/etc/machine-id.new
touch ${PKG}/etc/machine-info.new
touch ${PKG}/etc/systemd/system/default.target

# Make sure these directories are properly owned
mkdir -p ${PKG}/lib/systemd/system/basic.target.wants
mkdir -p ${PKG}/lib/systemd/system/default.target.wants
mkdir -p ${PKG}/lib/systemd/system/dbus.target.wants
mkdir -p ${PKG}/lib/systemd/system/syslog.target.wants

# Mask legacy stuff
ln -s rescue.service ${PKG}/lib/systemd/system/single.service

echo 'd /run/console 755 root root' > ${PKG}/etc/tmpfiles.d/console.conf || exit 1

mv ${PKG}/etc/systemd/system.conf ${PKG}/etc/systemd/system.conf.new || exit 1
mv ${PKG}/etc/systemd/user.conf ${PKG}/etc/systemd/user.conf.new || exit 1
mv ${PKG}/etc/systemd/logind.conf ${PKG}/etc/systemd/logind.conf.new || exit 1
mv ${PKG}/etc/systemd/journald.conf ${PKG}/etc/systemd/journald.conf.new || exit 1

mkdir -p ${PKG}/etc/rpm
cat > ${PKG}/etc/rpm/macros.${NAME} <<'EOF'
%_unitdir /lib/systemd/system
EOF

mkdir -p ${PKG}/etc/rsyslog.d/
echo '$SystemLogSocketName /run/systemd/journal/syslog' \
 > ${PKG}/etc/rsyslog.d/listen.conf.new || exit 1

################################ End of systemd ################################

##################################### udev #####################################

mkdir -p ${PKG}/etc/udev/{keymaps,rules.d} \
  ${PKG}/lib/firmware \
  ${PKG}/etc/modprobe.d \
  ${PKG}/etc/rc.d

rm -f ${PKG}/etc/udev/udev.conf
install -m0644 ${CWD}/config/udev.conf ${PKG}/etc/udev/udev.conf || exit 1
# Copy Slackware custom rules
install -m0644 ${CWD}/config/rules.d/* ${PKG}/lib/udev/rules.d/ || exit 1

install -m0644 ${CWD}/config/keymaps/* ${PKG}/lib/udev/keymaps || exit 1

install -m0755 ${CWD}/config/rc.d/rc.udev.new \
  ${PKG}/etc/rc.d/rc.udev.new || exit 1
for file in blacklist isapnp psmouse usb-controller ;do
  install -m0644 ${CWD}/config/modprobe.d/${file}.conf.new \
    ${PKG}/etc/modprobe.d/ || exit 1
done

# Add various helper scripts:
for file in ${CWD}/config/scripts/* ; do
  install -m0755 ${file} ${PKG}/lib/udev/ || exit 1
done
chmod 755 ${PKG}/lib/udev/*

################################# End of udev ##################################

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING LICENSE README NEWS THANKS TODO ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.udev.new:
if [ -r etc/rc.d/rc.udev -a -r etc/rc.d/rc.udev.new ]; then
  chmod --reference=etc/rc.d/rc.udev etc/rc.d/rc.udev.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
function free_group_id {
  # Find a free group-ID >= 120 (should be < 1000 so it's not a normal group)
  local FREE_GROUP_ID=120
  while grep --quiet "^.*:.*:${FREE_GROUP_ID}:" etc/group; do
    let FREE_GROUP_ID++
  done
  echo ${FREE_GROUP_ID}
}

# Set up group.
if ! grep --quiet '^lock:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
    -g $(free_group_id) \
    lock 2> /dev/null
fi

# Try to read default runlevel from the old inittab if it exists
runlevel=$(/bin/awk -F':' '$3 == "initdefault" && $1 !~ "^#" { print $2 }' /etc/inittab 2> /dev/null)
if [ -z "${runlevel}" ]; then
  target="/lib/systemd/system/graphical.target"
else
  target="/lib/systemd/system/runlevel${runlevel}.target"
fi

# And symlink what we found to the new-style default.target
${CHROOT} /bin/ln -sf "${target}" /etc/systemd/system/default.target

if [ -r lib/systemd/systemd ]; then
  mv lib/systemd/systemd lib/systemd/systemd.old
fi

mv lib/systemd/systemd.new lib/systemd/systemd

if [ -f lib/systemd/systemd.old ]; then
  rm -f lib/systemd/systemd.old
fi

${CHROOT} /bin/systemctl enable \
  getty@.service \
  remote-fs.target \
  systemd-readahead-replay.service \
  systemd-readahead-collect.service 2>&1 || :

${CHROOT} /bin/systemd-machine-id-setup > /dev/null 2>&1
${CHROOT} /bin/systemctl daemon-reexec > /dev/null 2>&1
sleep 1

${CHROOT} /bin/systemctl stop systemd-udev.service systemd-udev-control.socket systemd-udev-kernel.socket >/dev/null 2>&1
${CHROOT} /bin/systemctl --system daemon-reload  >/dev/null 2>&1
${CHROOT} /bin/systemctl start systemd-udev.service >/dev/null 2>&1
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/${SLKDIST} ${CWD}/var-*.mount \
    ${CWD}/udev-fixed-devices.tar.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/config/*.conf ${SBDIR}/config/
  for dir in keymaps modprobe.d rc.d rules.d scripts ;do
    mkdir -p ${SBDIR}/config/${dir}
    install -m0644 ${CWD}/config/${dir}/* ${SBDIR}/config/${dir}/
  done
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  tar xvf ${CWD}/udev-fixed-devices.tar.gz -C ./ ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
