#!/bin/sh
# GCC package build script (written by volkerdi@slackware.com)
#
# Suggested usage: $ gcc.SlackBuild 2>&1 | tee build.log

# Copyright 2003, 2004  Slackware Linux, Inc., Concord, California, USA
# Copyright 2005, 2006, 2007  Patrick J. Volkerding, Sebeka, Minnesota, USA
# Copyright 2008-2012 Phantom X, Goiania, Brazil.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# Some notes, Fri May 16 12:31:32 PDT 2003:
#
# Why i486 and not i386?  Because the shared C++ libraries in gcc-3.2.x will
# require 486 opcodes even when a 386 target is used (so we already weren't
# compatible with the i386 for Slackware 9.0, didn't notice, and nobody
# complained :-).  gcc-3.3 fixes this issue and allows you to build a 386
# compiler, but the fix is done in a way that produces binaries that are not
# compatible with gcc-3.2.x compiled binaries.  To retain compatibility with
# Slackware 9.0, we'll have to use i486 (or better) as the compiler target
# for gcc-3.3.
#
# It's time to say goodbye to i386 support in Slackware.  I've surveyed 386
# usage online, and the most common thing I see people say when someone asks
# about running Linux on a 386 is to "run Slackware", but then they also 
# usually go on to say "be sure to get an OLD version, like 4.0, before glibc,
# because it'll be more efficient."  Now, if that's the general advice, then
# I see no reason to continue 386 support in the latest Slackware (and indeed
# it's no longer easily possible).

# http://gcc.gnu.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES to remove libtool .la files
SB_RMLA=${SB_RMLA:-NO}
# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

# Temporary build location.  This should *NOT* be a directory
# path a non-root user could create later...
TMP=${TMP:-/tmp/gcc-$(mcookie)}
CWD=$(pwd)
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=gcc
NAME32=gcc-compat32
VERSION=${VERSION:-4.7.0}
#antlr
AVER=${AVER:-3.4}
# Set to 0 to enable release instead snapshot
CHECKOUT=${CHECKOUT:-20120519}
RVER=$(echo ${VERSION} | cut -d- -f1)
SVER=$(echo ${RVER} | cut -d. -f1-2)
ARCH=${ARCH:-i486}
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
  export SB_MULTILIB=NO
fi
SLKDTARGET=${SLKDTARGET:-slackware}
SLKDIST=${SLKDIST:-Slackware}
TARGET=${TARGET:-${SLKTARGET}-${SLKDTARGET}-linux}
BUILD=${BUILD:-7}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}

# Set to YES to enable multilib build
SB_MULTILIB=${SB_MULTILIB:-YES}
# Set to YES to enable test
SB_TEST=${SB_TEST:-NO}
# Set to YES to use standalone libffi
SB_SFFI=${SB_SFFI:-YES}
# Set to YES to use awt gtk
SB_GTK=${SB_GTK:-YES}

if [ -x /usr/bin/python ] ;then
  PYABI=$(python -c 'import sys; sys.stdout.write(sys.version[:3])')
else
  PYABI=2.7
fi

DATE=$(LC_ALL=C date +%d-%b-%Y)

if [ "${CHECKOUT}" != "0" ] ;then
  SRCDIR=${NAME}-${SVER}-${CHECKOUT}
else
  SRCDIR=${NAME}-${VERSION}
fi
SRCARCHIVE=${SRCDIR}.tar.bz2
SSRCARCHIVE=${SRCARCHIVE}.sig
SRCARCHIVE2=ecj-latest.jar
ASRCARCHIVE=antlr-runtime-${AVER}.jar

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
GNU_MIRROR=${GNU_MIRROR:-http://ftp.gnu.org/gnu}
DL_URL="${GNU_MIRROR}/${NAME}/${NAME}-${VERSION}/${SRCARCHIVE}"
SDL_URL="${GNU_MIRROR}/${NAME}/${NAME}-${VERSION}/${SSRCARCHIVE}"
GCC_MIRROR=${GCC_MIRROR:-ftp://gcc.gnu.org/pub/gcc}
DL_URLB="${GCC_MIRROR}/snapshots/${SVER}-${CHECKOUT}/${SRCARCHIVE}"
DL_URL2="ftp://sourceware.org/pub/java/${SRCARCHIVE2}"
ADL_URL="https://oss.sonatype.org/content/repositories/releases/org/antlr/antlr-runtime/${AVER}/${ASRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || ${DL_PROG} ${DL_OPTS} ${DL_URLB} || exit 1
if [ "${CHECKOUT}" = "0" ] ;then
  test -r ${CWD}/${SSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${SDL_URL} || exit 1
fi
test -r ${CWD}/${SRCARCHIVE2} || ${DL_PROG} ${DL_OPTS} ${DL_URL2} || exit 1
test -r ${CWD}/${ASRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${ADL_URL} || exit 1

case "${ARCH}" in
  i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686 -pipe"
               ;;
  x86_64)      SLKCFLAGS="-O2 -fPIC"
               ;;
  s390|*)      SLKCFLAGS="-O2"
               ;;
esac
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  LIB_ARCH=amd64
else
  LIBDIRSUFFIX=""
  LIB_ARCH=i386
fi
unset CFLAGS CXXFLAGS LDFLAGS CPPFLAGS

# This is the main DESTDIR target:
PKG=${PKG:-${TMP}/package-${NAME}}
PKG1=${PKG}/${NAME}
PKGNAME1=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
# These are the directories to build other packages in:
PKG2=${PKG}/${NAME}-g++
PKGNAME2=${NAME}-g++-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG3=${PKG}/${NAME}-gfortran
PKGNAME3=${NAME}-gfortran-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG4=${PKG}/${NAME}-gnat
PKGNAME4=${NAME}-gnat-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG5=${PKG}/${NAME}-java
PKGNAME5=${NAME}-java-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG6=${PKG}/${NAME}-objc
PKGNAME6=${NAME}-objc-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG7=${PKG}/${NAME}-go
PKGNAME7=${NAME}-go-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

PKG1_32=${PKG}/${NAME}-compat32
PKGNAME1_32=${NAME32}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
# These are the directories to build other packages in:
PKG2_32=${PKG}/${NAME}-g++-compat32
PKGNAME2_32=${NAME}-g++-compat32-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG3_32=${PKG}/${NAME}-gfortran-compat32
PKGNAME3_32=${NAME}-gfortran-compat32-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG4_32=${PKG}/${NAME}-gnat-compat32
PKGNAME4_32=${NAME}-gnat-compat32-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG5_32=${PKG}/${NAME}-java-compat32
PKGNAME5_32=${NAME}-java-compat32-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG6_32=${PKG}/${NAME}-objc-compat32
PKGNAME6_32=${NAME}-objc-compat32-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG7_32=${PKG}/${NAME}-go-compat32
PKGNAME7_32=${NAME}-go-compat32-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DOCDIR=${PKG1}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG1}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}

# Clear the build locations:
if [ -d ${PKG} ]; then
  rm -rf ${PKG}
  rm -rf ${TMP}/gcc.build.lnx
  rm -f ${TMP}/gcc.build.log
fi
mkdir -p $PKG{1,2,3,4,5,6,7}/usr/doc/gcc-${VERSION}

export SB_DESCDIR=${CWD}/descs

mkdir -p $PKG{1,2,3,4,5,6,7}/install
# Install the descriptions:
( cd ${SB_DESCDIR} || exit 1
  cat slack-desc.gcc > ${PKG1}/install/slack-desc
  cat slack-desc.gcc-g++ > ${PKG2}/install/slack-desc
  cat slack-desc.gcc-gfortran > ${PKG3}/install/slack-desc
  cat slack-desc.gcc-gnat > ${PKG4}/install/slack-desc
  cat slack-desc.gcc-java > ${PKG5}/install/slack-desc
  cat slack-desc.gcc-objc > ${PKG6}/install/slack-desc
  cat slack-desc.gcc-go > ${PKG7}/install/slack-desc
  sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
        $PKG{1,2,3,4,5,6,7}/install/slack-desc

  if [ "${SB_MULTILIB}" = "YES" ]; then
    mkdir -p $PKG{1_32,2_32,3_32,4_32,5_32,6_32,7_32}/install
    cat slack-desc.gcc-compat32 > ${PKG1_32}/install/slack-desc
    cat slack-desc.gcc-g++-compat32 > ${PKG2_32}/install/slack-desc
    cat slack-desc.gcc-gfortran-compat32 > ${PKG3_32}/install/slack-desc
    cat slack-desc.gcc-gnat-compat32 > ${PKG4_32}/install/slack-desc
    cat slack-desc.gcc-java-compat32 > ${PKG5_32}/install/slack-desc
    cat slack-desc.gcc-objc-compat32 > ${PKG6_32}/install/slack-desc
    cat slack-desc.gcc-go-compat32 > ${PKG7_32}/install/slack-desc
    sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
      $PKG{1_32,2_32,3_32,4_32,5_32,6_32,7_32}/install/slack-desc
  fi
)

cd ${TMP} || exit 1
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1

# install docs
( cd ${SRCDIR} || exit 1

  # Fix perms/owners
  chmod -R u+w,go+r-w,a-s .

  if [ -r ${CWD}/apply-patches.sh ]; then
    . ${CWD}/apply-patches.sh || exit 1
  fi
  sed -i 's@\./fixinc\.sh@-c true@' gcc/Makefile.in

  # This testcase doesn't compile.
  rm -rf libjava/testsuite/libjava.lang/PR35020*

  install -m0644 ${CWD}/${SRCARCHIVE2} ./ecj.jar || exit 1
  install -m0644 ${CWD}/${ASRCARCHIVE} ./${ASRCARCHIVE} || exit 1

  echo "${RVER}" > gcc/BASE-VER
  echo "${SLKDIST} ${RVER}-${BUILD}" > gcc/DEV-PHASE

  mkdir -p ${DOCDIR}
  # Only the most recent ChangeLog... shouldn't be too big. :)
  cp -a \
    COPYING COPYING.LIB \
    LAST_UPDATED MAINTAINERS NEWS README* ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
  [ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
  [ -r ChangeLog.tree-ssa ] && head -n 1000 ChangeLog.tree-ssa > ${DOCDIR}/ChangeLog.tree-ssa

  mkdir -p ${PKG1}/usr/doc/gcc-${VERSION}/gcc
  ( cd gcc
    cp -a \
      ABOUT* COPYING* LANG* ONEWS README* \
    ${PKG1}/usr/doc/gcc-${VERSION}/gcc
         
    mkdir -p ${PKG3}/usr/doc/gcc-${VERSION}/gcc/fortran
    ( cd fortran
      [ -r ChangeLog ] && head -n 1000 ChangeLog \
        > ${PKG3}/usr/doc/gcc-${VERSION}/gcc/fortran/ChangeLog
    )

    mkdir -p ${PKG4}/usr/doc/gcc-${VERSION}/gcc/ada
    ( cd ada
      [ -r ChangeLog ] && head -n 1000 ChangeLog \
        > ${PKG4}/usr/doc/gcc-${VERSION}/gcc/ada/ChangeLog
      [ -r ChangeLog.tree-ssa ] && head -n 1000 ChangeLog.tree-ssa \
        > ${PKG4}/usr/doc/gcc-${VERSION}/gcc/ada/ChangeLog.tree-ssa
    )

    mkdir -p ${PKG5}/usr/doc/gcc-${VERSION}/gcc/java
    ( cd java
      [ -r ChangeLog ] && head -n 1000 ChangeLog \
        > ${PKG5}/usr/doc/gcc-${VERSION}/gcc/java/ChangeLog
      [ -r ChangeLog.tree-ssa ] && head -n 1000 ChangeLog.tree-ssa \
        > ${PKG5}/usr/doc/gcc-${VERSION}/gcc/java/ChangeLog.tree-ssa
    )
  
    mkdir -p ${PKG6}/usr/doc/gcc-${VERSION}/gcc/objc
    ( cd objc
      cp -a \
        README \
      ${PKG6}/usr/doc/gcc-${VERSION}/gcc/objc
      [ -r ChangeLog ] && head -n 1000 ChangeLog \
        > ${PKG6}/usr/doc/gcc-${VERSION}/gcc/objc/ChangeLog
    )

    mkdir -p ${PKG7}/usr/doc/gcc-${VERSION}/gcc/go
    ( cd go
      cp -a \
        README \
      ${PKG7}/usr/doc/gcc-${VERSION}/gcc/go
      [ -r ChangeLog ] && head -n 1000 ChangeLog \
        > ${PKG7}/usr/doc/gcc-${VERSION}/gcc/go/ChangeLog
    )

  )

  mkdir -p ${PKG3}/usr/doc/gcc-${VERSION}/libgfortran
  ( cd libgfortran
    [ -r ChangeLog ] && head -n 1000 ChangeLog \
      > ${PKG3}/usr/doc/gcc-${VERSION}/libgfortran/ChangeLog
  )

  mkdir -p ${PKG3}/usr/doc/gcc-${VERSION}/libada
  ( cd libada
    [ -r ChangeLog ] && head -n 1000 ChangeLog \
      > ${PKG3}/usr/doc/gcc-${VERSION}/libada/ChangeLog
  )

  mkdir -p ${PKG5}/usr/doc/gcc-${VERSION}/libffi
  ( cd libffi
    cp -a \
      LICENSE README \
    ${PKG5}/usr/doc/gcc-${VERSION}/libffi
    [ -r ChangeLog ] && head -n 1000 ChangeLog \
      > ${PKG5}/usr/doc/gcc-${VERSION}/libffi/ChangeLog
    [ -r ChangeLog.libgcj ] && head -n 1000 ChangeLog.libgcj \
      > ${PKG5}/usr/doc/gcc-${VERSION}/libffi/ChangeLog.libgcj
  )

  mkdir -p ${PKG5}/usr/doc/gcc-${VERSION}/libjava
  ( cd libjava
    cp -a \
      COPYING HACKING LIBGCJ_LICENSE NEWS README THANKS \
    ${PKG5}/usr/doc/gcc-${VERSION}/libjava
    [ -r ChangeLog ] && head -n 1000 ChangeLog \
      > ${PKG5}/usr/doc/gcc-${VERSION}/libjava/ChangeLog
  )

  mkdir -p ${PKG1}/usr/doc/gcc-${VERSION}/libmudflap
  ( cd libmudflap
    [ -r ChangeLog ] && head -n 1000 ChangeLog \
      > ${PKG1}/usr/doc/gcc-${VERSION}/libmudflap/ChangeLog
  )

  mkdir -p ${PKG1}/usr/doc/gcc-${VERSION}/libgomp
  ( cd libgomp
    [ -r ChangeLog ] && head -n 1000 ChangeLog \
      > ${PKG1}/usr/doc/gcc-${VERSION}/libgomp/ChangeLog
  )

  mkdir -p ${PKG6}/usr/doc/gcc-${VERSION}/libobjc
  ( cd libobjc
    cp -a \
      README README.threads THREADS THREADS.MACH \
    ${PKG6}/usr/doc/gcc-${VERSION}/libobjc
    [ -r ChangeLog ] && head -n 1000 ChangeLog \
      > ${PKG6}/usr/doc/gcc-${VERSION}/libobjc/ChangeLog
  )

  mkdir -p ${PKG7}/usr/doc/gcc-${VERSION}/libgo
  ( cd libgo
    cp -a \
      README \
    ${PKG7}/usr/doc/gcc-${VERSION}/libgo
    [ -r ChangeLog ] && head -n 1000 ChangeLog \
      > ${PKG7}/usr/doc/gcc-${VERSION}/libgo/ChangeLog
  )

  mkdir -p ${PKG2}/usr/doc/gcc-${VERSION}/libstdc++-v3
  ( cd libstdc++-v3
    cp -a \
      README \
    ${PKG2}/usr/doc/gcc-${VERSION}/libstdc++-v3

    [ -r ChangeLog ] && head -n 1000 ChangeLog \
      > ${PKG2}/usr/doc/gcc-${VERSION}/libstdc++-v3/ChangeLog

    cp -a \
      doc/html/ \
    ${PKG2}/usr/doc/gcc-${VERSION}/libstdc++-v3/
  )
) || exit 1

# build gcc
( mkdir gcc.build.lnx;
  cd gcc.build.lnx;

  # If enough people need "treelang" support for it may be considered.
  #  --enable-languages=ada,c,c++,fortran,java,objc,treelang
  # I think it's incorrect to include this option (as it'll end up set
  # to i486 on x86 platforms), and we want to tune the binary structure
  # for i686, as that's where almost all of the optimization speedups
  # are to be found.
  # Correct me if my take on this is wrong.
  #  --with-cpu=${ARCH} 

  if [ "${ARCH}" = "x86_64" ]; then
    if [ "${SB_MULTILIB}" = "YES" ] ;then
      GCC_ARCHOPTS="--enable-multilib"
    else
      GCC_ARCHOPTS="--disable-multilib"
    fi
  else
    GCC_ARCHOPTS="--with-arch=${ARCH}"
  fi

  unset SB_GTKOPTS
  [ "${SB_GTK}" = "YES" ] && SB_GTKOPTS='--enable-java-awt=gtk'

  CFLAGS="${SLKCFLAGS}" \
  CXXFLAGS="${SLKCFLAGS}" \
  ../${SRCDIR}/configure --prefix=/usr \
     --libdir=/usr/lib${LIBDIRSUFFIX} \
     --infodir=/usr/info \
     --mandir=/usr/man \
     --enable-shared \
     --enable-bootstrap \
     --enable-languages=ada,c,c++,fortran,java,objc,lto,go \
     --enable-threads=posix \
     --enable-checking=release \
     --with-system-zlib \
     --enable-lto \
     --enable-plugin \
     --with-ppl \
     --with-cloog \
     --with-python-dir=/lib${LIBDIRSUFFIX}/python${PYABI}/site-packages \
     --enable-__cxa_atexit \
     --disable-libunwind-exceptions \
     --enable-libssp \
     --enable-objc-gc \
     --with-gnu-ld \
     --with-linker-hash-style=gnu \
     --verbose \
     --enable-java-home \
     --with-java-home=/usr/lib${LIBDIRSUFFIX}/jvm/jre \
     --with-jvm-root-dir=/usr/lib${LIBDIRSUFFIX}/jvm \
     --with-jvm-jar-dir=/usr/lib${LIBDIRSUFFIX}/jvm/jvm-exports \
     --with-arch-directory=${LIB_ARCH} \
     --with-antlr-jar=${TMP}/${SRCDIR}/${ASRCARCHIVE} \
     ${SB_GTKOPTS} \
     ${GCC_ARCHOPTS} \
     --build=${TARGET} \
     --target=${TARGET} \
     --host=${TARGET} || exit 1

  # Start the build:

  # Include all debugging info (for now):
  make -j${NJOBS} bootstrap || exit 1

  ( cd gcc
    make -j${NJOBS} gnatlib GNATLIBCFLAGS="${SLKCFLAGS}"
    # This wants a shared -ladd2line?
    #make gnatlib-shared
    
    CFLAGS="${SLKCFLAGS}" \
    CXXFLAGS="${SLKCFLAGS}" \
    make -j${NJOBS} gnattools
  )
  make -j${NJOBS} info

  # Set SB_TEST=YES to run the tests
  if [ "${SB_TEST}" = "YES" ] ;then 
    echo '====================TESTING========================='
    make -j${NJOBS} check
    echo '====================TESTING END====================='
  fi

  make install DESTDIR=${PKG1} || exit 1

) 2>&1 | tee ${TMP}/gcc.build.log || exit 1

( cd gcc.build.lnx || exit 1

# Be sure the "specs" file is installed.  There was an issue with that on 4.1.1:
if [ ! -r ${PKG1}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/specs ]; then
  cat stage1-gcc/specs > ${PKG1}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/specs
fi

# Make our 64bit gcc look for 32bit gcc binaries in ./32 subdirectory:
if [ "${ARCH}" = "x86_64" ] && [ "${SB_MULTILIB}" != "YES" ] ; then
  sed -i 's#;.\(:../lib !m64 m32;\)$#;32\1#' \
    ${PKG1}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/specs
fi

#  make ada.install-common DESTDIR=${PKG1}
#  make install-gnatlib DESTDIR=${PKG1}
  make -i install-info DESTDIR=${PKG1}

  chmod 755 ${PKG1}/usr/lib${LIBDIRSUFFIX}/libgcc_s.so.1

  #zcat ${CWD}/libgcc_post_upgrade.c.gz > libgcc_post_upgrade.c
  #mkdir -p ${PKG1}/usr/sbin
  #( set -o xtrace
    #gcc -static -Os ${LDFLAGS} libgcc_post_upgrade.c -o ${PKG1}/usr/sbin/libgcc_post_upgrade || exit 1
  #) || exit 1

  # This is provided by binutils, so delete it here:
  rm -f ${PKG1}/usr/lib${LIBDIRSUFFIX}/libiberty.a
  rm -f ${PKG1}/usr/lib/libiberty.a

  chmod 755 ${PKG1}/usr/lib*/libgcc_s.so*

  # Fix .la files
  if [ "${ARCH}" = "x86_64" ]; then
    sed -i \
      -e "s|lib${LIBDIRSUFFIX}/\.\./lib${LIBDIRSUFFIX}|lib${LIBDIRSUFFIX}|g" \
      ${PKG1}/usr/lib*/*.la
    sed -i -e "s|lib${LIBDIRSUFFIX}/\.\./lib|lib|g" ${PKG1}/usr/lib/*.la
  fi

  [ "${SB_RMLA}" = "YES" ] && find ${PKG1} -name '*.la' | xargs rm -f

  # Strip out unneeded stuff from the libraries and binaries:
  ( cd ${PKG1}
    find . | xargs file | grep -e "executable" -e "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
    find . -name "lib*\.a" -exec strip -g "{}" \;
  )

  # Fix stuff up:
  ( cd ${PKG1}/usr/info ; rm dir ; gzip -9 * )
  ( cd ${PKG1}
    mkdir -p lib
    cd lib
    ln -sf /usr/bin/cpp .
  )
  ( cd ${PKG1}/usr/bin
    mv g++ g++-gcc-${VERSION}
    mv gcc gcc-${VERSION}
    mv ${TARGET}-gfortran gfortran-gcc-${VERSION}
    ln -sf g++-gcc-${VERSION} g++
    ln -sf g++-gcc-${VERSION} g++-${VERSION}
    ln -sf gcc-${VERSION} gcc
    ln -sf g++ c++
    ln -sf gcc cc
    ln -sf gcc-${VERSION} ${TARGET}-gcc
    ln -sf gcc-${VERSION} ${TARGET}-gcc-${VERSION}
    ln -sf gcc-ar ${TARGET}-gcc-ar
    ln -sf gcc-nm ${TARGET}-gcc-nm
    ln -sf gcc-ranlib ${TARGET}-gcc-ranlib
    ln -sf gcj ${TARGET}-gcj
    ln -sf gcjh ${TARGET}-gcjh
    ln -sf g++-gcc-${VERSION} ${TARGET}-c++
    ln -sf g++-gcc-${VERSION} ${TARGET}-g++
    ln -sf gfortran-gcc-${VERSION} gfortran
    ln -sf gfortran-gcc-${VERSION} ${TARGET}-gfortran
    ln -sf gfortran-gcc-${VERSION} ${TARGET}-gfortran-${VERSION}
    ln -sf gfortran-gcc-${VERSION} ${TARGET}-g95
    ln -sf gfortran g95
    ln -sf gfortran f95
    ln -sf gfortran-gcc-${VERSION} ${TARGET}-g77
    ln -sf gfortran g77
    ln -sf gfortran f77
  )

  ( cd ${PKG1}/usr/man
    gzip -9 */*
    cd man1
    ln -sf g++.1.gz c++.1.gz
    ln -sf gcc.1.gz cc.1.gz
  )  

  ## build the tgz package
  #(
  #  cd ${PKG1};
  #  makepkg -l y -c n ${TMP}/gcc-${VERSION}-${ARCH}-${BUILD}.tgz
  #)
# keep a log
) 2>&1 | tee -a ${TMP}/gcc.build.log

# OK, time to split the big package where needed:

# gcc-g++:
( cd ${PKG2}
  mkdir -p usr/bin
  mv ${PKG1}/usr/bin/*++* usr/bin
  mkdir -p usr/include
  mv ${PKG1}/usr/include/c++ usr/include
  mkdir -p usr/lib${LIBDIRSUFFIX}
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/*++* usr/lib${LIBDIRSUFFIX}/
  mkdir -p usr/libexec/gcc/${TARGET}/${VERSION}
  mv ${PKG1}/usr/libexec/gcc/${TARGET}/${VERSION}/cc1plus usr/libexec/gcc/${TARGET}/${VERSION}/cc1plus
  mkdir -p usr/man/man1
  mv ${PKG1}/usr/man/man1/*++* usr/man/man1

  mkdir -p usr/share/gdb/auto-load/usr/lib${LIBDIRSUFFIX}
  mv -f usr/lib${LIBDIRSUFFIX}/libstdc++*gdb.py* \
    usr/share/gdb/auto-load/usr/lib${LIBDIRSUFFIX}/

    #compat32
  if [ "${SB_MULTILIB}" = "YES" ]; then
    mkdir -p usr/lib
    mv ${PKG1}/usr/lib/*++* usr/lib
  fi

)

# gcc-gfortran:
( cd ${PKG3}
  mkdir -p usr/bin
  mv ${PKG1}/usr/bin/*gfortran* usr/bin
  mv ${PKG1}/usr/bin/*95* usr/bin
  mv ${PKG1}/usr/bin/*77* usr/bin
  # Doesn't this seem like a logical idea?
  ( cd usr/bin ; ln -sf gfortran-gcc-${VERSION} fortran )
  mkdir -p usr/info
  mv ${PKG1}/usr/info/gfortran* usr/info
  mkdir -p usr/lib${LIBDIRSUFFIX}
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/libgfortran* usr/lib${LIBDIRSUFFIX}/
  mkdir -p usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/finclude usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/libgfortran* usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/
  mkdir -p usr/libexec/gcc/${TARGET}/${VERSION}
  mv ${PKG1}/usr/libexec/gcc/${TARGET}/${VERSION}/f951 usr/libexec/gcc/${TARGET}/${VERSION}/f951
  mv ${PKG1}/usr/libexec/gcc/${TARGET}/${VERSION}/libgfortran* usr/libexec/gcc/${TARGET}/${VERSION}/
  mkdir -p usr/man/man1
  mv ${PKG1}/usr/man/man1/gfortran* usr/man/man1

  #compat32
  if [ "${SB_MULTILIB}" = "YES" ]; then
    mkdir -p usr/lib
    mv ${PKG1}/usr/lib/libgfortran* usr/lib
    mkdir -p usr/lib/gcc/${TARGET}/${VERSION}
    mv ${PKG1}/usr/lib/gcc/${TARGET}/${VERSION}/finclude usr/lib/gcc/${TARGET}/${VERSION}/
    mv ${PKG1}/usr/lib/gcc/${TARGET}/${VERSION}/libgfortran* usr/lib/gcc/${TARGET}/${VERSION}/
  fi
  rmdir -p ${PKG1}/usr/lib/gcc/${TARGET}/${VERSION} usr/lib/gcc/${TARGET}/${VERSION}
)

# gcc-gnat:
( cd ${PKG4}
  mkdir -p usr/bin
  mv ${PKG1}/usr/bin/gnat* usr/bin
  mv ${PKG1}/usr/bin/gpr* usr/bin
  mkdir -p usr/info
  mv ${PKG1}/usr/info/gnat* usr/info
  mkdir -p usr/share
  mv ${PKG1}/usr/share/gnat usr/share/
  rmdir usr/share
  mkdir -p usr/libexec/gcc/${TARGET}/${VERSION}
  mv ${PKG1}/usr/libexec/gcc/${TARGET}/${VERSION}/gnat1 usr/libexec/gcc/${TARGET}/${VERSION}
  mkdir -p usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/adainclude usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/adalib usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}
)

# gcc-java:
( cd ${PKG5}
  mkdir -p usr/bin
  mv ${PKG1}/usr/bin/aot-compile usr/bin
  mv ${PKG1}/usr/bin/addr2name.awk usr/bin
  #mv ${PKG1}/usr/bin/fastjar usr/bin
  mv ${PKG1}/usr/bin/gappletviewer usr/bin
  mv ${PKG1}/usr/bin/gc-analyze usr/bin
  mv ${PKG1}/usr/bin/*gcj* usr/bin
  mv ${PKG1}/usr/bin/gij usr/bin
  mv ${PKG1}/usr/bin/gjar usr/bin
  mv ${PKG1}/usr/bin/gjarsigner usr/bin
  mv ${PKG1}/usr/bin/gkeytool usr/bin
  mv ${PKG1}/usr/bin/grepjar usr/bin
  mv ${PKG1}/usr/bin/grmid usr/bin
  mv ${PKG1}/usr/bin/grmic usr/bin
  mv ${PKG1}/usr/bin/grmiregistry usr/bin
  mv ${PKG1}/usr/bin/gserialver usr/bin
  mv ${PKG1}/usr/bin/gtnameserv usr/bin
  mv ${PKG1}/usr/bin/gjavah usr/bin
  mv ${PKG1}/usr/bin/gorbd usr/bin
  mv ${PKG1}/usr/bin/jar usr/bin
  mv ${PKG1}/usr/bin/jcf-dump usr/bin
  mv ${PKG1}/usr/bin/jv-* usr/bin
  mv ${PKG1}/usr/bin/rmi* usr/bin
  mkdir -p usr/include/c++/${VERSION}
  # Move some Java only C++ headers from the C++ package:
  mv ${PKG2}/usr/include/c++/${VERSION}/{gcj,gnu,java,javax,org,sun} \
    usr/include/c++/${VERSION}
  mkdir -p usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include/jawt.h usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include
  if [ "${SB_SFFI}" = "YES" ] ;then
    rm -f ${PKG1}/usr/include/ffi.h
    rm -f ${PKG1}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include/ffi.h
    rm -f ${PKG1}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include/ffitarget.h
    rm -f ${PKG1}/usr/man/man3/ffi*
  else
    mv ${PKG1}/usr/include/ffi.h usr/include
    mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include/ffi.h usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include
    mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include/ffitarget.h usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include
  fi
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include/jawt_md.h usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include/jni.h usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include/jni_md.h usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include/jvmpi.h usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include/libffi usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include
  if [ ! -d ${PKG1}/usr/lib${LIBDIRSUFFIX}/python2.* ]; then
    echo "NO ${PKG1}/usr/lib${LIBDIRSUFFIX}/python${PYABI} !"
    #exit 1
  fi
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/python2.6 usr/lib${LIBDIRSUFFIX}
  mkdir -p usr/info
  mv ${PKG1}/usr/info/gcj.* usr/info
  mv ${PKG1}/usr/info/fastjar.* usr/info
  mkdir -p usr/lib${LIBDIRSUFFIX}
  if [ "${SB_SFFI}" = "YES" ] ;then
    rm -f ${PKG1}/usr/lib${LIBDIRSUFFIX}/libffi.*
  else
    mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/libffi* usr/lib${LIBDIRSUFFIX}
  fi
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/gcj* usr/lib${LIBDIRSUFFIX}
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/logging.properties usr/lib${LIBDIRSUFFIX}
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/libgcj* usr/lib${LIBDIRSUFFIX}
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/libgij* usr/lib${LIBDIRSUFFIX}
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/lib-org* usr/lib${LIBDIRSUFFIX}
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/security usr/lib${LIBDIRSUFFIX}
  mkdir -p usr/lib${LIBDIRSUFFIX}/pkgconfig
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/pkgconfig/libgcj*.pc usr/lib${LIBDIRSUFFIX}/pkgconfig
  ( cd usr/lib${LIBDIRSUFFIX}/pkgconfig; ln -s libgcj-${SVER}.pc libgcj.pc )
  rmdir ${PKG1}/usr/lib${LIBDIRSUFFIX}/pkgconfig 2> /dev/null
  mkdir -p usr/libexec/gcc/${TARGET}/${VERSION}
  mv ${PKG1}/usr/libexec/gcc/${TARGET}/${VERSION}/jc1 usr/libexec/gcc/${TARGET}/${VERSION}
  mv ${PKG1}/usr/libexec/gcc/${TARGET}/${VERSION}/ecj1 usr/libexec/gcc/${TARGET}/${VERSION}
  mv ${PKG1}/usr/libexec/gcc/${TARGET}/${VERSION}/jvgenmain usr/libexec/gcc/${TARGET}/${VERSION}
  mkdir -p usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include/gcj usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include
  mkdir -p usr/man/man1
  mv ${PKG1}/usr/man/man1/aot-compile.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/gappletviewer.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/gc-analyze.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/gcj.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/gcjh.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/gcj-dbtool.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/gij.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/gjar.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/gjarsigner.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/gjavah.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/gjdoc.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/gjnih.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/gkeytool.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/gnative2ascii.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/gorbd.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/grmic.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/grmid.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/grmiregistry.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/gserialver.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/gtnameserv.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/jcf-dump.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/jv-convert.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/jv-scan.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/rebuild-gcj-db.1.gz usr/man/man1
  mkdir -p usr/share
  mv ${PKG1}/usr/share/java usr/share
  # The ecj wrapper script:
  sed -e "s,@JAVADIR@,/usr/share/java," ${CWD}/ecj.sh > usr/bin/ecj
  chmod 755 usr/bin/ecj
  # The JAVA_HOME compatibility links.
  # Caution: non-multilib arch-independent stuff! No lib64 here.
  mkdir -p usr/lib${LIBDIRSUFFIX}
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/jvm* usr/lib${LIBDIRSUFFIX}
  # And add the missing javac symlink:
  ln -s ../../../bin/ecj usr/lib${LIBDIRSUFFIX}/jvm/bin/javac

  # compat32
  if [ "${SB_MULTILIB}" = "YES" ]; then
    mkdir -p usr/lib
    if [ "${SB_SFFI}" = "YES" ] ;then
      rm -f ${PKG1}/usr/lib/libffi.*
    else
      mv ${PKG1}/usr/lib/libffi* usr/lib
    fi
    mv ${PKG1}/usr/lib/gcj* usr/lib
    mv ${PKG1}/usr/lib/libgcj* usr/lib
    mv ${PKG1}/usr/lib/libgij* usr/lib
    mv ${PKG1}/usr/lib/lib-org* usr/lib
    mv ${PKG1}/usr/lib/security usr/lib
  fi
)

# gcc-objc:
( cd ${PKG6}
  mkdir -p usr/lib${LIBDIRSUFFIX}
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/libobjc* usr/lib${LIBDIRSUFFIX}/
  mkdir -p usr/libexec/gcc/${TARGET}/${VERSION}
  mv ${PKG1}/usr/libexec/gcc/${TARGET}/${VERSION}/cc1obj usr/libexec/gcc/${TARGET}/${VERSION}
  mkdir -p usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include/objc usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}/include

  # compat32
  if [ "${SB_MULTILIB}" = "YES" ]; then
    mkdir -p usr/lib
    mv ${PKG1}/usr/lib/libobjc* usr/lib
  fi

)

# gcc-go:
( cd ${PKG7}
  mkdir -p usr/bin
  mv ${PKG1}/usr/bin/gccgo usr/bin
  mkdir -p usr/lib${LIBDIRSUFFIX}
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/libgo.* usr/lib${LIBDIRSUFFIX}/
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/libgobegin.* usr/lib${LIBDIRSUFFIX}/
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/go usr/lib${LIBDIRSUFFIX}/
  mkdir -p usr/libexec/gcc/${TARGET}/${VERSION}
  mv ${PKG1}/usr/libexec/gcc/${TARGET}/${VERSION}/go1 usr/libexec/gcc/${TARGET}/${VERSION}
  mkdir -p usr/man/man1
  mv ${PKG1}/usr/man/man1/gccgo.1.gz usr/man/man1

  # compat32
  if [ "${SB_MULTILIB}" = "YES" ]; then
    mkdir -p usr/lib
    mv ${PKG1}/usr/lib/libgo.* usr/lib
    mv ${PKG1}/usr/lib/libgobegin.* usr/lib
    mv ${PKG1}/usr/lib/go usr/lib
  fi

)

## NOTE: Thought about this, because the precompiled headers are so large.
## Probably easier to keep everything together, though.
## gcc-g++-gch (precompiled c++ headers)
#( cd ${PKG7}
#  mkdir -p usr/include/c++/${VERSION}/${TARGET}/bits
#  mv ${PKG2}/usr/include/c++/${VERSION}/${TARGET}/bits/stdc++.h.gch usr/include/c++/${VERSION}/${TARGET}/bits
#)

rmdir ${PKG1}/usr/include 2> /dev/null

# Filter all .la files (thanks much to Mark Post for the sed script):
( cd ${TMP}
  for file in $(find . -type f -name "*.la") ; do
    cat ${file} | sed -e 's%-L/gcc-[[:graph:]]* % %g' > ${TMP}/tmp-la-file
    cat ${TMP}/tmp-la-file > ${file}
  done
  rm ${TMP}/tmp-la-file
)

if [ "${SB_MULTILIB}" = "YES" ]; then
  (
    # gcc-compat32
    cd ${PKG1_32}
    mkdir -p usr/lib64/gcc/${TARGET}/${VERSION}
    mv ${PKG1}/usr/lib64/gcc/${TARGET}/${VERSION}/32 \
      usr/lib64/gcc/${TARGET}/${VERSION}
    mv ${PKG1}/usr/lib64/32 usr/lib64/
  )
  # *-compat32
  for dir in ${PKG1_32} ${PKG2_32} ${PKG3_32} ${PKG5_32} ${PKG6_32} ${PKG7_32}; do
    DIR64=$(echo $dir | sed 's#-compat32##')
    (
      cd ${dir}
      mkdir -p usr
      mv ${DIR64}/usr/lib usr/
    )
  done
  # gcc-g++-compat32
  (
    cd ${PKG2_32}
    mkdir -p usr/include/c++/${VERSION}/${TARGET}
    mv ${PKG2}/usr/include/c++/${VERSION}/${TARGET}/32 usr/include/c++/${VERSION}/${TARGET}
    mkdir -p usr/share/gdb/auto-load/usr/lib
    mv -f usr/lib/libstdc++*gdb.py* \
      usr/share/gdb/auto-load/usr/lib/
  )
  # gcc-gfortran-compat32
  (
    cd ${PKG3_32}
    mkdir -p usr/lib64/gcc/${TARGET}/${VERSION}/32
    mv ${PKG1_32}/usr/lib64/gcc/${TARGET}/${VERSION}/32/libgfortranbegin.* usr/lib64/gcc/${TARGET}/${VERSION}/32/
  )
  # gcc-gnat-compat32
  (
    cd ${PKG4_32}
    mkdir -p usr/lib64/gcc/${TARGET}/${VERSION}/32
    mv ${PKG1_32}/usr/lib64/gcc/${TARGET}/${VERSION}/32/adainclude usr/lib64/gcc/${TARGET}/${VERSION}/32/
    mv ${PKG1_32}/usr/lib64/gcc/${TARGET}/${VERSION}/32/adalib usr/lib64/gcc/${TARGET}/${VERSION}/32/
  )

fi

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{descs,patches}
  install -m0644 ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/libgcc_*.c.gz ${CWD}/${NAME}.png.gz \
    ${CWD}/ecj.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/descs/slack-desc* \
    ${SBDIR}/descs/
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS1="set -o errexit -o xtrace ; cd ${PKG1} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS2="set -o errexit -o xtrace ; cd ${PKG2} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS3="set -o errexit -o xtrace ; cd ${PKG3} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS4="set -o errexit -o xtrace ; cd ${PKG4} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS5="set -o errexit -o xtrace ; cd ${PKG5} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS6="set -o errexit -o xtrace ; cd ${PKG6} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS7="set -o errexit -o xtrace ; cd ${PKG7} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS1="${ROOTCOMMANDS1}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME1}.${PKGFORMAT} "
ROOTCOMMANDS2="${ROOTCOMMANDS2}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME2}.${PKGFORMAT} "
ROOTCOMMANDS3="${ROOTCOMMANDS3}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME3}.${PKGFORMAT} "
ROOTCOMMANDS4="${ROOTCOMMANDS4}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME4}.${PKGFORMAT} "
ROOTCOMMANDS5="${ROOTCOMMANDS5}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME5}.${PKGFORMAT} "
ROOTCOMMANDS6="${ROOTCOMMANDS6}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME6}.${PKGFORMAT} "
ROOTCOMMANDS7="${ROOTCOMMANDS7}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME7}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS1}
  eval ${ROOTCOMMANDS2}
  eval ${ROOTCOMMANDS3}
  eval ${ROOTCOMMANDS4}
  eval ${ROOTCOMMANDS5}
  eval ${ROOTCOMMANDS6}
  eval ${ROOTCOMMANDS7}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS1} | fakeroot
  echo ${ROOTCOMMANDS2} | fakeroot
  echo ${ROOTCOMMANDS3} | fakeroot
  echo ${ROOTCOMMANDS4} | fakeroot
  echo ${ROOTCOMMANDS5} | fakeroot
  echo ${ROOTCOMMANDS6} | fakeroot
  echo ${ROOTCOMMANDS7} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS1}"
  /bin/su -c "${ROOTCOMMANDS2}"
  /bin/su -c "${ROOTCOMMANDS3}"
  /bin/su -c "${ROOTCOMMANDS4}"
  /bin/su -c "${ROOTCOMMANDS5}"
  /bin/su -c "${ROOTCOMMANDS6}"
  /bin/su -c "${ROOTCOMMANDS7}"
fi

#( cd ${PKG7}
#  makepkg -l y -c n ${TMP}/gcc-g++-gch-${VERSION}-${ARCH}-${BUILD}.tgz )

if [ "${SB_MULTILIB}" = "YES" ]; then
ROOTCOMMANDS1_32="set -o errexit -o xtrace ; cd ${PKG1_32} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS2_32="set -o errexit -o xtrace ; cd ${PKG2_32} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS3_32="set -o errexit -o xtrace ; cd ${PKG3_32} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS4_32="set -o errexit -o xtrace ; cd ${PKG4_32} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS5_32="set -o errexit -o xtrace ; cd ${PKG5_32} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS6_32="set -o errexit -o xtrace ; cd ${PKG6_32} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS7_32="set -o errexit -o xtrace ; cd ${PKG7_32} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS1_32="${ROOTCOMMANDS1_32}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME1_32}.${PKGFORMAT} "
ROOTCOMMANDS2_32="${ROOTCOMMANDS2_32}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME2_32}.${PKGFORMAT} "
ROOTCOMMANDS3_32="${ROOTCOMMANDS3_32}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME3_32}.${PKGFORMAT} "
ROOTCOMMANDS4_32="${ROOTCOMMANDS4_32}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME4_32}.${PKGFORMAT} "
ROOTCOMMANDS5_32="${ROOTCOMMANDS5_32}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME5_32}.${PKGFORMAT} "
ROOTCOMMANDS6_32="${ROOTCOMMANDS6_32}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME6_32}.${PKGFORMAT} "
ROOTCOMMANDS7_32="${ROOTCOMMANDS7_32}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME7_32}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS1_32}
  eval ${ROOTCOMMANDS2_32}
  eval ${ROOTCOMMANDS3_32}
  eval ${ROOTCOMMANDS4_32}
  eval ${ROOTCOMMANDS5_32}
  eval ${ROOTCOMMANDS6_32}
  eval ${ROOTCOMMANDS7_32}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS1_32} | fakeroot
  echo ${ROOTCOMMANDS2_32} | fakeroot
  echo ${ROOTCOMMANDS3_32} | fakeroot
  echo ${ROOTCOMMANDS4_32} | fakeroot
  echo ${ROOTCOMMANDS5_32} | fakeroot
  echo ${ROOTCOMMANDS6_32} | fakeroot
  echo ${ROOTCOMMANDS7_32} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS1_32}"
  /bin/su -c "${ROOTCOMMANDS2_32}"
  /bin/su -c "${ROOTCOMMANDS3_32}"
  /bin/su -c "${ROOTCOMMANDS4_32}"
  /bin/su -c "${ROOTCOMMANDS5_32}"
  /bin/su -c "${ROOTCOMMANDS6_32}"
  /bin/su -c "${ROOTCOMMANDS7_32}"
fi
fi

echo
echo "Slackware GCC package build complete!"
echo

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  [ -d ${TMP}/gcc.build.lnx ] && rm -rf ${TMP}/gcc.build.lnx 
  [ -f ${TMP}/gcc.build.log ] && rm -f ${TMP}/gcc.build.log
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
