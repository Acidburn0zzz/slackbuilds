#!/bin/sh
#-- gpac for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ gpac.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008, 2009, 2010 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://gpac.sourceforge.net/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=gpac
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-0.4.5}
PVER=${PVER:-1}
SVER=${SVER:-610}
WVER=${WVER:-600}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}
SRCARCHIVE=${SRCDIR}-${VERSION}.tar.gz
PSRCARCHIVE=${SRCDIR}-${VERSION}-patches-${PVER}.tar.bz2
ESRCARCHIVE=26104-${SVER}.zip
ESRCARCHIVE2=26204-${WVER}.zip

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
SF_MIRROR=${SF_MIRROR:-http://prdownloads.sourceforge.net}
DL_URL="${SF_MIRROR}/${NAME}/${SRCARCHIVE}"
GENTOO_MIRROR=${GENTOO_MIRROR:-ftp://ftp.ussg.iu.edu/pub/linux/gentoo}
PDL_URL="${GENTOO_MIRROR}/distfiles/${PSRCARCHIVE}"
EDL_URL="http://www.3gpp.org/ftp/Specs/archive/26_series/26.104/${ESRCARCHIVE}"
EDL_URL2="http://www.3gpp.org/ftp/Specs/archive/26_series/26.204/${ESRCARCHIVE2}"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi
if ! test -r ${PSRCARCHIVE}; then
  test -r ${CWD}/${PSRCARCHIVE} || wget ${DL_OPTS} ${PDL_URL} || exit 1
fi
if ! test -r ${ESRCARCHIVE}; then
  test -r ${CWD}/${ESRCARCHIVE} || wget ${DL_OPTS} ${EDL_URL} || exit 1
fi
if ! test -r ${ESRCARCHIVE2}; then
  test -r ${CWD}/${ESRCARCHIVE2} || wget ${DL_OPTS} ${EDL_URL2} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

( cd modules/amr_float_dec
  unzip -o ${CWD}/${ESRCARCHIVE} || exit 1
  unzip -o ${CWD}/${ESRCARCHIVE2} || exit 1
  unzip -jaq 26104-${SVER}_ANSI_C_source_code.zip -d amr_nb_ft || exit 1
  unzip -jaq 26204-${WVER}_ANSI-C_source_code.zip -d amr_wb_ft || exit 1
) || exit 1

tar -xvjf ${CWD}/${PSRCARCHIVE} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
for i in $( < patches/series ); do
  patch -p1 --verbose --backup --suffix=".pdeb" -i patches/${i} || exit 1
done

sed -ie '/ldconfig / d' Makefile || exit 1

sed -i -e '/^#include/s|openjpeg.h|openjpeg/openjpeg.h|g' \
          modules/img_in/jp2_dec.c || exit 1

chmod +x configure
# make sure configure looks for wx-2.8
WX_GTK_VER=2.8

# make sure mozilla won't be used
sed -i -e 's/osmozilla//g' applications/Makefile || exit 1

./configure \
  --prefix=/usr \
  --bindir=/usr/bin \
  --includedir=/usr/include \
  --libdir=/usr/lib \
  --enable-amr \
  --enable-pthread \
  --enable-visualize \
  --enable-svg \
  --enable-pic \
  --enable-shared \
  --enable-debug \
  --use-ogg=system \
  --use-openjpeg=system \
  --use-vorbis=system \
  --use-theora=system \
  --extra-cflags="${SLKCFLAGS} -fno-strict-aliasing" || exit 1

make || exit 1
make install DESTDIR=${PKG} || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS BUGS Changelog README TODO doc/*.txt doc/*.html ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/${PSRCARCHIVE} ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
