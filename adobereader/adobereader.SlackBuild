#!/bin/sh
#-- adobereader for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ adobereader.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008, 2009, 2010 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.adobe.com/products/reader/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=adobereader
BNAME=acroread
NAME2=${NAME}-mozilla
PNAME=AdobeReader
PKGF=${PKGF:-${TMP}/package-${NAME}}
PKG=${PKGF}/${NAME}
PKG2=${PKGF}/${NAME2}

VERSION=${VERSION:-9.3.4-1}
MVER="$(echo ${VERSION} | cut -d . -f1)"
RVER="$(echo ${VERSION} | cut -d - -f1)"
REL="$(echo ${VERSION} | cut -d - -f2)"
# English: enu
# Brazilian Portuguese: ptb
ALANG=${ALANG:-enu}
# x86 or x86_64
ARCH=${ARCH:-x86}
if [ "${ARCH}" = "x86_64" ] ;then
  echo "Do not have x86_64 release yet"
  exit 0
else
  ARCH=x86
  DARCH=i486
fi
BUILD=${BUILD:-1}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKGNAME2=${NAME2}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}
SRCARCHIVE=AdbeRdr${VERSION}_${DARCH}linux_${ALANG}.tar.bz2

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://ardownload.adobe.com/pub/adobe/reader/unix/${MVER}.x/${RVER}/${ALANG}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible, or in /tmp
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKGF} ]; then
  # Clean up a previous build
  rm -rf ${PKGF}
fi
mkdir -p ${PKG} ${PKG2}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}
tar -xvf COMMON.TAR -C ${PKG}/usr/lib${LIBDIRSUFFIX}/ || exit 1
tar -xvf ILINXR.TAR -C ${PKG}/usr/lib${LIBDIRSUFFIX}/ || exit 1

# Add seamonkey and xulrunner in gre searchs.
sed -i \
  -e '/gre.d\/mozilla.conf/s|mozilla.conf|mozilla.conf /etc/gre.d/seamonkey.conf /etc/gre.d/xulrunner.conf|g' \
  -e '/Font-config/,+9d' \
   ${PKG}/usr/lib${LIBDIRSUFFIX}/Adobe/Reader${MVER}/bin/${BNAME} || exit 1

rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/Adobe/Reader9/bin/UNINSTALL
rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/Adobe/Reader9/Browser/install_browser_plugin
rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/Adobe/Reader9/Resource/Support/vnd.*.desktop

# Make links
mkdir -p ${PKG}/usr/bin
ln -sf /usr/lib${LIBDIRSUFFIX}/Adobe/Reader${MVER}/bin/${BNAME} \
       ${PKG}/usr/bin/${BNAME} || exit 1

# Desktop file and icons
mkdir -p ${PKG}/usr/share/applications
sed -e "/^Icon=/s|=.*$|=${BNAME}|g;
        s|^Caption=|X-Caption=|g;
        0,/^Name\[de\]=/{//d;}" \
       ${PKG}/usr/lib${LIBDIRSUFFIX}/Adobe/Reader${MVER}/Resource/Support/${PNAME}.desktop > \
       ${PKG}/usr/share/applications/${NAME}.desktop || exit 1

desktop-file-install --delete-original --vendor="" \
  --dir ${PKG}/usr/share/applications \
  --remove-key="Encoding" \
  --remove-key="DocPath" \
  --remove-category="Application" \
  --remove-category="X-Red-Hat-Base" \
  --add-category="GTK" \
  ${PKG}/usr/share/applications/${NAME}.desktop || exit 1


for res in 16 20 22 24 32 36 48 64 96 128 192 ;do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
  mkdir -p ${dir}
  install -m 0644 \
    ${PKG}/usr/lib${LIBDIRSUFFIX}/Adobe/Reader${MVER}/Resource/Icons/${res}x${res}/${PNAME}${MVER}.png \
    ${dir}/${BNAME}.png || exit 1
done

# Mozilla plugin
mkdir -p ${PKG2}/usr/lib${LIBDIRSUFFIX}/Adobe/Reader${MVER}
mv ${PKG}/usr/lib${LIBDIRSUFFIX}/Adobe/Reader${MVER}/Browser \
   ${PKG2}/usr/lib${LIBDIRSUFFIX}/Adobe/Reader${MVER}/Browser || exit 1
mkdir -p ${PKG2}/usr/lib${LIBDIRSUFFIX}/mozilla/plugins
mv ${PKG2}/usr/lib${LIBDIRSUFFIX}/Adobe/Reader${MVER}/Browser/intellinux/nppdf.so \
   ${PKG2}/usr/lib${LIBDIRSUFFIX}/mozilla/plugins/nppdf.so || exit 1
ln -sf /usr/lib${LIBDIRSUFFIX}/mozilla/plugins/nppdf.so \
   ${PKG2}/usr/lib${LIBDIRSUFFIX}/Adobe/Reader${MVER}/Browser/intellinux/nppdf.so || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  *.htm *.TXT ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

mkdir -p ${PKG2}/install
cat ${CWD}/slack-desc.plugin > ${PKG2}/install/slack-desc
cat ${CWD}/slack-required.plugin > ${PKG2}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc ${PKG2}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc* ${CWD}/slack-required* ${CWD}/ChangeLog.SB \
                 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS2="set -o errexit -o xtrace ; cd ${PKG2} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "
ROOTCOMMANDS2="${ROOTCOMMANDS2}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME2}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  eval ${ROOTCOMMANDS2}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
  echo ${ROOTCOMMANDS2} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
  /bin/su -c "${ROOTCOMMANDS2}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKGF} ]; then
    rm -rf ${PKGF} && echo "${PKGF} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
