#!/bin/bash
#-- virtualbox for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ virtualbox.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2012 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.virtualbox.org/wiki/VirtualBox

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=VirtualBox
NAME=virtualbox
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-4.2.0}
DOCVER=${DOCVER:-4.2.0}
RVER=$(echo ${VERSION} | cut -d- -f1)
ARCH=${ARCH:-x86_64}
if [ "${ARCH}" = "x86_64" ] ;then
  DARCH=amd64
else
  DARCH=x86
fi
BUILD=${BUILD:-1}
SLKDIST=${SLKDIST:-Slackware}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to use system kbuild
SB_KBUILD=${SB_KBUILD:-NO}

# Set to YES to apply custom bios logo
SB_VBOXLOGO=${SB_VBOXLOGO:-YES}

PYSITEARCH=$(python -c 'from distutils import sysconfig; print sysconfig.get_python_lib(1)')
PYSITELIB=$(python -c 'from distutils import sysconfig; print sysconfig.get_python_lib()')
PYABI=$(python -c 'import sys; sys.stdout.write(sys.version[:3])')
PYVER=$(python -c 'import sys; print sys.version.split(" ")[0]')

DATE=$(LC_ALL=C date +%d-%b-%Y)

DOCSDIR=${CWD}/docs/${VERSION}

grep --quiet '^vboxusers:' /etc/group && SB_HGROUP=1

SRCDIR=${PNAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2
DOCSSRCARCHIVE=UserManual.pdf

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://download.virtualbox.org/${NAME}/${RVER}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${SRCARCHIVE} || exit 1

mkdir -p ${DOCSDIR}
test -r ${DOCSDIR}/${DOCSSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} -P ${DOCSDIR} ${DL_URL}/${DOCSSRCARCHIVE} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

unset SLKLDFLAGS
[ "${LDFLAGS}" ] && SLKLDFLAGS="${LDFLAGS}"
unset CFLAGS CXXFLAGS CPPFLAGS

unset QTDIR QTINC QTLIB
export QTDIR=$(qmake-qt4 -query QT_INSTALL_PREFIX)
PATH="$(qmake-qt4 -query QT_INSTALL_BINS):${PATH}" ; export PATH

export JAVA_HOME=${JAVA_HOME:-"/usr/lib${LIBDIRSUFFIX}/java"}

cd ${TMP}
cd ${SRCDIR} || exit 1

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  [ \"${SB_HGROUP}\" = 1 ] && /bin/chown root.vboxusers ./usr/bin/{VBox,vboxshell} ./lib/udev/VBoxCreateUSBNode.sh ./var/lib/vbox ;
  [ \"${SB_HGROUP}\" = 1 ] && /bin/chown root.vboxusers ./usr/lib${LIBDIRSUFFIX}/virtualbox/{VBoxManage,VBoxSVC,VBoxXPCOMIPCD,vboxwebsrv,VBoxHeadless,VBoxSDL,VBoxTunctl,VirtualBox,VBoxExtPackHelperApp,VBoxBalloonCtrl} ;
  [ \"${SB_HGROUP}\" = 1 ] && /bin/chmod 4510 ./usr/lib${LIBDIRSUFFIX}/virtualbox/{VBoxAutostart,VBoxHeadless,VBoxSDL,VirtualBox,VBoxNetDHCP,VBoxNetAdpCtl} ; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
