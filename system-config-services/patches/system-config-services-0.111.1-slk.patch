diff -up system-config-services-0.111.1/src/scservices/dbus/proxy/serviceherders.py.slk system-config-services-0.111.1/src/scservices/dbus/proxy/serviceherders.py
--- system-config-services-0.111.1/src/scservices/dbus/proxy/serviceherders.py.slk	2013-11-14 08:00:24.000000000 -0200
+++ system-config-services-0.111.1/src/scservices/dbus/proxy/serviceherders.py	2014-01-13 19:53:35.369406533 -0200
@@ -25,9 +25,6 @@ import copy
 
 from scservices.core.legacy.serviceherders import SVC_ADDED, SVC_DELETED
 
-from scservices.dbus.proxy.services import DBusSysVServiceProxy, \
-    DBusXinetdServiceProxy
-
 from scservices.dbus import dbus_service_name, dbus_service_path
 
 import dbus
@@ -145,16 +142,3 @@ class DBusServiceHerderProxy(object):
                         self._Notification(subscriber, service_name, change))
 
 
-class DBusSysVServiceHerderProxy(DBusServiceHerderProxy):
-
-    object_name = "SysVServiceHerder"
-    service_class = DBusSysVServiceProxy
-
-
-class DBusXinetdServiceHerderProxy(DBusServiceHerderProxy):
-
-    object_name = "XinetdServiceHerder"
-    service_class = DBusXinetdServiceProxy
-
-
-herder_classes = [DBusSysVServiceHerderProxy, DBusXinetdServiceHerderProxy]
diff -up system-config-services-0.111.1/src/scservices/dbus/proxy/services.py.slk system-config-services-0.111.1/src/scservices/dbus/proxy/services.py
--- system-config-services-0.111.1/src/scservices/dbus/proxy/services.py.slk	2013-11-14 08:00:24.000000000 -0200
+++ system-config-services-0.111.1/src/scservices/dbus/proxy/services.py	2014-01-13 19:53:35.369406533 -0200
@@ -21,8 +21,7 @@
 # Authors:
 # Nils Philippsen <nils@redhat.com>
 
-from scservices.dbus.proxy.servicesinfo import DBusServiceInfoProxy, \
-    DBusSysVServiceInfoProxy, DBusXinetdServiceInfoProxy
+from scservices.dbus.proxy.servicesinfo import DBusServiceInfoProxy
 
 from scservices.dbus import dbus_service_name
 
@@ -64,116 +63,3 @@ class DBusServiceProxy(object):
 Service = DBusServiceProxy
 
 
-class DBusChkconfigServiceProxy(DBusServiceProxy):
-
-    def __init__(self, *p, **k):
-        super(DBusChkconfigServiceProxy, self).__init__(*p, **k)
-        self.chkconfig_interface = dbus.Interface(self.dbus_object,
-                "org.fedoraproject.Config.Services.ChkconfigService")
-
-    @polkit.enable_proxy(authfail_result=None)
-    def enable(self):
-        return self.chkconfig_interface.enable()
-
-    @polkit.enable_proxy(authfail_result=None)
-    def disable(self):
-        return self.chkconfig_interface.disable()
-
-    @polkit.enable_proxy
-    def get_enabled(self):
-        try:
-            return self.chkconfig_interface.get_enabled()
-        except dbus.DBusException, e:
-            if e.get_dbus_name() in ('org.freedesktop.DBus.Error.UnknownObject',
-                    'org.freedesktop.DBus.Error.UnknownMethod'):
-                return False
-            else:
-                raise
-
-    @polkit.enable_proxy
-    def is_chkconfig_running(self):
-        try:
-            return self.chkconfig_interface.is_chkconfig_running()
-        except dbus.DBusException, e:
-            if e.get_dbus_name() in ('org.freedesktop.DBus.Error.UnknownObject',
-                    'org.freedesktop.DBus.Error.UnknownMethod'):
-                return False
-            else:
-                raise
-
-
-class DBusSysVServiceProxy(DBusChkconfigServiceProxy):
-
-    info_class = DBusSysVServiceInfoProxy
-
-    def __init__(self, *p, **k):
-        super(DBusSysVServiceProxy, self).__init__(*p, **k)
-        self.sysv_interface = dbus.Interface(self.dbus_object,
-                "org.fedoraproject.Config.Services.SysVService")
-
-    @polkit.enable_proxy(authfail_result=None)
-    def start(self):
-        return self.sysv_interface.start()
-
-    @polkit.enable_proxy(authfail_result=None)
-    def stop(self):
-        return self.sysv_interface.stop()
-
-    @polkit.enable_proxy(authfail_result=None)
-    def restart(self):
-        return self.sysv_interface.restart()
-
-    @polkit.enable_proxy(authfail_result=None)
-    def reload(self):
-        return self.sysv_interface.reload()
-
-    @property
-    @polkit.enable_proxy
-    def status(self):
-        return self.sysv_interface.get_status()
-
-    @property
-    @polkit.enable_proxy
-    def status_updates_running(self):
-        return self.sysv_interface.get_status_updates_running()
-
-    @polkit.enable_proxy
-    def _get_runlevels(self):
-        if not hasattr(self, "_runlevels"):
-            self._runlevels = HookableSet()
-            self._runlevels.add_hook(self._save_runlevels)
-        self._runlevels.hooks_enabled = False
-        self._runlevels.clear()
-        self._runlevels.update(self.sysv_interface.get_runlevels())
-        self._runlevels.hooks_enabled = True
-        return self._runlevels
-
-    def _set_runlevels(self, runlevels):
-        self.runlevels
-        if self._runlevels != runlevels:
-            self._runlevels.freeze_hooks()
-            self._runlevels.clear()
-            self._runlevels.update(runlevels)
-            self._runlevels.thaw_hooks()
-
-    @polkit.enable_proxy(authfail_result=None)
-    def _save_runlevels(self):
-        return self.sysv_interface.set_runlevels(list(self._runlevels))
-
-    runlevels = property(_get_runlevels, _set_runlevels)
-
-
-SysVService = DBusSysVServiceProxy
-
-
-class DBusXinetdServiceProxy(DBusChkconfigServiceProxy):
-
-    info_class = DBusXinetdServiceInfoProxy
-
-    def __init__(self, *p, **k):
-        super(DBusXinetdServiceProxy, self).__init__(*p, **k)
-        self.xinetd_interface = dbus.Interface(self.dbus_object,
-                "org.fedoraproject.Config.Services.XinetdService")
-
-
-XinetdService = DBusXinetdServiceProxy
diff -up system-config-services-0.111.1/src/scservices/dbus/proxy/servicesinfo.py.slk system-config-services-0.111.1/src/scservices/dbus/proxy/servicesinfo.py
--- system-config-services-0.111.1/src/scservices/dbus/proxy/servicesinfo.py.slk	2013-11-14 08:00:24.000000000 -0200
+++ system-config-services-0.111.1/src/scservices/dbus/proxy/servicesinfo.py	2014-01-13 19:53:35.369406533 -0200
@@ -41,34 +41,3 @@ class DBusServiceInfoProxy(object):
                 "org.fedoraproject.Config.Services.Service")
 
 
-class DBusSysVServiceInfoProxy(DBusServiceInfoProxy):
-
-    def __init__(self, *p, **k):
-        super(DBusSysVServiceInfoProxy, self).__init__(*p, **k)
-        self.sysv_interface = dbus.Interface(self.dbus_object,
-                "org.fedoraproject.Config.Services.SysVService")
-
-    @property
-    @polkit.enable_proxy
-    def shortdescription(self):
-        return self.sysv_interface.get_shortdescription()
-
-    @property
-    @polkit.enable_proxy
-    def description(self):
-        return self.sysv_interface.get_description()
-
-
-class DBusXinetdServiceInfoProxy(DBusServiceInfoProxy):
-
-    def __init__(self, *p, **k):
-        super(DBusXinetdServiceInfoProxy, self).__init__(*p, **k)
-        self.xinetd_interface = dbus.Interface(self.dbus_object,
-                "org.fedoraproject.Config.Services.XinetdService")
-
-    @property
-    @polkit.enable_proxy
-    def description(self):
-        return self.xinetd_interface.get_description()
-
-
diff -up system-config-services-0.111.1/src/scservices/dbus/service/__init__.py.slk system-config-services-0.111.1/src/scservices/dbus/service/__init__.py
--- system-config-services-0.111.1/src/scservices/dbus/service/__init__.py.slk	2013-11-14 08:00:24.000000000 -0200
+++ system-config-services-0.111.1/src/scservices/dbus/service/__init__.py	2014-01-13 19:53:35.370406322 -0200
@@ -29,8 +29,6 @@ import gamin
 import slip.dbus
 import slip.dbus.service
 
-from scservices.core.legacy.serviceherders import (
-        herder_classes as legacy_herder_classes)
 from scservices.dbus.service.serviceherder import DBusServiceHerder
 from scservices.dbus.service.systemd.manager import DBusSystemDManager
 
@@ -64,20 +62,6 @@ def run_service(persistent=False):
                polkit_manager_path, systemd_manager, persistent=persistent)
         dbus_objects.append(dbus_systemd_manager_object)
 
-        # ignore SysV services
-        herder_classes = [ x for x in legacy_herder_classes
-                if "sysv" not in x.__name__.lower() ]
-    else:
-        # assume systemd isn't running, revert to legacy style
-        herder_classes = legacy_herder_classes
-
-    for herder_cls in herder_classes:
-        herder = herder_cls(filemon)
-        dbus_herder_object = DBusServiceHerder(name, dbus_service_path +
-                 "/ServiceHerders/%s" % herder_cls.__name__,
-                herder, persistent=persistent)
-        dbus_objects.append(dbus_herder_object)
-
     def filemon_handle_events(source, condition, data=None):
         filemon.handle_events()
         return True
diff -up system-config-services-0.111.1/src/scservices/dbus/service/services.py.slk system-config-services-0.111.1/src/scservices/dbus/service/services.py
--- system-config-services-0.111.1/src/scservices/dbus/service/services.py.slk	2013-11-14 08:00:24.000000000 -0200
+++ system-config-services-0.111.1/src/scservices/dbus/service/services.py	2014-01-13 19:53:35.370406322 -0200
@@ -25,8 +25,6 @@ import dbus.service
 import slip.dbus.service
 import slip.dbus.polkit as polkit
 
-import scservices.core.legacy.services as services
-
 from scservices.dbus import dbus_service_name
 
 
@@ -34,130 +32,9 @@ class DBusService(slip.dbus.service.Obje
 
     default_polkit_auth_required = "org.fedoraproject.config.services.manage"
 
-    def __new__(cls, bus_name, object_path, service, **k):
-        srv_cls_dbussrv_cls = {services.SysVService: DBusSysVService,
-                               services.XinetdService: DBusXinetdService}
-
-        for (srv_cls, dbussrv_cls) in srv_cls_dbussrv_cls.iteritems():
-            if isinstance(service, srv_cls):
-                return super(DBusService, cls).__new__(dbussrv_cls)
-        raise NotImplementedError
-
     def __init__(self, bus_name, object_path, service):
         slip.dbus.service.Object.__init__(self, bus_name, object_path)
 
         self.service = service
 
 
-class DBusChkconfigService(DBusService):
-
-    @polkit.require_auth("org.fedoraproject.config.services.manage")
-    @dbus.service.method(dbus_interface=dbus_service_name +
-                          ".ChkconfigService", in_signature="",
-                         out_signature="")
-    def enable(self):
-        self.service.enable()
-
-    @polkit.require_auth("org.fedoraproject.config.services.manage")
-    @dbus.service.method(dbus_interface=dbus_service_name +
-                          ".ChkconfigService", in_signature="",
-                         out_signature="")
-    def disable(self):
-        self.service.disable()
-
-    @polkit.require_auth("org.fedoraproject.config.services.info")
-    @dbus.service.method(dbus_interface=dbus_service_name +
-                          ".ChkconfigService", in_signature="",
-                         out_signature="i")
-    def get_enabled(self):
-        return self.service.get_enabled()
-
-    @polkit.require_auth("org.fedoraproject.config.services.info")
-    @dbus.service.method(dbus_interface=dbus_service_name +
-                          ".ChkconfigService", in_signature="",
-                         out_signature="b")
-    def is_chkconfig_running(self):
-        return self.service.is_chkconfig_running()
-
-
-class DBusSysVService(DBusChkconfigService):
-
-    @polkit.require_auth("org.fedoraproject.config.services.manage")
-    @dbus.service.method(dbus_interface=dbus_service_name + ".SysVService",
-                         in_signature="", out_signature="")
-    def start(self):
-        self.service.start()
-
-    @polkit.require_auth("org.fedoraproject.config.services.manage")
-    @dbus.service.method(dbus_interface=dbus_service_name + ".SysVService",
-                         in_signature="", out_signature="")
-    def stop(self):
-        self.service.stop()
-
-    @polkit.require_auth("org.fedoraproject.config.services.manage")
-    @dbus.service.method(dbus_interface=dbus_service_name + ".SysVService",
-                         in_signature="", out_signature="")
-    def restart(self):
-        self.service.restart()
-
-    @polkit.require_auth("org.fedoraproject.config.services.manage")
-    @dbus.service.method(dbus_interface=dbus_service_name + ".SysVService",
-                         in_signature="", out_signature="")
-    def reload(self):
-        self.service.reload()
-
-    @polkit.require_auth("org.fedoraproject.config.services.info")
-    @dbus.service.method(dbus_interface=dbus_service_name + ".SysVService",
-                         in_signature="", out_signature="i")
-    def get_status(self):
-        return self.service.status
-
-    @polkit.require_auth("org.fedoraproject.config.services.info")
-    @dbus.service.method(dbus_interface=dbus_service_name + ".SysVService",
-                         in_signature="", out_signature="i")
-    def get_status_updates_running(self):
-        return self.service.status_updates_running
-
-    @polkit.require_auth("org.fedoraproject.config.services.info")
-    @dbus.service.method(dbus_interface=dbus_service_name + ".SysVService",
-                         in_signature="", out_signature="s")
-    def get_shortdescription(self):
-        if self.service.info.shortdescription:
-            return self.service.info.shortdescription
-        else:
-            return ""
-
-    @polkit.require_auth("org.fedoraproject.config.services.info")
-    @dbus.service.method(dbus_interface=dbus_service_name + ".SysVService",
-                         in_signature="", out_signature="s")
-    def get_description(self):
-        if self.service.info.description:
-            return self.service.info.description
-        else:
-            return ""
-
-    @polkit.require_auth("org.fedoraproject.config.services.info")
-    @dbus.service.method(dbus_interface=dbus_service_name + ".SysVService",
-                         in_signature="", out_signature="ai")
-    def get_runlevels(self):
-        return list(self.service.runlevels)
-
-    @polkit.require_auth("org.fedoraproject.config.services.manage")
-    @dbus.service.method(dbus_interface=dbus_service_name + ".SysVService",
-                         in_signature="ai", out_signature="")
-    def set_runlevels(self, runlevels):
-        self.service.runlevels = set(runlevels)
-
-
-class DBusXinetdService(DBusChkconfigService):
-
-    @polkit.require_auth("org.fedoraproject.config.services.info")
-    @dbus.service.method(dbus_interface=dbus_service_name + ".XinetdService",
-                         in_signature="", out_signature="s")
-    def get_description(self):
-        if self.service.info.description:
-            return self.service.info.description
-        else:
-            return ""
-
-
diff -up system-config-services-0.111.1/src/scservices/gui/__init__.py.slk system-config-services-0.111.1/src/scservices/gui/__init__.py
--- system-config-services-0.111.1/src/scservices/gui/__init__.py.slk	2014-01-13 19:59:09.521723688 -0200
+++ system-config-services-0.111.1/src/scservices/gui/__init__.py	2014-01-13 20:06:11.793459836 -0200
@@ -226,19 +226,6 @@ _status_text = {
     SVC_STATUS_DEAD: _("This service is dead."),
     }
 
-def _xinetd_enabled_icon_text(enabled):
-    xinetd_enabled_icon_text = {
-            SVC_ENABLED_REFRESHING: (gtk.STOCK_REFRESH,
-                _("This service is being refreshed right now.")),
-            SVC_ENABLED_ERROR: (gtk.STOCK_DIALOG_WARNING,
-                _("Getting information about this service failed.")),
-            SVC_ENABLED_YES: (gtk.STOCK_CONNECT, ("This service is enabled.")),
-            SVC_ENABLED_NO: (gtk.STOCK_DISCONNECT,
-                _("This service is disabled.")),
-        }
-
-    return xinetd_enabled_icon_text[enabled]
-
 def _systemd_active_sub_state_icon_text(active_state, sub_state):
     if active_state == 'inactive':
         icon = gtk.STOCK_DISCONNECT
@@ -304,9 +291,7 @@ class GUIServicesDetailsPainter(GladeCon
     def __new__(cls, serviceslist, service, *p, **k):
         if GUIServicesDetailsPainter._classes == None:
             GUIServicesDetailsPainter._classes = {
-                    SystemDService: GUISystemDServicesDetailsPainter,
-                    services.SysVService: GUISysVServicesDetailsPainter,
-                    services.XinetdService: GUIXinetdServicesDetailsPainter}
+                    SystemDService: GUISystemDServicesDetailsPainter}
 
         painter_class = None
 
@@ -362,116 +347,11 @@ class GUISystemDServicesDetailsPainter(G
                 description)
 
 
-class GUISysVServicesDetailsPainter(GUIServicesDetailsPainter):
-
-    """Details painter for SysV services"""
-
-    _xml_widgets = (
-        "sysVServiceExplanationLabel",
-        "sysVServiceEnabledIcon",
-        "sysVServiceEnabledLabel",
-        "sysVServiceStatusIcon",
-        "sysVServiceStatusLabel",
-        "sysVServiceDescriptionTextView",
-        )
-
-    def paint_details(self):
-        self.sysVServiceExplanationLabel.set_markup(
-                _("The <b>%(servicename)s</b> service is started once, "
-                  "usually when the system is booted, runs in the background "
-                  "and wakes up when needed.") %
-                {"servicename": self.service.name})
-
-        enabled = self.service.get_enabled()
-        self.sysVServiceEnabledIcon.set_from_stock(_enabled_stock_id[enabled],
-                gtk.ICON_SIZE_MENU)
-        if enabled == SVC_ENABLED_CUSTOM:
-            runlevels = ", ".join(map(str, sorted(self.service.runlevels)))
-            self.sysVServiceEnabledLabel.set_text(_enabled_text[enabled] %
-                     {"runlevels": runlevels})
-        else:
-            self.sysVServiceEnabledLabel.set_text(_enabled_text[enabled])
-
-        if self.service.status_updates_running > 0:
-            self.sysVServiceStatusIcon.set_from_stock(gtk.STOCK_REFRESH,
-                    gtk.ICON_SIZE_MENU)
-            self.sysVServiceStatusLabel.set_text(
-                    _("This service is updated currently."))
-        else:
-            stock_icon_id = _status_stock_id[self.service.status]
-            self.sysVServiceStatusIcon.set_from_stock(stock_icon_id,
-                    gtk.ICON_SIZE_MENU)
-            self.sysVServiceStatusLabel.set_text(
-                    _status_text[self.service.status])
-
-        if self.service.info.description:
-            self.sysVServiceDescriptionTextView.get_buffer().\
-                    set_text(self.service.info.description)
-        else:
-            self.sysVServiceDescriptionTextView.get_buffer().set_text("")
-
-
-class GUIXinetdServicesDetailsPainter(GUIServicesDetailsPainter):
-
-    _xml_widgets = ("xinetdServiceExplanationLabel",
-                    "xinetdServiceEnabledIcon", "xinetdServiceEnabledLabel",
-                    "xinetdServiceDescriptionTextView")
-
-    def __init__(self, serviceslist, service):
-        super(GUIXinetdServicesDetailsPainter, self).__init__(serviceslist,
-                service)
-
-    def paint_details(self):
-        self.xinetdServiceExplanationLabel.set_markup(
-                _("The <b>%(servicename)s</b> service will be started on "
-                  "demand by the xinetd service and ends when it has nothing "
-                  "more to do.") %
-                {"servicename": self.service.name})
-
-        enabled = self.service.get_enabled()
-        xinetd_service = self.serviceslist.xinetd_service
-        if enabled == SVC_ENABLED_YES and not xinetd_service:
-            self.xinetdServiceEnabledIcon.set_from_stock(
-                    gtk.STOCK_DIALOG_WARNING,
-                    gtk.ICON_SIZE_MENU)
-            self.xinetdServiceEnabledLabel.set_markup(
-                    _("This service is enabled, but the <b>xinetd</b> package "
-                    "is not installed. This service does not work without it."
-                    ))
-        elif enabled == SVC_ENABLED_YES and (
-                isinstance(xinetd_service, SystemDService) and
-                xinetd_service.ActiveState != 'active' or
-                isinstance(xinetd_service, services.SysVService) and
-                xinetd_service.status != SVC_STATUS_RUNNING):
-            self.xinetdServiceEnabledIcon.set_from_stock(
-                    gtk.STOCK_DIALOG_WARNING,
-                    gtk.ICON_SIZE_MENU)
-            self.xinetdServiceEnabledLabel.set_markup(
-                    _("This service is enabled, but the <b>xinetd</b> "
-                      "service is not running. This service does not work "
-                      "without it."))
-        else:
-            icon, text = _xinetd_enabled_icon_text(enabled)
-            self.xinetdServiceEnabledIcon.set_from_stock(icon,
-                    gtk.ICON_SIZE_MENU)
-            self.xinetdServiceEnabledLabel.set_text(text)
-
-        if self.service.info.description:
-            self.xinetdServiceDescriptionTextView.get_buffer().set_text(
-                    self.service.info.description)
-        else:
-            self.xinetdServiceDescriptionTextView.get_buffer().set_text("")
-
-
 class GUIServiceEntryPainter(object):
 
     def __new__(cls, serviceslist, service, *p, **k):
         if isinstance(service, SystemDService):
             return object.__new__(GUISystemDServiceEntryPainter)
-        elif isinstance(service, services.SysVService):
-            return object.__new__(GUISysVServiceEntryPainter)
-        elif isinstance(service, services.XinetdService):
-            return object.__new__(GUIXinetdServiceEntryPainter)
         else:
             raise TypeError("service")
 
@@ -494,40 +374,9 @@ class GUISystemDServiceEntryPainter(GUIS
         self.treestore.set(iter, SVC_COL_REMARK, self.service.Description)
 
 
-class GUISysVServiceEntryPainter(GUIServiceEntryPainter):
-
-    def paint(self):
-        iter = self.treestore.service_iters[self.service]
-        self.treestore.set(iter, SVC_COL_STATUS,
-                           _status_stock_id[self.service.status])
-        if self.service.info.shortdescription:
-            self.treestore.set(iter, SVC_COL_REMARK,
-                               self.service.info.shortdescription)
-
-
-class GUIXinetdServiceEntryPainter(GUIServiceEntryPainter):
-
-    def paint(self):
-        iter = self.treestore.service_iters[self.service]
-        enabled = self.service.get_enabled()
-        xinetd_service = self.serviceslist.xinetd_service
-        if enabled == SVC_ENABLED_YES and (not xinetd_service or
-                isinstance(xinetd_service, SystemDService) and
-                xinetd_service.ActiveState != 'active' or
-                isinstance(xinetd_service, services.SysVService) and
-                xinetd_service.status != SVC_STATUS_RUNNING):
-            self.treestore.set(iter, SVC_COL_STATUS,
-                               gtk.STOCK_DIALOG_WARNING)
-        else:
-            self.treestore.set(iter, SVC_COL_STATUS,
-                    _xinetd_enabled_icon_text(enabled)[0])
-
-
 class GUIServicesList(GladeController):
 
     SVC_PAGE_NONE = 0
-    SVC_PAGE_SYSV = 1
-    SVC_PAGE_XINETD = 2
     SVC_PAGE_SYSTEMD = 3
 
     _service_xml_widgets = (
@@ -563,7 +412,6 @@ class GUIServicesList(GladeController):
         self.inhibit_recursion = False
 
         self.current_service = None
-        self.xinetd_service = None
         self.service_painters = {}
 
         super(GUIServicesList, self).__init__(xml)
@@ -673,11 +521,6 @@ class GUIServicesList(GladeController):
         if isinstance(service, SystemDService):
             self.servicesDetailsNotebook.set_current_page(
                     self.SVC_PAGE_SYSTEMD)
-        elif isinstance(service, services.SysVService):
-            self.servicesDetailsNotebook.set_current_page(self.SVC_PAGE_SYSV)
-            self._update_runlevel_menu()
-        elif isinstance(service, services.XinetdService):
-            self.servicesDetailsNotebook.set_current_page(self.SVC_PAGE_XINETD)
         else:
             self.servicesDetailsNotebook.set_current_page(self.SVC_PAGE_NONE)
         self._set_widgets_sensitivity()
@@ -715,19 +558,7 @@ class GUIServicesList(GladeController):
                 sensitive = is_enabled not in (SVC_ENABLED_NO, 'disabled')
         elif wname in ("serviceCustomize", "serviceStart", "serviceStop",
                        "serviceRestart"):
-            if isinstance(service, services.SysVService):
-                if service.status == SVC_STATUS_REFRESHING:
-                    sensitive = False
-                elif wname == "serviceCustomize":
-                    sensitive = True
-                elif wname == "serviceStart":
-                    sensitive = service.status != SVC_STATUS_RUNNING
-                elif wname == "serviceStop":
-                    sensitive = service.status in (SVC_STATUS_UNKNOWN,
-                            SVC_STATUS_RUNNING)
-                elif wname == "serviceRestart":
-                    sensitive = service.status == SVC_STATUS_RUNNING
-            elif isinstance(service, SystemDService):
+            if isinstance(service, SystemDService):
                 astate = service.ActiveState
                 if wname == 'serviceCustomize':
                     sensitive = False
@@ -768,25 +599,12 @@ class GUIServicesList(GladeController):
         else:
             raise KeyError("change: %d", change)
 
-    def _update_xinetd_service_entries(self):
-        for (service, painter) in self.service_painters.iteritems():
-            if isinstance(service, services.XinetdService):
-                painter.paint()
-
     def on_service_added(self, service):
-        # eats legacy SysVService, XinetdService and new-style SystemDService
-        # instances
+        # eats new-style SystemDService instances
 
         self.servicesTreeStore.add_service(service)
         self.service_painters[service] = GUIServiceEntryPainter(self, service)
         self.service_painters[service].paint()
-        if service.name == "xinetd" and isinstance(service,
-                (SystemDService, services.SysVService)):
-            self.xinetd_service = service
-            if isinstance(self.current_service, services.XinetdService):
-                GUIServicesDetailsPainter(self, self.current_service).\
-                        paint_details()
-            self._update_xinetd_service_entries()
 
         if not self._enabled:
             iter = self.servicesTreeStore.get_iter_first()
@@ -853,13 +671,6 @@ class GUIServicesList(GladeController):
         except KeyError:
             pass
 
-        if service == self.xinetd_service:
-            self.xinetd_service = None
-            if isinstance(self.current_service, services.XinetdService):
-                GUIServicesDetailsPainter(self, self.current_service).\
-                        paint_details()
-            self._update_xinetd_service_entries()
-
     def on_service_conf_updating(self, service):
         self.service_painters[service].paint()
         self._set_widgets_sensitivity()
@@ -884,8 +695,6 @@ class GUIServicesList(GladeController):
         self.service_painters[service].paint()
         if service == self.current_service:
             GUIServicesDetailsPainter(self, service).paint_details()
-            if isinstance(service, services.SysVService):
-                self._update_runlevel_menu()
         self._set_widgets_sensitivity()
 
     def on_service_status_updating(self, service):
@@ -897,11 +706,6 @@ class GUIServicesList(GladeController):
             self.service_painters[service].paint()
             if service == self.current_service:
                 GUIServicesDetailsPainter(self, service).paint_details()
-            if service == self.xinetd_service:
-                if isinstance(self.current_service, services.XinetdService):
-                    GUIServicesDetailsPainter(self, self.current_service).\
-                            paint_details()
-                self._update_xinetd_service_entries()
         else:
             # service might have been deleted or not shown (systemd units that
             # are not "loaded")
@@ -989,8 +793,6 @@ class MainWindow(GladeController):
         'helpContents',
         'helpContentsButton',
         'servicesDetailsNotebook',
-        'sysVServiceExplanationLabel',
-        'xinetdServiceExplanationLabel',
         'SystemDServiceExplanationLabel',
         'aboutDialog',
         )
@@ -1045,8 +847,6 @@ class MainWindow(GladeController):
                 'copyright_ends': config.copyright_ends})
 
 
-        slip.gtk.label_set_autowrap(self.sysVServiceExplanationLabel)
-        slip.gtk.label_set_autowrap(self.xinetdServiceExplanationLabel)
         slip.gtk.label_set_autowrap(self.SystemDServiceExplanationLabel)
 
     # ## Callbacks
@@ -1054,21 +854,6 @@ class MainWindow(GladeController):
     def on_programQuit_activate(self, *args):
         self.mainloop.quit()
 
-    def _xinetd_reload(self, service):
-        xinetd_service = self.servicesList.xinetd_service
-        if xinetd_service and (
-                isinstance(xinetd_service, SystemDService) and
-                    xinetd_service.ActiveState == 'active' or
-                isinstance(xinetd_service, services.SysVService) and
-                    xinetd_service.status == SVC_STATUS_RUNNING):
-            while service.is_chkconfig_running():
-                while self.maincontext.pending():
-                    self.maincontext.iteration()
-            if isinstance(xinetd_service, SystemDService):
-                self.systemd_manager.ReloadOrRestartUnit(xinetd_service.unit_id)
-            else:
-                xinetd_service.reload()
-
     def _systemd_change_unit_file(self, unit, action):
         assert action in ("enable", "disable")
 
@@ -1086,8 +871,6 @@ class MainWindow(GladeController):
                 self._systemd_change_unit_file(service, "enable")
             else:
                 service.enable()
-                if isinstance(service, services.XinetdService):
-                    self._xinetd_reload(service)
 
     # def on_serviceEnable_show_menu (self, *args):
     #    print "MainWindow.on_serviceEnable_show_menu (%s)" % ', '.join (map (lambda x: str(x), args))
@@ -1099,8 +882,6 @@ class MainWindow(GladeController):
                 self._systemd_change_unit_file(service, "disable")
             else:
                 service.disable()
-                if isinstance(service, services.XinetdService):
-                    self._xinetd_reload(service)
 
     def on_serviceCustomize_activate(self, *args):
         service = self.servicesList.current_service
@@ -1219,21 +1000,7 @@ use_dbus: Whether or not to access privi
             print >> sys.stderr, "Exiting."
             sys.exit(1)
 
-        if not systemd_manager:
-            print >> sys.stdout, "Couldn't acquire connection to systemd. Falling back to legacy SysV scheme."
-            herder_classes = serviceherders.herder_classes
-        else:
-            # filter out SysV service herder as systemd supplants its
-            # functionality
-            herder_classes = [ x for x in serviceherders.herder_classes
-                    if "sysv" not in x.__name__.lower() ]
-
         self.serviceherders = []
-        for cls in herder_classes:
-            if not self.use_dbus:
-                self.serviceherders.append(cls(mon=self._filemon))
-            else:
-                self.serviceherders.append(cls(bus=self._bus))
 
         self.mainWindow = MainWindow(mainloop=self.mainloop,
                                      serviceherders=self.serviceherders,
@@ -1250,8 +1017,6 @@ use_dbus: Whether or not to access privi
 
     def direct_init(self):
         import gamin
-        import scservices.core.legacy.serviceherders as serviceherders
-        import scservices.core.legacy.services as services
         self._filemon = gamin.WatchMonitor()
         self._filemon_fd = self._filemon.get_fd()
         gobject.io_add_watch(self._filemon_fd, gobject.IO_IN |
