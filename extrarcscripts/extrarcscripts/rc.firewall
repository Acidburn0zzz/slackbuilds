#!/bin/sh
#
# copyright (c) the KMyFirewall developers 2001-2007
# Please report bugs to: Christian Hubinger <chubinegr@irrsinnig.org>
#
# This program is distributed under the terms of the GPL v2
#
# KMyFirewall v1.1.1
# This is an automatic generated file DO NOT EDIT
#
# Configuration created for My Local Computer [127.0.0.1]
#

startFirewall() {

echo -n "Starting iptables (created by KMyFirewall)...       "
if [ "$verbose" = "1" ]; then
echo -n "
Loading needed modules...          "
fi


$MOD ip_tables 
$MOD ip_conntrack 
$MOD ipt_LOG 
$MOD ipt_limit 
$MOD ipt_state 
$MOD ip_conntrack_ftp
$MOD ip_conntrack_irc

$MOD iptable_filter
if [ "$verbose" = "1" ]; then
echo "Done."
fi



#  Define all custom chains
if [ "$verbose" = "1" ]; then
echo -n "Create custom chains...       "
fi



#  Create Chain: ANTISPOOF
$IPT -t filter -N ANTISPOOF || { status="1"; echo "Setting up Chain: ANTISPOOF FAILED !!!"; echo "Ann Error occoured! Clearing rules"; stopFirewall; exit 1; }

#  Create Chain: SERVICES
$IPT -t filter -N SERVICES || { status="1"; echo "Setting up Chain: SERVICES FAILED !!!"; echo "Ann Error occoured! Clearing rules"; stopFirewall; exit 1; }

#  Create Chain: ICMP_FILTER
$IPT -t filter -N ICMP_FILTER || { status="1"; echo "Setting up Chain: ICMP_FILTER FAILED !!!"; echo "Ann Error occoured! Clearing rules"; stopFirewall; exit 1; }

#  Create Chain: TCP_CHECKS
$IPT -t filter -N TCP_CHECKS || { status="1"; echo "Setting up Chain: TCP_CHECKS FAILED !!!"; echo "Ann Error occoured! Clearing rules"; stopFirewall; exit 1; }

#  Create Chain: LOCAL_LANS
$IPT -t filter -N LOCAL_LANS || { status="1"; echo "Setting up Chain: LOCAL_LANS FAILED !!!"; echo "Ann Error occoured! Clearing rules"; stopFirewall; exit 1; }

#  Create Chain: XAPPS
$IPT -t filter -N XAPPS || { status="1"; echo "Setting up Chain: XAPPS FAILED !!!"; echo "Ann Error occoured! Clearing rules"; stopFirewall; exit 1; }

if [ "$verbose" = "1" ]; then
echo "  Done."
fi



#  Rules:
if [ "$verbose" = "1" ]; then
echo "Settup Rules in Table FILTER:"
fi




#  Define Rules for Chain: INPUT
if [ "$verbose" = "1" ]; then
echo "Create Rules for Chain: INPUT"
fi

                    
$IPT -t filter -A INPUT --match state --state RELATED,ESTABLISHED -j ACCEPT  || { status="1"; echo " Setting up Rule: CONNTRACK FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -A INPUT --in-interface lo -j ACCEPT  || { status="1"; echo " Setting up Rule: LOOPBACK FAILED! Clearing Rules!";  stopFirewall; exit 1; }

if [ "$verbose" = "1" ]; then
  echo "Skipping Disabled Rule FWD_SERVICES!!!"
fi
 true || { status="1"; echo " Setting up Rule: FWD_SERVICES FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -A INPUT -j ICMP_FILTER  || { status="1"; echo " Setting up Rule: FWD_ICMP_FILTER FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -A INPUT -j ANTISPOOF  || { status="1"; echo " Setting up Rule: FWD_ANTISPOOF FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -A INPUT -j TCP_CHECKS  || { status="1"; echo " Setting up Rule: FWD_TCP_CHECKS FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -A INPUT -j XAPPS  || { status="1"; echo " Setting up Rule: FWD_XAPPS FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -P INPUT DROP || { status="1"; echo " Setting up Rule: Chain: INPUT Default Target FAILED! Clearing Rules!";  stopFirewall; exit 1; }


#  Define Rules for Chain: OUTPUT
if [ "$verbose" = "1" ]; then
echo "Create Rules for Chain: OUTPUT"
fi

                    
$IPT -t filter -P OUTPUT ACCEPT || { status="1"; echo " Setting up Rule: Chain: OUTPUT Default Target FAILED! Clearing Rules!";  stopFirewall; exit 1; }


#  Define Rules for Chain: FORWARD
if [ "$verbose" = "1" ]; then
echo "Create Rules for Chain: FORWARD"
fi

                    
$IPT -t filter -P FORWARD DROP || { status="1"; echo " Setting up Rule: Chain: FORWARD Default Target FAILED! Clearing Rules!";  stopFirewall; exit 1; }


#  Define Rules for Chain: ANTISPOOF
if [ "$verbose" = "1" ]; then
echo "Create Rules for Chain: ANTISPOOF"
fi

                    
$IPT -t filter -A ANTISPOOF --in-interface ! lo --source 127.0.0.0/8 -j DROP  || { status="1"; echo " Setting up Rule: loopback_spoof FAILED! Clearing Rules!";  stopFirewall; exit 1; }


#  Define Rules for Chain: SERVICES
if [ "$verbose" = "1" ]; then
echo "Create Rules for Chain: SERVICES"
fi

                    
if [ "$verbose" = "1" ]; then
  echo "Skipping Disabled Rule DNS!!!"
fi
 true || { status="1"; echo " Setting up Rule: DNS FAILED! Clearing Rules!";  stopFirewall; exit 1; }


#  Define Rules for Chain: ICMP_FILTER
if [ "$verbose" = "1" ]; then
echo "Create Rules for Chain: ICMP_FILTER"
fi

                    
$IPT -t filter -A ICMP_FILTER -p icmp --icmp-type network-unreachable -j ACCEPT  || { status="1"; echo " Setting up Rule: network_unreachable FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -A ICMP_FILTER -p icmp --icmp-type echo-reply -j ACCEPT  || { status="1"; echo " Setting up Rule: ping_reply FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -A ICMP_FILTER -p icmp --icmp-type host-unreachable -j ACCEPT  || { status="1"; echo " Setting up Rule: host_unreachable FAILED! Clearing Rules!";  stopFirewall; exit 1; }


#  Define Rules for Chain: TCP_CHECKS
if [ "$verbose" = "1" ]; then
echo "Create Rules for Chain: TCP_CHECKS"
fi

                    
$IPT -t filter -A TCP_CHECKS -p tcp --tcp-flags ACK,PSH PSH -j DROP  || { status="1"; echo " Setting up Rule: tcp_flags3 FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -A TCP_CHECKS -p tcp --tcp-flags ACK,URG URG -j DROP  || { status="1"; echo " Setting up Rule: tcp_flags4 FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -A TCP_CHECKS -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP  || { status="1"; echo " Setting up Rule: tcp_flags5 FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -A TCP_CHECKS -p tcp --tcp-flags SYN,RST SYN,RST -j DROP  || { status="1"; echo " Setting up Rule: tcp_flags6 FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -A TCP_CHECKS -p tcp --tcp-flags FIN,RST FIN,RST -j DROP  || { status="1"; echo " Setting up Rule: tcp_flags7 FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -A TCP_CHECKS -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP  || { status="1"; echo " Setting up Rule: tcp_nmapXmas FAILED! Clearing Rules!";  stopFirewall; exit 1; }


#  Define Rules for Chain: LOCAL_LANS
if [ "$verbose" = "1" ]; then
echo "Create Rules for Chain: LOCAL_LANS"
fi

                    
$IPT -t filter -A LOCAL_LANS --source 192.168.0.0/24 -j ACCEPT  || { status="1"; echo " Setting up Rule: MyNET FAILED! Clearing Rules!";  stopFirewall; exit 1; }


#  Define Rules for Chain: XAPPS
if [ "$verbose" = "1" ]; then
echo "Create Rules for Chain: XAPPS"
fi

                    
$IPT -t filter -A XAPPS -p tcp --match multiport --destination-ports 8080,4433 -j ACCEPT  || { status="1"; echo " Setting up Rule: httpd FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -A XAPPS -p tcp --match multiport --destination-ports 46610,46620,2234 -j ACCEPT  || { status="1"; echo " Setting up Rule: emuleTCP FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -A XAPPS -p udp --match multiport --destination-ports 46662,46623,46720,44440 -j ACCEPT  || { status="1"; echo " Setting up Rule: ShareUDP FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -A XAPPS -p tcp --destination-port 13327 -j ACCEPT  || { status="1"; echo " Setting up Rule: DaimoninTCP FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -A XAPPS -p tcp --match multiport --destination-ports 5222,8010 -j ACCEPT  || { status="1"; echo " Setting up Rule: JabberTCP FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -A XAPPS -p tcp --destination-port 46881:46889 -j ACCEPT  || { status="1"; echo " Setting up Rule: BittorentTCP FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -A XAPPS -p udp --destination-port 46881:46889 -j ACCEPT  || { status="1"; echo " Setting up Rule: BittorrentUDP FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -A XAPPS -p tcp --match multiport --destination-ports 137,138,139,445 -j ACCEPT  || { status="1"; echo " Setting up Rule: smbTCP FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -A XAPPS -p udp --match multiport --destination-ports 137,138,139,445 -j ACCEPT  || { status="1"; echo " Setting up Rule: smbUDP FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -A XAPPS -p tcp --match multiport --destination-ports 59,1080,45000,45001 -j ACCEPT  || { status="1"; echo " Setting up Rule: ircTCP FAILED! Clearing Rules!";  stopFirewall; exit 1; }

$IPT -t filter -A XAPPS -p tcp --destination-port 13674 -j ACCEPT  || { status="1"; echo " Setting up Rule: ssh FAILED! Clearing Rules!";  stopFirewall; exit 1; }


if [ "$verbose" = "1" ]; then
echo -n "Disable IP Forwarding.              "
fi


echo 0 > /proc/sys/net/ipv4/ip_forward
if [ "$verbose" = "1" ]; then
echo "Done."
fi


if [ "$verbose" = "1" ]; then
echo -n "Enable Reverse Path Filtering      "
fi



for i in /proc/sys/net/ipv4/conf/*/rp_filter ; do
echo 1 > $i 
done
if [ "$verbose" = "1" ]; then
echo "Done."
fi


if [ "$verbose" = "1" ]; then
echo -n "Enable log_martians (logging).             "
fi



for i in /proc/sys/net/ipv4/conf/*/log_martians ; do
echo 1 > $i 
done
if [ "$verbose" = "1" ]; then
echo "Done."
fi


if [ "$verbose" = "1" ]; then
echo -n "Enable Syn Cookies.          "
fi



echo 1 > /proc/sys/net/ipv4/tcp_syncookies
if [ "$verbose" = "1" ]; then
echo "Done."
fi


echo Done.
}
stopFirewall() {
  echo -n "Clearing iptables (created by KMyFirewall)...       "

  $IPT -t filter -F || status="1"
  $IPT -t filter -X || status="1"
  $IPT -t filter -P INPUT ACCEPT || status="1"
  $IPT -t filter -P OUTPUT ACCEPT || status="1"
  $IPT -t filter -P FORWARD ACCEPT || status="1"

  echo "Done."

}
IPT="/usr/sbin/iptables"
MOD="/sbin/modprobe"
status="0"
verbose="0"
action="$1"
if [ "$1" = "-v" ]; then
    verbose="1"
fi

if [ "$1" = "--verbose" ]; then
    verbose="1"
fi

if [ "$verbose" = "1" ]; then
    if [ "$2" = "" ]; then
    echo "Usage: sh kmyfirewall.sh [-v|--verbose] { start | stop | restart }"
    exit 1
  fi
action="$2"
fi

case $action in
  start)
  stopFirewall
  startFirewall
  ;;
  stop)
  stopFirewall
  ;;
  restart)
  stopFirewall
  startFirewall
  ;;
  *)
  echo "Invalid action!
Usage: sh kmyfirewall.sh [-v|--verbose] { start | stop | restart }"
  ;;
  esac

if [ "$status" = "1" ]; then
  exit 1
else
  exit 0
fi


