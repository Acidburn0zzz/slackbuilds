#!/bin/sh
#-- xfce for Slackware --
# Heavily based on the Slackware 11.0 SlackBuild
# http://www.xfce.org/index.php

# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ xfce.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008, 2009, 2010 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
# Copyright 2003  Slackware Linux, Inc., Concord, CA, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.xfce.org

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

NAME=xfce

TMPD=${TMP}/${NAME}-build-dir
if [ -d ${TMPD} ]; then
  rm -rf ${TMPD}
else
  mkdir -p ${TMPD}
fi
PKG=${PKG:-${TMPD}/package-${NAME}}

PKGVER=${PKGVER:-4.6.1}
SVER="$(echo ${PKGVER} | cut -d. -f1-2)"
VERSION=${VERSION:-4.6.1}

# gtk-xfce-engine
GXEVER=${GXEVER:-2.6.0}
# Thunar
THUVER=${THUVER:-1.0.1}
# exo
EXOVER=${EXOVER:-0.3.106}
# xfce4-panel
XFPVER=${XFPVER:-4.6.3}
# xfce4-dev-tools
DEVVER=${DEVVER:-4.6.0}
# xfce4-settings
SETVER=${SETVER:-4.6.4}
# xfwm
XFWMTVER=${XFWMTVER:-4.6.0}
# Mousepad
MPVER=${MPVER:-0.2.16}
# Terminal
TERMVER=${TERMVER:-0.4.3}
SLKDIST=${SLKDIST:-Slackware}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-10}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${PKGVER} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

PERLVENDORARCH=$(eval "$(perl -V:vendorarch)"; echo ${vendorarch})
PERLVENDORLIB=$(eval "$(perl -V:vendorlib)"; echo ${vendorlib})
PERLARCHLIB=$(eval "$(perl -V:archlib)"; echo ${archlib})
PERLVER=$(eval "$(perl -V:version)"; echo ${version})

# Set to YES to enable hal support
SB_HAL=${SB_HAL:-YES}
# Set to YES to enable some gnome things support
SB_GNOME=${SB_GNOME:-NO}
# Set to YES to enable gladeui support
SB_GLADEUI=${SB_GLADEUI:-NO}
# Set to YES to run pulseaudio on start
SB_PA=${SB_PA:-NO}
# Set to YES to enable support for slack-artwork
SB_SLKART=${SB_SLKART:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www.xfce.org/archive"

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

# Kludge factor ahead
mkdir -p ${PKG}/usr/man ${PKG}/usr/share ${PKG}/usr/doc
( cd ${PKG}/usr/share ; ln -sf ../man . ; ln -sf ../doc . )

SRCDIRSXFCE="
libxfce4util%${VERSION} \
libxfce4menu%${VERSION} \
xfconf%${VERSION} \
libxfcegui4%${VERSION} \
exo%${EXOVER} \
xfce4-panel%${XFPVER} \
gtk-xfce-engine%${GXEVER} \
Thunar%${THUVER} \
xfce-utils%${VERSION} \
xfce4-appfinder%${VERSION} \
xfce4-dev-tools%${DEVVER} \
xfce4-mixer%${VERSION} \
xfce4-session%${VERSION} \
xfce4-settings%${SETVER} \
xfdesktop%${VERSION} \
xfwm4%${VERSION} \
"

SRCDIRSARC="
xfprint%${VERSION} \
"

SRCDIRSART="
xfwm4-themes%${XFWMTVER} \
"

SRCDIRSAPPS="
mousepad%${MPVER} \
orage%${VERSION} \
Terminal%${TERMVER} \
"

mkdir -p ${CWD}/src
# if source is not present, download in source rootdir if possible, or in /tmp

SB_DOWN(){
  PTYPE=$1
  PNAME=$2
  PVERSION=$3
  PSVER="$(echo ${PVERSION} | cut -d. -f1-2)"
  file=${PNAME}-${PVERSION}.tar.bz2
  [ "${PNAME}" = "Thunar" ] && PNAME=thunar
  [ "${PNAME}" = "Terminal" ] && PNAME=terminal
  DL_URLA="${DL_URL}/src/${PTYPE}/${PNAME}/${PSVER}"
  DL_URLB="${DL_URL}/${NAME}-${VERSION}/src"
  test -r ${CWD}/src/${file} || wget -P ${CWD}/src ${DL_OPTS} ${DL_URLA}/${file} || \
    wget -P ${CWD}/src ${DL_OPTS} ${DL_URLB}/${file} || exit 1
  test -r ${CWD}/src/${file}.md5 || wget -P ${CWD}/src ${DL_OPTS} ${DL_URLA}/${file}.md5 || \
    wget -P ${CWD}/src ${DL_OPTS} ${DL_URLB}/${file}.md5 || exit 1
  ( cd src || exit 1
    if [ "$(md5sum ${file} )" != "$(head -n1 ${file}.md5)" ] ;then
      echo "md5 error with ${file}. Delete it and try again."
      exit 1
    fi
  ) || exit 1
}

for BASENAME in ${SRCDIRSXFCE} ;do
  SPNAME=$(echo ${BASENAME} | cut -d% -f1)
  SPVERSION=$(echo ${BASENAME} | cut -d% -f2)
  SB_DOWN xfce ${SPNAME} ${SPVERSION} || exit 1
done
for BASENAME in ${SRCDIRSARC} ;do
  SPNAME=$(echo ${BASENAME} | cut -d% -f1)
  SPVERSION=$(echo ${BASENAME} | cut -d% -f2)
  SB_DOWN archive ${SPNAME} ${SPVERSION} || exit 1
done
for BASENAME in ${SRCDIRSART} ;do
  SPNAME=$(echo ${BASENAME} | cut -d% -f1)
  SPVERSION=$(echo ${BASENAME} | cut -d% -f2)
  SB_DOWN art ${SPNAME} ${SPVERSION} || exit 1
done
for BASENAME in ${SRCDIRSAPPS} ;do
  SPNAME=$(echo ${BASENAME} | cut -d% -f1)
  SPVERSION=$(echo ${BASENAME} | cut -d% -f2)
  SB_DOWN apps ${SPNAME} ${SPVERSION} || exit 1
done

cd ${TMPD} || exit 1

# Untar and test patches before
for BASENAME in ${SRCDIRSXFCE} ${SRCDIRSARC} ${SRCDIRSART} ${SRCDIRSAPPS} ;do
  SPNAME=$(echo ${BASENAME} | cut -d% -f1)
  SPVERSION=$(echo ${BASENAME} | cut -d% -f2)
  ( file=${SPNAME}-${SPVERSION}.tar.bz2
    rm -rf ${SPNAME}-${SPVERSION}
    echo "tar -xjf ${file}"
    tar -xjf ${CWD}/src/${file} || exit 1

    cd ${SPNAME}-${SPVERSION} || exit 1
    chmod -R u+w,go+r-w,a-s .
    if [ -r ${CWD}/apply-patches.sh ]; then
      . ${CWD}/apply-patches.sh || exit 1
    fi
  ) || exit 1
done

unset SB_HALOPTS SB_GNOMEOPTS SB_GLADEUI
if [ "${SB_HAL}" = "YES" ] ;then
  SB_HALOPTS="hal"
else
  SB_HALOPTS="none"
fi

[ "{SB_GNOME}" = "YES" ] || SB_GNOMEOPTS='--disable-gnome-thumbnailers'
[ "{SB_GLADEUI}" = "YES" ] || SB_GLADEUI='--disable-gladeui'

for BASENAME in ${SRCDIRSXFCE} ${SRCDIRSARC} ${SRCDIRSART} ${SRCDIRSAPPS} ;do
  SPNAME=$(echo ${BASENAME} | cut -d% -f1)
  SPVERSION=$(echo ${BASENAME} | cut -d% -f2)
  ( file=${SPNAME}-${SPVERSION}.tar.bz2
    echo "+===========================+"
    echo "| ${SPNAME}-${SPVERSION} |"
    echo "+===========================+"
    
    cd ${SPNAME}-${SPVERSION} || exit 1

    SB_EXNJOBS=${NJOBS}

    [ "${SPNAME}" = "libxfcegui4" ] && SB_EXTRAOPT="${SB_GLADEUI}"
    [ "${SPNAME}" = "Thunar" ] && SB_EXTRAOPT="--with-volume-manager=${SB_HALOPTS} ${SB_GNOMEOPTS}"

    if [ "${SPNAME}" = "xfce-utils" ] && [ -f "${CWD}/${SLKDIST}" ] ; then
      mkdir -p ${PKG}/usr/share/xfce4
      cat ${CWD}/${SLKDIST} > ./${SLKDIST}
      cat ${CWD}/${SLKDIST} > ${PKG}/usr/share/xfce4/${SLKDIST}
      SB_EXTRAOPT="--with-vendor-info=${SLKDIST}"
    fi

    [ "${SPNAME}" = "xfconf" ] && SB_EXTRAOPT="--with-perl-options=INSTALLDIRS="vendor""
    
    chmod -R u+w,go+r-w,a-s .

    export PATH=${PATH}:${PKG}/usr/bin
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${PKG}/usr/lib${LIBDIRSUFFIX}

    # Dynamic cppflags
    for di in ${PKG}/usr/include/* ${PKG}/usr/include/xfce4/* ; do
      if [ -d ${di} ] ;then
        XFECPPFLAGS="-I${di} ${XFECPPFLAGS}"
      fi
    done

    CFLAGS="${SLKCFLAGS}" \
    CXXFLAGS="${SLKCFLAGS}" \
    LDFLAGS="-L${PKG}/usr/lib${LIBDIRSUFFIX} ${LDFLAGS}" \
    CPPFLAGS="-I${PKG}/usr/include ${XFECPPFLAGS} ${CPPFLAGS}" \
    PKG_CONFIG_PATH="${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig" \
    ./configure \
      --prefix=/usr \
      --libdir=/usr/lib${LIBDIRSUFFIX} \
      --sysconfdir=/etc/xfce \
      --mandir=/usr/man \
      --docdir=/usr/doc/${NAME}-${VERSION}/${SPNAME}-${SPVERSION} \
      --disable-silent-rules \
      --enable-compositor \
      --disable-rpath \
      --enable-static=no \
      --enable-xinerama ${SB_EXTRAOPT} \
      --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

    sed -i 's|^hardcode_libdir_flag_spec=.*|hardcode_libdir_flag_spec=""|g' libtool
    sed -i 's|^runpath_var=LD_RUN_PATH|runpath_var=DIE_RPATH_DIE|g' libtool

    unset SB_EXTRAOPT 
    make -j${NJOBS} || make || exit 1

    make install DESTDIR=${PKG} || exit 1
    find ${PKG}/usr/lib${LIBDIRSUFFIX} -name "*.la" |xargs rm -f
    mkdir -p ${DOCDIR}/${SPNAME}-${SPVERSION}
    cp -a \
      AUTHORS BUGS COMPOSITOR COPYING* FAQ HACKING NEWS \
      NOTES README* THANKS TODO example.gtkrc-2.0 \
      ${DOCDIR}/${SPNAME}-${SPVERSION} 2> /dev/null || exit 0
    ) || exit 1
done

find ${PKG}/usr/lib*/perl*/ -type f \( -name perllocal.pod -o -name .packlist \) -exec rm -f {} \;
find ${PKG}/usr/lib*/perl*/ -type f -name '*.bs' -a -size 0 -exec rm -f {} ';'
find ${PKG}/usr/lib*/perl*/ -type d -depth -exec rmdir {} 2>/dev/null ';'
chmod -R u+w ${PKG}/usr/lib*/perl*/

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Le kludge r'mvoal
( cd ${PKG}/usr/share ; rm -f doc man )

# The Rodent icon theme isn't xdg compliant, so it spews errors quite often
# and just flat breaks some things here and there, so the Xfce team elected
# not to ship it with 4.6.0.   In the meantime, we'll default to Tango.
sed -i s/Rodent/Tango/ \
  ${PKG}/etc/xfce/xdg/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml || exit 1

if [ "${SB_SLKART}" = "YES" ] ;then
  rm -f ${PKG}/etc/xfce/xdg/xfce4/panel/xfce4-menu-5.rc
  rm -f ${PKG}/etc/xfce/xdg/xfce4/xfconf/xfce-perchannel-xml/xfce4-desktop.xml
  rm -f ${PKG}/etc/xfce/xdg/xfce4/xfconf/xfce-perchannel-xml/xfce4-session.xml
  rm -f ${PKG}/etc/xfce/xdg/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml
fi

( cd ${PKG}/etc/xfce/xdg/xfce4
  for f in panel/* xfconf/xfce-perchannel-xml/* ;do
    mv ${f} ${f}.new
  done
)

cat > ${PKG}/etc/xfce/xfcerc.new <<'EOF'
# Freedesktop environment variables

if  [ -z "${XDG_CONFIG_DIRS}" ]; then
  XDG_CONFIG_DIRS="/etc/xfce/xdg:/etc/xdg"
else
  XDG_CONFIG_DIRS="/etc/xfce/xdg:/etc/xdg:${XDG_CONFIG_DIRS}"
fi

if [ -z "${XDG_MENU_PREFIX}" ] ; then
  XDG_MENU_PREFIX="xfce-"
  export XDG_MENU_PREFIX
fi

EOF

SB_DFI(){
desktop-file-install --delete-original --vendor="" \
  --dir ${PKG}/usr/share/applications \
  --remove-key="Encoding" \
  --remove-category="Application" $@
}

SB_DFI \
  ${PKG}/usr/share/applications/*.desktop || exit 1

SB_DFI \
  --remove-category="Utility" \
  ${PKG}/usr/share/applications/Thunar.desktop || exit 1

SB_DFI \
  --add-category="Utility" \
  --add-only-show-in="XFCE" \
  ${PKG}/usr/share/applications/xfcalendar.desktop || exit 1

for file in audacious-playlist bluetooth ;do
  zcat ${CWD}/thunar-sendto-${file}.desktop.gz > \
    ${PKG}/usr/share/Thunar/sendto/thunar-sendto-${file}.desktop || exit 1
done

rm -f ${PKG}/usr/share/xsessions/xfce.desktop
mkdir -p ${PKG}/usr/share/xsessions
zcat ${CWD}/xfce4.desktop.gz > \
     ${PKG}/usr/share/xsessions/xfce4.desktop || exit 1

( mkdir -p ${PKG}/etc/X11/xinit
  cd ${PKG}/etc/X11/xinit
  ln -sf ../../xfce/xdg/xfce4/xinitrc xinitrc.xfce
  chmod 755 ../../xfce/xdg/xfce4/xinitrc
) || exit 1

# We don't want any of those icon caches
find ${PKG}/usr/share/icons -type f -name "index-theme.cache" -exec rm -f {} \;

# Do a few fixups - Terminal and Thunar ignore --docdir
( cd ${PKG}/usr/doc
  mv Thunar/* ${DOCDIR}/Thunar-${THUVER}
  mv Terminal/* ${DOCDIR}/Terminal-${TERMVER}
  rm -rf Thunar Terminal
  ln -sf ${NAME}-${VERSION}/Thunar-${THUVER} Thunar
  ln -sf ${NAME}-${VERSION}/Terminal-${TERMVER} Terminal
)
find ${DOCDIR} -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR} -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database 1> /dev/null 2> /dev/null
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/gtk-update-icon-cache -q usr/share/icons/hicolor > /dev/null 2>&1
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

# Replicate slackbuild and patches
if [ "${SB_REP}" = "YES" ] ;then
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/*.desktop.gz ${CWD}/${SLKDIST} \
                 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/* \
                 ${SBDIR}/patches/
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMPD} ]; then
    rm -rf ${TMPD} && echo "${TMPD} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
