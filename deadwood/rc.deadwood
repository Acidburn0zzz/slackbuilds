#!/bin/bash
# Deadwood recursive caching DNS resolver.  This shell script takes care of starting and stopping Deadwood daemon

# Copyright 2005-2006 Sam Trenholme

# TERMS

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:

# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.

# This software is provided 'as is' with no guarantees of correctness or
# fitness for purpose.

# This is a script which stops and starts the MaraDNS Deadwood process
# The first line points to bash because I don't have a true Solaris /bin/sh
# to test this against.

# The following is a pointer to the MaraDNS program
if [ -x "/usr/sbin/Deadwood" ] ; then
  DEADWOOD="/usr/sbin/Deadwood"
else
  echo "unable to find Deadwood"
  exit 1
fi

# The following is a pointer to the duende daemonizer
if [ -x "/usr/sbin/duende" ] ; then
  DUENDE="/usr/sbin/duende"
else
  echo "unable to find duende"
  exit 1
fi

prog=$(basename ${DEADWOOD})
lockfile=/var/lock/subsys/${prog}
pidfile=/var/run/${prog}.pid

# The following is the directory we place MaraDNS log entries in
LOGDIR="/var/log"

DEADWOODRCS="/etc/maradns/dwood3rc"

PID=$(/sbin/pidof -o %PPID ${DEADWOOD})

RETVAL=0

start() {
  echo -n "Starting all Deadwood processes: "
  for rcfile in ${DEADWOODRCS} ; do
    #echo -n "${rcfile} "
    # Duende syslogs MaraDNS' output messages and daemonizes MaraDNS
    ${DUENDE} ${DEADWOOD} -f ${rcfile} || RETVAL=$?
  done
  if [ ${RETVAL} -eq 0 ] && echo $(/sbin/pidof Deadwood) > ${pidfile} && touch ${lockfile} ; then
    echo -e "\t\t\t\t[  OK  ]\r"
  else
    echo -e "\t\t\t\t[FAILED]\r"
  fi
  return ${RETVAL}
}

stop() {
  echo -n "Stopping Deadwood: "
  if [ -n "${PID}" ] ;then
    kill ${PID} &>/dev/null
    RETVAL=$?
  else
    RETVAL=1
  fi
  if [ ${RETVAL} -eq 0 ] && rm -f ${pidfile} && rm -f ${lockfile} ; then
    echo -e "\t\t\t\t\t\t[  OK  ]\r"
  else
    echo -e "\t\t\t\t\t\t[FAILED]\r"
  fi
  return ${RETVAL}
}

restart() {
  stop
  unset PID
  start
}

case "$1" in
  start|stop)
    $1
    ;;
  restart|reload)
    restart
    ;;
  condrestart)
    [ -f ${lockfile} ] && restart
    ;;
  status)
    if [ -f ${lockfile} ]; then
      echo "${prog} is running in pid(s) $(/sbin/pidof ${prog})."
    else
      echo "${prog} is not running."
    fi
    ;;
  *)
    echo "Usage: $0 {start|stop|status|restart|reload|condrestart}"
    exit 1
    ;;
esac

exit ${RETVAL}
