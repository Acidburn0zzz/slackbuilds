--- src/mediadec_ffmpeg.cpp.ffmpeg	2011-05-20 18:51:30.844277936 -0300
+++ src/mediadec_ffmpeg.cpp	2011-05-20 18:54:40.027236756 -0300
@@ -50,7 +50,7 @@ void PrintError(const wxString& msg, int
 	case AVERROR_INVALIDDATA:
 		wxLogError(wxT("%s: Error while parsing header"), msg.c_str());
 		break;
-	case AVERROR_NOFMT:
+	case AVERROR(EILSEQ):
 		wxLogError(wxT("%s: Unknown format"), msg.c_str());
 		break;
 	case AVERROR(EIO):
@@ -106,7 +106,7 @@ float wxFfmpegMediaDecoder::GetFrameAspe
 	for (int i=0; i<(int)m_formatCtx->nb_streams; i++) {
 		AVStream *st = m_formatCtx->streams[i];
 		AVCodecContext *enc = st->codec;
-		if (enc->codec_type == CODEC_TYPE_VIDEO) {
+		if (enc->codec_type == AVMEDIA_TYPE_VIDEO) {
 			if (st->sample_aspect_ratio.num)
 				frame_aspect_ratio = av_q2d(st->sample_aspect_ratio);
 			else if (enc->sample_aspect_ratio.num)
@@ -124,11 +124,11 @@ StreamType wxFfmpegMediaDecoder::GetStre
 	if (m_formatCtx == NULL || streamIndex >= m_formatCtx->nb_streams)
 		return stUNKNOWN;
 	switch (m_formatCtx->streams[streamIndex]->codec->codec_type) {
-	case CODEC_TYPE_VIDEO:
+	case AVMEDIA_TYPE_VIDEO:
 		return stVIDEO;
-	case CODEC_TYPE_AUDIO:
+	case AVMEDIA_TYPE_AUDIO:
 		return stAUDIO;
-	case CODEC_TYPE_SUBTITLE:
+	case AVMEDIA_TYPE_SUBTITLE:
 		return stSUBTITLE;
 	default:
 		break;
@@ -167,7 +167,7 @@ bool wxFfmpegMediaDecoder::OpenVideoDeco
 	// find the first video stream
 	m_videoStream = -1;
 	for (int i=0; i<(int)m_formatCtx->nb_streams; i++) {
-		if (m_formatCtx->streams[i]->codec->codec_type == CODEC_TYPE_VIDEO) {
+		if (m_formatCtx->streams[i]->codec->codec_type == AVMEDIA_TYPE_VIDEO) {
 			m_videoStream = i;
 			break;
 		}
