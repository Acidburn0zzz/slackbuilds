#!/bin/sh
#-- compiz for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ compiz.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008, 2009, 2010 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.go-compiz.org
# http://www.x.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=compiz
NAMEE=kde-desktop-effects
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-0.8.4}
VERE=${VERE:-0.0.6}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
DOCDIRE=${PKG}/usr/doc/${NAMEE}-${VERE}
SBDIR=${PKG}/usr/src/slackbuilds/xorg/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable gnome/kde support and extra configuration tools 
# (must be searched in the web)
SB_GNOME=${SB_GNOME:-YES}
SB_KDE=${SB_KDE:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCDIRE=${NAMEE}-${VERE}
SRCARCHIVE=${SRCDIR}.tar.bz2
SRCARCHIVEE=${SRCDIRE}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://xorg.freedesktop.org/releases/individual/app/${SRCARCHIVE}"
DL_URLB="http://releases.compiz-fusion.org/${VERSION}/${SRCARCHIVE}"
FEDORACVS=fedora-cvs.sh
FEDORABRANCH=${FEDORABRANCH:-devel}

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || wget ${DL_OPTS} ${DL_URLB} || exit 1
test -r ${CWD}/${SRCARCHIVE} || sh ${CWD}/${FEDORACVS} ${NAME} ${FEDORABRANCH} ${SRCARCHIVEE} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

if [ -f /etc/profile.d/qt3.sh ] ;then
  unset QTDIR QTINC QTLIB
  source /etc/profile.d/qt3.sh
else
  export QTDIR=/opt/kde3/lib${LIBDIRSUFFIX}/qt3
fi

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1
if [ "${SB_KDE}" = "YES" ] ;then
  tar -xvf ${CWD}/${SRCARCHIVEE} || exit 1
fi

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

zcat ${CWD}/kcfg.xslt.gz > metadata/kcfg.xslt || exit 1
zcat ${CWD}/kconfig.xslt.gz > metadata/kconfig.xslt || exit 1

if [ "${SB_GNOME}" = "YES" ] ;then
  SB_GNOMEOPTS="--enable-gnome --enable-schemas --enable-gnome-keybindings"
else
  SB_GNOMEOPTS="--disable-gnome --disable-schemas --disable-gnome-keybindings"
fi

if [ "${SB_KDE}" = "YES" ] ;then
  SB_KDEOPTS="--enable-kde --enable-kconfig"
else
  SB_KDEOPTS="--disable-kde --disable-kconfig"
fi

export CFLAGS="${SLKCFLAGS}"
export CXXFLAGS="${SLKCFLAGS}"

export CPPFLAGS="${CPPFLAGS} -I${PKG}/usr/include"

SB_CONFIGURE() {
  ./configure \
    --prefix=/usr \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --sysconfdir=/etc \
    --localstatedir=/var/lib \
    --infodir=/usr/info \
    --mandir=/usr/man \
    --docdir=/usr/doc/${NAME}-${VERSION} \
    --build=${SLKTARGET}-${SLKDTARGET}-linux
}

SB_CONFIGURE \
  --enable-librsvg \
  --disable-kde4 ${SB_KDEOPTS} ${SB_GNOMEOPTS} || exit 1

make -j${NJOBS} imagedir=/usr/share/pixmaps || exit 1

export GCONF_DISABLE_MAKEFILE_SCHEMA_INSTALL=1
make install DESTDIR=${PKG} || exit 1
unset GCONF_DISABLE_MAKEFILE_SCHEMA_INSTALL

zcat ${CWD}/compiz-gtk.sh > ${PKG}/usr/bin/compiz-gtk || exit 1
chmod 0755 ${PKG}/usr/bin/compiz-gtk 

if [ "${SB_KDE}" = "YES" ] ;then
  ( cd ${SRCDIRE} || exit 1
    install -m0755 kde-desktop-effects.sh ${PKG}/usr/bin/ || exit 1
    desktop-file-install --vendor="" \
      --dir=${PKG}/usr/share/applications/kde  \
      kde-desktop-effects.desktop
  
    iconlist="16 24 32 36 48 96"
    for i in ${iconlist}; do
      dir=${PKG}/usr/share/icons/hicolor/${i}\x${i}/apps
      mkdir -p ${dir}
      cp -p desktop-effects${i}.png ${dir}/kde-desktop-effects.png || exit 1
    done

  ) || exit 1
fi

find ${PKG} -name '*.la' -exec rm -f {} ';'
find ${PKG} -name '*.a' -exec rm -f {} ';'

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

cat > ${PKG}/usr/share/applications/compiz-gtk.desktop <<EOF
[Desktop Entry]
Type=Application
Name=Compiz
TryExec=compiz-gtk
Exec=compiz-gtk
NoDisplay=true
EOF

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING* ChangeLog LICENSE README NEWS THANKS TODO ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

if [ "${SB_KDE}" = "YES" ] ;then
  mkdir -p ${DOCDIRE}
  ( cd ${SRCDIRE} || exit 1
    cp -a ChangeLog COPYING README ${DOCDIRE}/
  )
  find ${DOCDIRE}/ -type d -print0 | xargs -0 chmod 0755
  find ${DOCDIRE}/ -type f -print0 | xargs -0 chmod 0644
fi

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

if [ "${SB_KDE}" = "YES" ] ;then
cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi

if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database -q usr/share/applications > /dev/null 2>&1
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/gtk-update-icon-cache -q usr/share/icons/hicolor > /dev/null 2>&1
fi

EOF
fi

if [ "${SB_GNOME}" = "YES" ] ;then
cat >> ${PKG}/install/doinst.sh <<EOF

if [ -x usr/bin/gconftool-2 ]; then
  export GCONF_CONFIG_SOURCE=\$(gconftool-2 --get-default-source)
  \${CHROOT} /usr/bin/gconftool-2 --makefile-install-rule \\
             etc/gconf/schemas/${NAME}-annotate.schemas \\
             etc/gconf/schemas/${NAME}-blur.schemas \\
             etc/gconf/schemas/${NAME}-clone.schemas \\
             etc/gconf/schemas/${NAME}-commands.schemas \\
             etc/gconf/schemas/${NAME}-core.schemas \\
             etc/gconf/schemas/${NAME}-cube.schemas \\
             etc/gconf/schemas/${NAME}-dbus.schemas \\
             etc/gconf/schemas/${NAME}-decoration.schemas \\
             etc/gconf/schemas/${NAME}-fade.schemas \\
             etc/gconf/schemas/${NAME}-fs.schemas \\
             etc/gconf/schemas/${NAME}-gconf.schemas \\
             etc/gconf/schemas/${NAME}-glib.schemas \\
             etc/gconf/schemas/${NAME}-gnomecompat.schemas \\
             etc/gconf/schemas/${NAME}-ini.schemas \\
             etc/gconf/schemas/${NAME}-inotify.schemas \\
             etc/gconf/schemas/${NAME}-kconfig.schemas \\
             etc/gconf/schemas/${NAME}-minimize.schemas \\
             etc/gconf/schemas/${NAME}-move.schemas \\
             etc/gconf/schemas/${NAME}-obs.schemas \\
             etc/gconf/schemas/${NAME}-place.schemas \\
             etc/gconf/schemas/${NAME}-png.schemas \\
             etc/gconf/schemas/${NAME}-regex.schemas \\
             etc/gconf/schemas/${NAME}-resize.schemas \\
             etc/gconf/schemas/${NAME}-rotate.schemas \\
             etc/gconf/schemas/${NAME}-scale.schemas \\
             etc/gconf/schemas/${NAME}-screenshot.schemas \\
             etc/gconf/schemas/${NAME}-svg.schemas \\
             etc/gconf/schemas/${NAME}-switcher.schemas \\
             etc/gconf/schemas/${NAME}-video.schemas \\
             etc/gconf/schemas/${NAME}-wall.schemas \\
             etc/gconf/schemas/${NAME}-water.schemas \\
             etc/gconf/schemas/${NAME}-wobbly.schemas \\
             etc/gconf/schemas/${NAME}-zoom.schemas \\
             etc/gconf/schemas/gwd.schemas &> /dev/null
fi

EOF
fi

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/${FEDORACVS} ${CWD}/*-gtk.sh.gz \
                 ${CWD}/*.xslt.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.gz \
                 ${SBDIR}/patches/
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
