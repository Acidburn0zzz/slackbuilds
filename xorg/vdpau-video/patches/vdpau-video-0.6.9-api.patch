diff -up src/vdpau_driver.c.api src/vdpau_driver.c
--- src/vdpau_driver.c.api	2010-06-22 18:10:28.175729820 -0300
+++ src/vdpau_driver.c	2010-06-22 18:11:40.691725964 -0300
@@ -219,7 +219,7 @@ static VAStatus vdpau_do_Initialize(VADr
     VdpStatus vdp_status;
     driver_data->vdp_device = VDP_INVALID_HANDLE;
     vdp_status = vdp_device_create_x11(
-        ctx->x11_dpy,
+        ctx->native_dpy,
         ctx->x11_screen,
         &driver_data->vdp_device,
         &driver_data->vdp_get_proc_address
@@ -334,14 +334,6 @@ static VAStatus vdpau_do_Initialize(VADr
     ctx->vtable.vaQueryDisplayAttributes    = vdpau_QueryDisplayAttributes;
     ctx->vtable.vaGetDisplayAttributes      = vdpau_GetDisplayAttributes;
     ctx->vtable.vaSetDisplayAttributes      = vdpau_SetDisplayAttributes;
-#if VA_CHECK_VERSION(0,30,0)
-    ctx->vtable.vaCreateSurfaceFromCIFrame  = vdpau_CreateSurfaceFromCIFrame;
-    ctx->vtable.vaCreateSurfaceFromV4L2Buf  = vdpau_CreateSurfaceFromV4L2Buf;
-    ctx->vtable.vaCopySurfaceToBuffer       = vdpau_CopySurfaceToBuffer;
-#else
-    ctx->vtable.vaSetSubpicturePalette      = vdpau_SetSubpicturePalette;
-    ctx->vtable.vaDbgCopySurfaceToBuffer    = vdpau_DbgCopySurfaceToBuffer;
-#endif
 
 #if USE_GLX
     VADriverVTableGLXP const glx_vtable     = VA_DRIVER_VTABLE_GLX(ctx);
diff -up src/vdpau_video_glx.c.api src/vdpau_video_glx.c
--- src/vdpau_video_glx.c.api	2010-06-22 18:12:09.119726593 -0300
+++ src/vdpau_video_glx.c	2010-06-22 18:12:22.657944144 -0300
@@ -213,7 +213,7 @@ static int check_extensions(vdpau_driver
     const char *glx_extensions;
 
     gl_extensions  = (const char *)glGetString(GL_EXTENSIONS);
-    glx_extensions = glXQueryExtensionsString(ctx->x11_dpy, ctx->x11_screen);
+    glx_extensions = glXQueryExtensionsString(ctx->native_dpy, ctx->x11_screen);
 
     if (!find_string("GL_ARB_texture_non_power_of_two", gl_extensions, " "))
         return -1;
@@ -381,16 +381,16 @@ create_tfp_surface(
     int                    n_fbconfig_attribs, x, y, status;
     unsigned int           border_width, depth, dummy;
 
-    root_window = RootWindow(ctx->x11_dpy, ctx->x11_screen);
-    XGetWindowAttributes(ctx->x11_dpy, root_window, &wattr);
-    pixmap = XCreatePixmap(ctx->x11_dpy, root_window,
+    root_window = RootWindow(ctx->native_dpy, ctx->x11_screen);
+    XGetWindowAttributes(ctx->native_dpy, root_window, &wattr);
+    pixmap = XCreatePixmap(ctx->native_dpy, root_window,
                            width, height, wattr.depth);
     if (!pixmap)
         return -1;
     obj_glx_surface->pixmap = pixmap;
 
     x11_trap_errors();
-    status = XGetGeometry(ctx->x11_dpy,
+    status = XGetGeometry(ctx->native_dpy,
                           (Drawable)pixmap,
                           &root_window,
                           &x,
@@ -427,7 +427,7 @@ create_tfp_surface(
     }
     *attrib++ = GL_NONE;
 
-    fbconfig = glXChooseFBConfig(ctx->x11_dpy, ctx->x11_screen, fbconfig_attribs, &n_fbconfig_attribs);
+    fbconfig = glXChooseFBConfig(ctx->native_dpy, ctx->x11_screen, fbconfig_attribs, &n_fbconfig_attribs);
     if (fbconfig == NULL)
         return -1;
 
@@ -447,7 +447,7 @@ create_tfp_surface(
 
     x11_trap_errors();
     glx_pixmap = glXCreatePixmap(
-        ctx->x11_dpy,
+        ctx->native_dpy,
         fbconfig[0],
         pixmap,
         pixmap_attribs
@@ -474,12 +474,12 @@ destroy_tfp_surface(
     VADriverContextP const ctx = driver_data->va_context;
 
     if (obj_glx_surface->glx_pixmap) {
-        glXDestroyPixmap(ctx->x11_dpy, obj_glx_surface->glx_pixmap);
+        glXDestroyPixmap(ctx->native_dpy, obj_glx_surface->glx_pixmap);
         obj_glx_surface->glx_pixmap = None;
     }
 
     if (obj_glx_surface->pixmap) {
-        XFreePixmap(ctx->x11_dpy, obj_glx_surface->pixmap);
+        XFreePixmap(ctx->native_dpy, obj_glx_surface->pixmap);
         obj_glx_surface->pixmap = None;
     }
 }
@@ -501,12 +501,12 @@ bind_pixmap(
 
     x11_trap_errors();
     gl_data->glx_bind_tex_image(
-        ctx->x11_dpy,
+        ctx->native_dpy,
         obj_glx_surface->glx_pixmap,
         GLX_FRONT_LEFT_EXT,
         NULL
     );
-    XSync(ctx->x11_dpy, False);
+    XSync(ctx->native_dpy, False);
     if (x11_untrap_errors() != 0) {
         vdpau_error_message("failed to bind pixmap\n");
         return -1;
@@ -531,11 +531,11 @@ unbind_pixmap(
 
     x11_trap_errors();
     gl_data->glx_release_tex_image(
-        ctx->x11_dpy,
+        ctx->native_dpy,
         obj_glx_surface->glx_pixmap,
         GLX_FRONT_LEFT_EXT
     );
-    XSync(ctx->x11_dpy, False);
+    XSync(ctx->native_dpy, False);
     if (x11_untrap_errors() != 0) {
         vdpau_error_message("failed to release pixmap\n");
         return -1;
@@ -903,7 +903,7 @@ vdpau_CreateSurfaceGLX(
 
     GLContextState old_cs, *new_cs;
     gl_get_current_context(&old_cs);
-    new_cs = gl_create_context(ctx->x11_dpy, ctx->x11_screen, &old_cs);
+    new_cs = gl_create_context(ctx->native_dpy, ctx->x11_screen, &old_cs);
     if (!new_cs)
         return VA_STATUS_ERROR_ALLOCATION_FAILED;
     if (!gl_set_current_context(new_cs, NULL))
diff -up src/vdpau_video_x11.c.api src/vdpau_video_x11.c
--- src/vdpau_video_x11.c.api	2010-06-22 18:12:32.869860310 -0300
+++ src/vdpau_video_x11.c	2010-06-22 18:12:42.021735697 -0300
@@ -114,7 +114,7 @@ configure_notify_event_pending(
 
     /* XXX: don't use XPeekIfEvent() because it might block */
     XCheckIfEvent(
-        ctx->x11_dpy,
+        ctx->native_dpy,
         &xev,
         configure_notify_event_pending_cb, (XPointer)&args
     );
@@ -206,7 +206,7 @@ output_surface_create(
     obj_output->displayed_output_surface = 0;
     obj_output->queued_surfaces          = 0;
     obj_output->fields                   = 0;
-    obj_output->is_window                = is_window(ctx->x11_dpy, drawable);
+    obj_output->is_window                = is_window(ctx->native_dpy, drawable);
     obj_output->size_changed             = 0;
 
     unsigned int i;
@@ -713,7 +713,7 @@ vdpau_PutSurface(
         return VA_STATUS_ERROR_INVALID_PARAMETER;
 
     unsigned int w, h;
-    if (get_drawable_size(ctx->x11_dpy, draw, &w, &h) < 0)
+    if (get_drawable_size(ctx->native_dpy, draw, &w, &h) < 0)
         return VA_STATUS_ERROR_OPERATION_FAILED;
 
     VARectangle src_rect, dst_rect;
