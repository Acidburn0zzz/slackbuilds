#!/bin/bash
#-- seamonkey for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ seamonkey.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008, 2009, 2010, 2011, 2012 Phantom X, Goiania, Brazil..
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.mozilla.org/projects/firefox/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=seamonkey
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-2.7.1}
VERSION_INTERNAL="$(echo ${VERSION} | cut -d . -f1-2)"
SMAPP_ID="{92650c4d-4b8e-4d2a-b7eb-24ecf4f6b63a}"
SLKDIST=${SLKDIST:-Slackware}
SLKVER=${SLKVER:-$(awk '{print $2}' /etc/slackware-version)}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable languages.
SB_LANG=${SB_LANG:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

FXLANGS=${FXLANGS:-"be ca cs de es-AR es-ES fr gl hu it ka nb-NO nl pl pt-PT ru sk sv-SE tr"}
NOSHORTLANGS=${NOSHORTLANGS:-"en-GB es-AR pt-BR zh-TW"}
LANGDIR=${CWD}/langpacks/${VERSION}
LANGDOWNALL=${LANGDOWNALL:-NO}

# Set default page
SB_INDEXHTML=${SB_INDEXHTML:-http://www.slackware.com/}

SRCDIR=comm-release
SRCARCHIVE=${NAME}-${VERSION}.source.tar.bz2

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MOZ_MIRROR=${MOZ_MIRROR:-http://releases.mozilla.org/mozilla.org}
DL_URL="${MOZ_MIRROR}/${NAME}/releases/${VERSION}/source/${SRCARCHIVE}"
LDL_URL="${MOZ_MIRROR}/${NAME}/releases/${VERSION}/langpack"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

if [ "${SB_LANG}" = "YES" ] ;then
  FXLANGS=${FXLANGS/_/-}

  echo -n "Selected langpacks: "
  echo ${FXLANGS}
  sleep 5

  mkdir -p ${LANGDIR}

  if [ "${LANGDOWNALL}" = "NO" ] ;then
    for lang in ${FXLANGS} ;do
      lang=${NAME}-${VERSION}.${lang}.langpack
      test -r ${LANGDIR}/${lang}.xpi || ${DL_PROG} ${DL_OPTS} -P ${LANGDIR} ${LDL_URL}/${lang}.xpi || exit 1
    done
  else
    wget -P ${LANGDIR} -m -np -c -nd ${LDL_URL}/
    rm -f ${LANGDIR}/{index.*,robots.txt,.listing}
  fi
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

SB_SROOT="$(pwd)"

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

install -pm0755 ${CWD}/${NAME}-make-package.pl ./${NAME}-make-package.pl || exit 1

for file in psm xpcom ;do
  zcat ${CWD}/mozilla-${file}-exclude-list.gz > mozilla-${file}-exclude-list || exit 1
done

# Add Slackware to custom dists (fix some web user agent recognizing scripts)
[ "${SLKDIST}" = "Slackware" ] || export SLKDIST="${SLKDIST} (Slackware)"

[ "$(< suite/config/version.txt)" = "${VERSION}" ] || echo ${VERSION} > suite/config/version.txt

rm -f .mozconfig
cat ${CWD}/${NAME}-mozconfig > .mozconfig || exit 1

sed -i \
  -e '/MOZ_ENABLE_GCONF=/s|=1|=|g'\
  -e '/MOZ_ENABLE_GNOMEVFS=/s|=1|=|g' \
  -e '/MOZ_ENABLE_LIBGNOME=/s|=1|=|g' \
  configure || exit 1

echo "ac_add_options --build=${SLKTARGET}-${SLKDTARGET}-linux" >> .mozconfig || exit 1
echo "ac_add_options --host=${SLKTARGET}-${SLKDTARGET}-linux" >> .mozconfig || exit 1
echo "ac_add_options --target=${SLKTARGET}-${SLKDTARGET}-linux" >> .mozconfig || exit 1

# Mozilla builds with -Wall with exception of a few warnings which show up
# everywhere in the code; so, don't override that.
MOZ_OPT_FLAGS="$(echo ${SLKCFLAGS} | sed -e 's/-O./-Os/;s/-Wall//') -D_FORTIFY_SOURCE=2"

export CFLAGS="${MOZ_OPT_FLAGS}"
export CXXFLAGS="${MOZ_OPT_FLAGS}"

export PREFIX='/usr'
export LIBDIR="/usr/lib${LIBDIRSUFFIX}"

INTERNAL_GECKO=${VERSION_INTERNAL}
MOZ_APP_DIR=/usr/lib${LIBDIRSUFFIX}/${NAME}

sed -i -e '/^installdir/s|$(MOZ_APP_NAME)-$(MOZ_APP_VERSION)|$(MOZ_APP_NAME)|g' \
  config/autoconf.mk.in mozilla/{,js/src}/config/autoconf.mk.in || exit 1

make -f client.mk build STRIP="/bin/true" MOZ_MAKE_FLAGS="-j${NJOBS}" || exit 1

DESTDIR=${PKG} make install || exit 1

# Use ${NAME} as directory
if [ -d "${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}-${VERSION}" ] ; then
  if [ "${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}-${VERSION}" != "${PKG}/${MOZ_APP_DIR}" ] ;then
    mv "${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}-${VERSION}" "${PKG}/${MOZ_APP_DIR}" || exit 1
  fi
fi

# fix omni.ja to actually work
( cd mozilla/dist/bin || exit 1
  zip -d ${PKG}/${MOZ_APP_DIR}/omni.ja components/browser.xpt components/mail.xpt components/components.manifest chrome/localized.manifest chrome/nonlocalized.manifest || exit 1
  zip -9r ${PKG}/${MOZ_APP_DIR}/omni.ja chrome.manifest components/*.xpt chrome/*.manifest components/*.manifest components/*.js || exit 1
) || exit $?

# Copy over missing components
#install -c -m 644 mozilla/dist/bin/components/*.xpt \
#   ${PKG}/${MOZ_APP_DIR}/components/ || exit 1

# build all of the default browser components 
# base Seamonkey package (seamonkey.list) 
./${NAME}-make-package.pl --package xpcom --output-file ${SB_SROOT}/seamonkey.list \
    --package-file suite/installer/package-manifest \
    --install-dir ${PKG}/${MOZ_APP_DIR} \
    --install-root ${MOZ_APP_DIR} \
    --exclude-file=${SB_SROOT}/mozilla-xpcom-exclude-list || exit 1

./${NAME}-make-package.pl --package browser --output-file ${SB_SROOT}/seamonkey.list \
    --package-file suite/installer/package-manifest \
    --install-dir ${PKG}/${MOZ_APP_DIR} \
    --install-root ${MOZ_APP_DIR} || exit 1

./${NAME}-make-package.pl --package spellcheck --output-file ${SB_SROOT}/seamonkey.list \
    --package-file suite/installer/package-manifest \
    --install-dir ${PKG}/${MOZ_APP_DIR} \
    --install-root ${MOZ_APP_DIR} || exit 1

./${NAME}-make-package.pl --package psm --output-file ${SB_SROOT}/seamonkey.list \
    --package-file suite/installer/package-manifest \
    --install-dir ${PKG}/${MOZ_APP_DIR} \
    --install-root ${MOZ_APP_DIR} \
    --exclude-file=${SB_SROOT}/mozilla-psm-exclude-list || exit 1

./${NAME}-make-package.pl --package mail --output-file ${SB_SROOT}/seamonkey.list \
    --package-file suite/installer/package-manifest \
    --install-dir ${PKG}/${MOZ_APP_DIR} \
    --install-root ${MOZ_APP_DIR} || exit 1

./${NAME}-make-package.pl --package chatzilla --output-file ${SB_SROOT}/seamonkey.list \
    --package-file suite/installer/package-manifest \
    --install-dir ${PKG}/${MOZ_APP_DIR} \
    --install-root ${MOZ_APP_DIR} || exit 1

./${NAME}-make-package.pl --package venkman --output-file ${SB_SROOT}/seamonkey.list \
    --package-file suite/installer/package-manifest \
    --install-dir ${PKG}/${MOZ_APP_DIR} \
    --install-root ${MOZ_APP_DIR} || exit 1

./${NAME}-make-package.pl --package inspector --output-file ${SB_SROOT}/seamonkey.list \
    --package-file suite/installer/package-manifest \
    --install-dir ${PKG}/${MOZ_APP_DIR} \
    --install-root ${MOZ_APP_DIR} || exit 1

mkdir -p ${PKG}/usr{/lib${LIBDIRSUFFIX},/bin,/share/applications,/share/pixmaps}

# set up our default preferences
sed \
  -e "s,SM_SLK_DIST,${SLKDIST},g;s,SM_SLK_VR,${SLKVER},g" \
  ${CWD}/${NAME}-chinfo-default-prefs.js > slk-default-prefs

# Set up default homepage
cat >> slk-default-prefs << EOF
pref("browser.startup.homepage", "${SB_INDEXHTML}");
EOF
install -m0644 slk-default-prefs \
               ${PKG}/${MOZ_APP_DIR}/defaults/pref/all-slackware.js || exit 1
rm -f slk-default-prefs

# Start script install
rm -f ${PKG}/usr/bin/${NAME}
sed \
  -e "s,LIBDIR,/usr/lib${LIBDIRSUFFIX},g" \
  ${CWD}/${NAME}.sh.in \
  > ${PKG}/usr/bin/${NAME} || exit 1
chmod 0755 ${PKG}/usr/bin/${NAME}

#( cd ${PKG}${MOZ_APP_DIR}/chrome
#  find . -name "*" -type d -maxdepth 1 -exec rm -rf {} \;
#)

rm -f ${PKG}${MOZ_APP_DIR}/removed-files

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

if [ "${SB_LANG}" = "YES" ] ;then
# Install langpacks
mkdir -p ${PKG}/${MOZ_APP_DIR}/extensions
  for langpack in ${LANGDIR}/*.xpi; do
    language=$(basename ${langpack} .xpi)
    extensiondir=${PKG}/${MOZ_APP_DIR}/extensions/langpack-${language}@seamonkey.mozilla.org
    mkdir -p ${extensiondir}
    unzip ${langpack} -d ${extensiondir}
    find ${extensiondir} -type f | xargs chmod 0644

#    tmpdir=$(mktemp -d ${NAME}.XXXXXXXX)
#    langtmp=${tmpdir}/${NAME}/langpack-${language}
#    mkdir -p ${langtmp}
    jarfile=${extensiondir}/chrome/${language}.jar
#    unzip ${jarfile} -d ${langtmp}

    sed -i \
      -e "s|browser.startup.homepage.*$|browser.startup.homepage=${SB_INDEXHTML}|g;" \
      ${extensiondir}/chrome/${language}/locale/${language}/navigator-region/region.properties

#    find ${langtmp} -type f | xargs chmod 0644
#    rm -rf ${jarfile}
    ${extensiondir}/chrome/${language}
      zip -r -D ${jarfile} locale
    cd -
#    rm -rf ${tmpdir}
  done
fi

# System extensions
mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/mozilla/extensions/${SMAPP_ID}
mkdir -p ${PKG}/usr/share/mozilla/extensions/${SMAPP_ID}

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/mozilla/plugins

for file in ${NAME} ${NAME}-mail ;do
  zcat ${CWD}/${file}.desktop.gz \
    > ${PKG}/usr/share/applications/${file}.desktop || exit 1

  desktop-file-install --vendor mozilla \
    --delete-original \
    --dir ${PKG}/usr/share/applications \
    --add-category WebBrowser \
    --add-category Network \
    ${PKG}/usr/share/applications/${file}.desktop

  zcat ${CWD}/${file}-icon.png.gz \
    > ${PKG}/usr/share/pixmaps/${file}-icon.png || exit 1
done

# Copy over the LICENSE
install -p -c -m 644 LICENSE ${PKG}/${MOZ_APP_DIR}/

# ghost files
touch ${PKG}/${MOZ_APP_DIR}/components/compreg.dat
touch ${PKG}/${MOZ_APP_DIR}/components/xpti.dat

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  LICENSE ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if grep '^/usr/lib${LIBDIRSUFFIX}/seamonkey' etc/ld.so.conf 1> /dev/null 2> /dev/null ; then
  sed -i -e '/^\/usr\/lib${LIBDIRSUFFIX}\/seamonkey/s|^|#|g' etc/ld.so.conf
fi
if [ -f ${MOZ_APP_DIR#\/}/components/compreg.dat ] ;then
  \${CHROOT} rm -f /${MOZ_APP_DIR#\/}/components/compreg.dat 1> /dev/null 2> /dev/null
fi
if [ -f ${MOZ_APP_DIR#\/}/components/xpti.dat ] ;then
  \${CHROOT} rm -f /${MOZ_APP_DIR#\/}/components/xpti.dat 1> /dev/null 2> /dev/null
fi
if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database 1> /dev/null 2> /dev/null
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/touch --no-create /usr/share/icons/hicolor >/dev/null 2>&1
  \${CHROOT} /usr/bin/gtk-update-icon-cache -q /usr/share/icons/hicolor > /dev/null 2>&1
fi
# If there's no mozilla here, then take over:
if [ ! -r usr/bin/mozilla ]; then
  ( cd usr/bin ; ln -sf seamonkey mozilla )
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/${NAME}*mozconfig* ${CWD}/*.{desktop,rdf}.gz \
    ${CWD}/*-exclude-list.gz ${CWD}/*.desktop.gz ${CWD}/${NAME}-*-package.pl \
    ${CWD}/*.sh.in ${CWD}/*.js ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
