#!/bin/sh
#-- jdk for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ jdk.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2013 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://java.com/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=jdk
MPNAME=${NAME}-plugin
PKGF=${PKGF:-${TMP}/package-${NAME}}
PKG=${PKGF}/${NAME}
MPPKG=${PKGF}/${MPNAME}

# Add "0" before single numbers after "u": 7u9 -> 7u09
VERSION=${VERSION:-7u25}
DVER="1.$(echo ${VERSION} | cut -du -f1).0_$(echo ${VERSION} | cut -du -f2)"
PVER="$(echo ${VERSION} | sed 's|u0|u|g')"
# x86 or x86_64
ARCH=${ARCH:-x86_64}
if [ "${ARCH}" = "x86_64" ] ;then
  PARCH=x64
else
  ARCH=x86
  PARCH="i586"
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKGMPNAME=${MPNAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${PVER}-linux-${PARCH}
SRCARCHIVE=${SRCDIR}.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www.oracle.com/technetwork/java/javase/downloads/index.html"

# if source is not present, download in source rootdir if possible
if ! [ -r ${CWD}/${SRCARCHIVE} ] ;then
  echo "Download ${SRCARCHIVE} from ${DL_URL}"
  exit 1
fi

if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  LIB_ARCH=amd64
else
  LIBDIRSUFFIX=""
  LIB_ARCH=i386
fi

if [ -d ${PKGF} ]; then
  # Clean up a previous build
  rm -rf ${PKGF}
fi
mkdir -p ${PKG} ${MPPKG}

cd ${PKG}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1

find ${PKG} -type d | xargs chmod 0755 2> /dev/null
chmod -R u+rw,go+r-w,a-s ${PKG}/

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}
mv ${NAME}${DVER} ${PKG}/usr/lib${LIBDIRSUFFIX}/java || exit 1
ln -sf java ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}${DVER}

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

ln -sf java/jre/lib/${LIB_ARCH}/server/libjvm.so \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/libjvm.so || exit 1

# Use ca-certificates cacerts
rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/java/jre/lib/security/cacerts
ln -sf ../../../../../../etc/pki/java/cacerts \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/java/jre/lib/security/cacerts || exit 1

# npapi plugin
mkdir -p ${MPPKG}/usr/lib${LIBDIRSUFFIX}/java/jre/lib/${LIB_ARCH}
mv ${PKG}/usr/lib${LIBDIRSUFFIX}/java/jre/lib/${LIB_ARCH}/libnpjp2.so \
  ${MPPKG}/usr/lib${LIBDIRSUFFIX}/java/jre/lib/${LIB_ARCH}/ || exit 1

mkdir -p ${MPPKG}/usr/lib${LIBDIRSUFFIX}/mozilla/plugins
ln -sf ../../java/jre/lib/${LIB_ARCH}/libnpjp2.so \
  ${MPPKG}/usr/lib${LIBDIRSUFFIX}/mozilla/plugins/libnpjp2.so || exit 1

mv ${PKG}/usr/lib${LIBDIRSUFFIX}/java/jre/plugin \
  ${MPPKG}/usr/lib${LIBDIRSUFFIX}/java/jre/ || exit 1

mkdir -p ${PKG}/etc/profile.d
cat > ${PKG}/etc/profile.d/${NAME}.sh <<'EOF'
#!/bin/sh
export JAVA_HOME=/usr/_LIBDIR_/java
export MANPATH="${MANPATH}:${JAVA_HOME}/man"
export PATH="${PATH}:${JAVA_HOME}/bin:${JAVA_HOME}/jre/bin"
EOF

cat > ${PKG}/etc/profile.d/${NAME}.csh <<'EOF'
#!/bin/csh
setenv JAVA_HOME /usr/_LIBDIR_/java
setenv MANPATH ${MANPATH}:${JAVA_HOME}/man
setenv PATH ${PATH}:${JAVA_HOME}/bin:${JAVA_HOME}/jre/bin
EOF

sed -i -e "s|_LIBDIR_|lib${LIBDIRSUFFIX}|g" \
  ${PKG}/etc/profile.d/${NAME}.*sh || exit 1
chmod 0755 ${PKG}/etc/profile.d/${NAME}.*sh

rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/java/jre/lib/desktop/applications/sun_*.desktop

sed -i -e '/^Icon=/s|=.*$|=oracle_java|g' \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/java/jre/lib/desktop/applications/*.desktop || exit 1

mkdir -p ${PKG}/usr/share/{applications,icons,mime}

SB_DFI(){
desktop-file-install --delete-original \
  --vendor="" --mode 0644 \
  --dir ${PKG}/usr/share/applications \
  --remove-key="Encoding" \
  --remove-category="Application" \
  --remove-category="Applications" \
  --remove-category="Java" \
  --remove-category="X-Red-Hat-Base" \
  --remove-category="X-Ximian-Settings" $@
}

# Install the desktop/mime files:

SB_DFI \
  --add-category="System" \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/java/jre/lib/desktop/applications/sun-*.desktop || exit 1

cat > ${PKG}/usr/share/applications/oracle-controlpanel.desktop <<'EOF'
[Desktop Entry]
Name=Oracle Java Plugin Control Panel
Comment=Oracle Java Plugin Control Panel
Exec=ControlPanel
Terminal=false
Type=Application
Icon=oracle_java
Categories=Settings;
EOF

cat > ${PKG}/usr/share/applications/oracle-jconsole.desktop <<'EOF'
[Desktop Entry]
Name=Oracle Java Console
Comment=Oracle Java Monitoring & Management Console
Exec=jconsole
Terminal=false
Type=Application
Icon=oracle_java
Categories=System;
EOF

cat > ${PKG}/usr/share/applications/oracle-jvisualvm.desktop <<'EOF'
[Desktop Entry]
Name=Oracle Java VisualVM
Comment=Oracle Java Monitoring & Management (VisualVM)
Exec=jvisualvm
Terminal=false
Type=Application
Icon=oracle_java
Categories=System;
EOF

cat > ${PKG}/usr/share/applications/oracle-policytool.desktop <<'EOF'
[Desktop Entry]
Name=Oracle Java Policy Tool
Comment=Oracle Java Policy Tool
Exec=policytool
Terminal=false
Type=Application
Icon=oracle_java
Categories=Settings;
EOF

mv ${PKG}/usr/lib${LIBDIRSUFFIX}/java/jre/lib/desktop/icons/* \
  ${PKG}/usr/share/icons/ || exit 1

for res in 16 22 24 32 36 48 64 72 96 128 192 256 512 ;do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
  mkdir -p ${dir}
  rsvg-convert ${CWD}/oracle_java.svg -h ${res} -w ${res} \
    -o ${dir}/oracle_java.png || exit 1
done
mkdir -p ${PKG}/usr/share/icons/hicolor/scalable/apps
install -pm0644 ${CWD}/oracle_java.svg \
  ${PKG}/usr/share/icons/hicolor/scalable/apps/oracle_java.svg || exit 1

mv ${PKG}/usr/lib${LIBDIRSUFFIX}/java/jre/lib/desktop/mime/packages \
  ${PKG}/usr/share/mime/ || exit 1

rmdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/java/jre/lib/desktop/*

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

if [ -d ${PKG}/usr/lib${LIBDIRSUFFIX}/java/man ]; then
  ( cd ${PKG}/usr/lib${LIBDIRSUFFIX}/java/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install ${MPPKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required
cat ${CWD}/slack-desc.plugin > ${MPPKG}/install/slack-desc
echo "${NAME} = ${VERSION}" > ${MPPKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Clean up a potential upgrade mess caused by changing the
# installation directory to /usr/lib${LIBDIRSUFFIX}/java/:
if [ -L usr/lib${LIBDIRSUFFIX}/java ]; then
  rm -rf usr/lib${LIBDIRSUFFIX}/java
  mkdir -p usr/lib${LIBDIRSUFFIX}/java/man
  mkdir -p usr/lib${LIBDIRSUFFIX}/java/jre/lib/${LIB_ARCH}/server
  mkdir -p usr/lib${LIBDIRSUFFIX}/java/jre/lib/${LIB_ARCH}/client
  mkdir -p usr/lib${LIBDIRSUFFIX}/java/jre/javaws
  mkdir -p usr/lib${LIBDIRSUFFIX}/java/jre/bin
  mkdir -p usr/lib${LIBDIRSUFFIX}/java/bin
  mkdir -p usr/lib${LIBDIRSUFFIX}/mozilla/plugins
fi
if [ -L ControlPanel ]; then
  rm -f ControlPanel
fi
if [ -L ja ]; then
  rm -f ja
fi
if [ -L javaws ]; then
  rm -f javaws
fi
if [ -L libjsig.so ]; then
  rm -f libjsig.so
fi
# End cleanup.

# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database 1> /dev/null 2> /dev/null
fi
if [ -x usr/bin/update-mime-database ]; then
  \${CHROOT} /usr/bin/update-mime-database /usr/share/mime &> /dev/null
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  for theme in hicolor HighContrast HighContrastInverse LowContrast ;do
    \${CHROOT} /usr/bin/touch --no-create /usr/share/icons/\${theme} >/dev/null 2>&1
    \${CHROOT} /usr/bin/gtk-update-icon-cache -q /usr/share/icons/\${theme} > /dev/null 2>&1 || :
  done
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
  ${PKG}/install/slack-desc ${MPPKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/oracle_java.svg ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"
MPROOTCOMMANDS="set -o errexit -o xtrace ; cd ${MPPKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "
MPROOTCOMMANDS="${MPROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGMPNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  eval ${MPROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
  echo ${MPROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
  /bin/su -c "${MPROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${PKGF} ]; then
    rm -rf ${PKGF} && echo "${PKGF} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
