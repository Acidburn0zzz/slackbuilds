#!/bin/sh
#-- php for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ php.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2009 Phantom X, Goiania, Brazil.
# Copyright 2007, 2008, 2009  Patrick Volkerding, Sebeka, MN, USA
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.php.net/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=php
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-5.2.12}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

grep --quiet '^apache:' /etc/group && SB_HGROUP=1

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www.php.net/distributions/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .
find . -name "*.h" -exec chmod 644 {} \;

# Sometimes they ship a few of these:
find . -name "*.orig" -exec rm {} \;

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

sed -i -e 's|__GMP_BITS_PER_MP_LIMB|GMP_LIMB_BITS|g' ext/gmp/gmp.c | exit 1

# Add missing(?) PEAR modules back:
if [ -d pear/packages ]; then
  ( cd pear/packages
    cp -a ${CWD}/pear/*.bz2 . 2> /dev/null
    bzip2 -d *.bz2 2> /dev/null
  )
fi

mkdir -p ${PKG}/etc/httpd ${PKG}/etc/php
# A trick from DaMouse to enable building php into ${PKG}.
# We'll remove this later on.

if [ ! -e /etc/httpd/original/httpd.conf ]; then
  echo "FATAL:  no /etc/httpd/original/httpd.conf found."
  exit 1
else
  cat /etc/httpd/original/httpd.conf > ${PKG}/etc/httpd/httpd.conf || exit 1
fi

# aclocal workaround - to be improved
cat $(aclocal --print-ac-dir)/{libtool,ltoptions,ltsugar,ltversion,lt~obsolete}.m4 >>aclocal.m4

# Force use of system libtool:
libtoolize --force --copy
cat $(aclocal --print-ac-dir)/{libtool,ltoptions,ltsugar,ltversion,lt~obsolete}.m4 >build/libtool.m4

# Regenerate configure scripts (patches change config.m4's)
export PHP_AUTOCONF="autoconf-2.63"
./buildconf --force || exit 1

# Generic "kitchen sink" configure function, with as many things as possible (and
# maybe then some ;-) compiled as shared extensions:
php_configure() {
EXTENSION_DIR=/usr/lib${LIBDIRSUFFIX}/php/extensions \
PEAR_INSTALLDIR=/usr/share/pear \
CFLAGS="${SLKCFLAGS} -fno-strict-aliasing -Wno-pointer-sign" \
./configure \
  $* \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --with-libdir=lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --disable-safe-mode \
  --disable-magic-quotes \
  --enable-zend-multibyte \
  --enable-mbregex \
  --enable-tokenizer=shared \
  --with-config-file-scan-dir=/etc/php \
  --with-config-file-path=/etc/httpd \
  --enable-mod_charset \
  --with-layout=PHP \
  --enable-sigchild \
  --enable-xml \
  --with-libxml-dir=/usr \
  --enable-simplexml \
  --enable-spl \
  --enable-filter \
  --disable-debug \
  --with-openssl=shared \
  --with-pcre-regex=/usr \
  --with-zlib=shared,/usr \
  --enable-bcmath=shared \
  --with-bz2=shared,/usr \
  --enable-calendar=shared \
  --enable-ctype=shared \
  --with-curl=shared \
  --with-curlwrappers \
  --with-ncurses=shared \
  --with-gd=shared \
  --with-mcrypt=/usr \
  --enable-dba=shared \
  --with-gdbm=/usr \
  --with-db4=/usr \
  --enable-dbase=shared \
  --enable-exif=shared \
  --enable-ftp=shared \
  --with-gd=shared \
  --with-jpeg-dir=/usr \
  --with-png-dir=/usr \
  --with-zlib-dir=/usr \
  --with-xpm-dir=/usr \
  --with-freetype-dir=/usr \
  --with-t1lib=/usr \
  --enable-gd-native-ttf \
  --enable-gd-jis-conv \
  --with-gettext=shared,/usr \
  --with-gmp=shared,/usr \
  --with-iconv=shared \
  --with-imap-ssl=/usr \
  --with-imap=/usr \
  --with-ldap=shared \
  --enable-mbstring=shared \
  --enable-hash \
  --with-mhash=shared,/usr \
  --with-mysql=shared,/usr \
  --with-mysqli=shared,/usr/bin/mysql_config \
  --enable-pdo=shared \
  --with-pdo-mysql=shared,/usr \
  --with-pdo-sqlite=shared,/usr \
  --with-pspell=shared,/usr \
  --with-mm=/usr \
  --enable-shmop=shared \
  --with-snmp=shared,/usr \
  --enable-soap=shared \
  --enable-sockets \
  --with-sqlite=shared \
  --enable-sqlite-utf8 \
  --with-regex=php \
  --enable-sysvmsg \
  --enable-sysvsem \
  --enable-sysvshm \
  --enable-wddx=shared \
  --with-xsl=shared,/usr \
  --enable-zip=shared \
  --with-tsrm-pthreads \
  --with-system-tzdata \
  --enable-shared=yes \
  --enable-static=no \
  --with-gnu-ld \
  --with-pic \
  --disable-rpath \
  --build=${SLKTARGET}-${SLKDTARGET}-linux
}

# Make the Apache2 module version of PHP:
php_configure \
  --with-apxs2=/usr/sbin/apxs || exit 1
make -j${NJOBS} || make || exit 1
make install INSTALL_ROOT=${PKG} || exit 1

# Make the embedded version of PHP:
make distclean
php_configure \
  --enable-embed \
  --without-mysql \
  --without-gd \
  --without-unixODBC \
  --disable-dba \
  --disable-pdo \
  --disable-xmlreader \
  --disable-xmlwriter \
  --disable-json \
  --without-pspell \
  --disable-wddx \
  --without-curl \
  --disable-posix \
  --disable-sysvmsg \
  --disable-sysvshm \
  --disable-sysvsem || exit 1
make -j${NJOBS} || make || exit 1
make install-sapi install-headers INSTALL_ROOT=${PKG} || exit 1

# Make the CLI version of PHP:
make distclean
php_configure \
  --enable-force-cgi-redirect \
  --enable-pcntl \
  --enable-sigchild || exit 1
make -j${NJOBS} || make || exit 1
mkdir -p ${PKG}/usr/bin
cat ./sapi/cli/php > ${PKG}/usr/bin/php || exit 1
chmod 0755 ${PKG}/usr/bin/php

# Make the FastCGI interpreter:
make distclean
php_configure \
  --enable-fastcgi \
  --enable-pcntl \
  --enable-sigchild || exit 1
make -j${NJOBS} || make || exit 1
mkdir -p ${PKG}/usr/bin
cat sapi/cgi/php-cgi > ${PKG}/usr/bin/php-cgi || exit 1
chmod 0755 ${PKG}/usr/bin/php-cgi

# PHP (used to) install Pear with some strange permissions.
chmod 0755 ${PKG}/usr/bin/pear

# PHP sometimes puts junk in the root directory:
( cd ${PKG} || exit 1
  rm -rf .channels .depdb .depdblock .filemap .lock .registry
)

# Fix a couple broken .reg files in php-5.2.10:
if ! grep -q Download ${PKG}/usr/lib${LIBDIRSUFFIX}/php/.channels/pear.php.net.reg ; then
  cat ${CWD}/channels/pear.php.net.reg \
    > ${PKG}/usr/lib${LIBDIRSUFFIX}/php/.channels/pear.php.net.reg
fi
if ! grep -q Download ${PKG}/usr/lib${LIBDIRSUFFIX}/php/.channels/pecl.php.net.reg ; then
  cat ${CWD}/channels/pecl.php.net.reg \
    > ${PKG}/usr/lib${LIBDIRSUFFIX}/php/.channels/pecl.php.net.reg
fi

rm -f ${PKG}/usr/lib*/libphp5.la

# Fix ${PKG}/usr/lib/php perms:
( cd ${PKG}/usr/lib${LIBDIRSUFFIX}/php || exit 1
  chmod -R u+w,go+r-w,a-s .
)

find ${PKG }| xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/etc/httpd
cp -a php.ini-dist php.ini-recommended ${PKG}/etc/httpd
cat ${CWD}/mod_php.conf.example > ${PKG}/etc/httpd/mod_php.conf.example
chmod 644 ${PKG}/etc/httpd/*

# This can go now.
rm -f ${PKG}/etc/httpd/httpd*

# Session directory for PHP:
mkdir -p ${PKG}/var/lib/php
chmod 770 ${PKG}/var/lib/php

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  CODING_STANDARDS CREDITS EXTENSIONS INSTALL LICENSE NEWS README* TODO* \
  sapi/cgi/README.FastCGI ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi

if [ ! -r etc/httpd/mod_php.conf ]; then
  cp -a etc/httpd/mod_php.conf.example etc/httpd/mod_php.conf
elif [ "$(cat etc/httpd/mod_php.conf 2> /dev/null)" = "" ]; then
  cp -a etc/httpd/mod_php.conf.example etc/httpd/mod_php.conf
fi
if [ ! -r etc/httpd/php.ini ]; then
   cp -a etc/httpd/php.ini-recommended etc/httpd/php.ini
fi

${CHROOT} /bin/chown root.apache /var/lib/php
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{channels,patches}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/mod_php.conf.example ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/channels/*.reg \
                 ${SBDIR}/channels/
  install -m0644 ${CWD}/patches/*.gz \
                 ${SBDIR}/patches/
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  [ \"${SB_HGROUP}\" = 1 ] && /bin/chown root.apache ./var/lib/php ; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
