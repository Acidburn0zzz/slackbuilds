#!/bin/sh
#-- wpa_supplicant for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ wpa_supplicant.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008, 2009, 2010 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
# Inludes code by Eric Hameleers, Eindhoven, NL
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://hostap.epitest.fi/wpa_supplicant/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=wpa_supplicant
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-0.6.10}
IVER=${IVER:-0.6.10}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SB_MADWIFI_INCDIR=${SB_MADWIFI_INCDIR:-}
SB_HERMES_INCDIR=${SB_HERMES_INCDIR:-}
SB_BROADCOM_INCDIR=${SB_BROADCOM_INCDIR:-}

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz
ISRCARCHIVE=${NAME}-${IVER}-icons.tar.xz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://hostap.epitest.fi/releases/${SRCARCHIVE}"
IDL_URL="http://cloud.github.com/downloads/PhantomX/slackbuilds/${ISRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1
test -r ${CWD}/${ISRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${IDL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

unset QTDIR QTINC QTLIB
export QTDIR=$(qmake-qt4 -query QT_INSTALL_PREFIX)
PATH="$(qmake-qt4 -query QT_INSTALL_BINS):${PATH}" ; export PATH

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1
tar -xvf ${CWD}/${ISRCARCHIVE} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

export CFLAGS="${SLKCFLAGS}"
export CXXFLAGS="${SLKCFLAGS}"

( cd wpa_supplicant || exit 1

  # Create the configuration file for building wpa_supplicant:
  cat ${CWD}/${NAME}.config > .config

if [ ! -z ${SB_MADWIFI_INCDIR} -a -d ${SB_MADWIFI_INCDIR} ]; then
  echo "Adding madwifi driver (Atheros) support"
  cat >> .config <<-EOT
	CONFIG_DRIVER_MADWIFI=y
	CFLAGS += -I${MADWIFI_INCLUDES}
	EOT
fi
if [ ! -z ${SB_HERMES_INCDIR} -a -d ${SB_HERMES_INCDIR} ]; then
  echo "Adding hermes driver (Agere) support"
  cat >> .config <<-EOT
	CONFIG_DRIVER_HERMES=y
	CFLAGS += -I${HERMES_INCLUDES}
	EOT
fi
if [ ! -z ${SB_BROADCOM_INCDIR} -a -d ${SB_BROADCOM_INCDIR} ]; then
  echo "Adding broadcom driver support"
  cat >> .config <<-EOT
	CONFIG_DRIVER_BROADCOM=y
	CFLAGS += -I${BROADCOM_INCLUDES}
	EOT
fi

  make -j${NJOBS} V=1 || make V=1 || exit 1
  make -j${NJOBS} wpa_gui-qt4 V=1 || exit 1

) || exit 1


# binary
mkdir -p ${PKG}/usr/sbin
install -m 0755 ${NAME}/wpa_passphrase ${PKG}/usr/sbin/ || exit 1
install -m 0755 ${NAME}/wpa_cli ${PKG}/usr/sbin/ || exit 1
install -m 0755 ${NAME}/wpa_supplicant ${PKG}/usr/sbin/ || exit 1
mkdir -p ${PKG}/etc/dbus-1/system.d/
install -m 0644 ${NAME}/dbus-wpa_supplicant.conf \
  ${PKG}/etc/dbus-1/system.d/wpa_supplicant.conf.new || exit 1
mkdir -p ${PKG}/usr/share/dbus-1/system-services/
install -m 0644 ${NAME}/dbus-wpa_supplicant.service \
  ${PKG}/usr/share/dbus-1/system-services/fi.epitest.hostap.WPASupplicant.service || exit 1

# gui
mkdir -p ${PKG}/usr/bin
install -m 0755 ${NAME}/wpa_gui-qt4/wpa_gui ${PKG}/usr/bin/ || exit 1

# init scripts
mkdir -p ${PKG}/etc/logrotate.d

cat > ${PKG}/etc/wpa_supplicant.conf.new <<'_EOT_'
# See /usr/doc/${PRGNAM}-${VERSION}/wpa_supplicant.conf.sample
# for many more options that you can use in this file.

# This line enables the use of wpa_cli which is used by rc.wireless
# if possible (to check for successful association)
ctrl_interface=/var/run/wpa_supplicant
# By default, only root (group 0) may use wpa_cli
ctrl_interface_group=0
eapol_version=1
ap_scan=1
fast_reauth=1
#country=US

# WPA protected network, supply your own ESSID and WPAPSK here:
network={
  scan_ssid=0
  ssid="your_essid_here"
  proto=WPA RSN
  key_mgmt=WPA-PSK
  pairwise=CCMP TKIP
  group=CCMP TKIP WEP104 WEP40
  psk=your_64_char_psk_here
  priority=10
}

# Plaintext connection (no WPA, no IEEE 802.1X),
# nice for hotel/airport types of WiFi network.
network={
  key_mgmt=NONE
  priority=0
}
_EOT_
chmod 0600 ${PKG}/etc/wpa_supplicant.conf.new || exit 1

cat > ${PKG}/etc/logrotate.d/logrotate.d/${NAME}.new <<'EOF'
/var/log/wpa_supplicant.log {
    missingok
    notifempty
    size 30k
    create 0600 root root
}
EOF

# running
mkdir -p ${PKG}/var/run/${NAME}

# man pages
mkdir -p ${PKG}/usr/man/man{5,8}
install -m 0644 ${NAME}/doc/docbook/*.8 ${PKG}/usr/man/man8/ || exit 1
install -m 0644 ${NAME}/doc/docbook/*.5 ${PKG}/usr/man/man5/ || exit 1

# some cleanup in docs
rm -f  ${NAME}/doc/.cvsignore
rm -rf ${NAME}/doc/docbook

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/usr/share/applications
desktop-file-install --vendor="" \
  --dir ${PKG}/usr/share/applications \
  ${NAME}/wpa_gui-qt4/wpa_gui.desktop || exit 1

mkdir -p ${PKG}/usr/share/icons/hicolor/scalable/apps
install -pm0644 ${NAME}/wpa_gui-qt4/icons/wpa_gui.svg \
  ${PKG}/usr/share/icons/hicolor/scalable/apps/wpa_gui.svg || exit 1

for res in 16 22 32 48 64 128 ;do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
  mkdir -p ${dir}
  install -pm0644 hicolor/${res}x${res}/apps/wpa_gui.png ${dir}/wpa_gui.png || exit 1
done

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  COPYING README ${NAME}/{ChangeLog,/eap_testing.txt,todo.txt,wpa_supplicant.conf,examples} \
  ${CWD}/README.slackware ${CWD}/ChangeLog.SB ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/${NAME}.config ${CWD}/README.slackware \
                 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.gz \
                 ${SBDIR}/patches/
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
