#!/bin/sh
#-- qemu for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.brg>
# Suggested usage: $ qemu.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008, 2009, 2010, 2011 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.nongnu.org/qemu/
# http://kvm.qumranet.com/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=qemu-kvm
NAME=qemu
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.0}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
SF_MIRROR=${SF_MIRROR:-http://prdownloads.sourceforge.net}
DL_URL="${SF_MIRROR}/kvm/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

sed -i -e 's| NAME="%k",||g' kvm/scripts/65-kvm.rules

SB_AUDIO="alsa,pa,sdl,oss"

unset CFLAGS
unset SLKLDFLAGS SLKLDFLAGSB
if [ "${LDFLAGS}" ] ;then
  SLKLDFLAGS="${LDFLAGS}"
  SLKLDFLAGSB="VL_LDFLAGS=${LDFLAGS}"
fi
unset LDFLAGS

buildarch="\
  i386-softmmu x86_64-softmmu arm-softmmu cris-softmmu m68k-softmmu \
  mips-softmmu mipsel-softmmu mips64-softmmu mips64el-softmmu \
  sh4-softmmu sh4eb-softmmu \
  i386-linux-user x86_64-linux-user alpha-linux-user arm-linux-user \
  armeb-linux-user cris-linux-user m68k-linux-user mips-linux-user \
  mipsel-linux-user sh4-linux-user sh4eb-linux-user"

( set -o xtrace
  gcc ${SLKCFLAGS} -g ${LDFLAGS} ${CWD}/ksmctl.c -o ksmctl || exit 1
) || exit 1

SB_CONFIGURE() {
./configure \
  --prefix=/usr \
  --sysconfdir=/etc \
  --audio-drv-list=${SB_AUDIO} \
  --disable-strip \
  --extra-ldflags="${SLKLDFLAGS} -pie -Wl,-z,relro -Wl,-z,now" \
  --extra-cflags="${SLKCFLAGS} -fPIE -DPIE" \
  --disable-werror \
  --disable-xen "$@" || return $?

  make -j${NJOBS} -k V=1 ${SLKLDFLAGSB} || make V=1 ${SLKLDFLAGSB} || return $?
}

case "${ARCH}" in
  i[3-6]86|x86_64)

  SB_CONFIGURE \
    --target-list=x86_64-softmmu || exit $?
  
  cp -a x86_64-softmmu/qemu-system-x86_64 qemu-kvm || exit 1
  make clean

  ;;
esac

SB_CONFIGURE \
  --interp-prefix=/usr/qemu-%MM \
  --target-list="${buildarch}" \
  --disable-kvm || exit $?

make \
  prefix="${PKG}/usr" \
  bindir="${PKG}/usr/bin" \
  sharedir="${PKG}/usr/share/qemu" \
  mandir="${PKG}/usr/man" \
  docdir="${DOCDIR}" \
  datadir="${PKG}/usr/share/qemu" \
  sysconfdir="${PKG}/etc" install || exit 1

install -m 0755 kvm/kvm_stat ${PKG}/usr/bin/ || exit 1
install -m 0755 qemu-kvm ${PKG}/usr/bin/ || exit 1

chmod -x ${PKG}/usr/man/man1/*

rm -rf ${PKG}/usr/share/qemu/pxe*bin
rm -rf ${PKG}/usr/share/qemu/pxe*rom
rm -rf ${PKG}/usr/share/qemu/gpxe*rom
rm -rf ${PKG}/usr/share/qemu/vgabios*bin
rm -rf ${PKG}/usr/share/qemu/bios.bin
rm -rf ${PKG}/usr/share/qemu/openbios-ppc
rm -rf ${PKG}/usr/share/qemu/openbios-sparc32
rm -rf ${PKG}/usr/share/qemu/openbios-sparc64
rm -rf ${PKG}/usr/share/qemu/petalogix*.dtb
rm -rf ${PKG}/usr/share/qemu/s390-zipl.rom
rm -rf ${PKG}/usr/share/qemu/bamboo.dtb
rm -rf ${PKG}/usr/share/qemu/slof.bin
rm -rf ${PKG}/usr/share/qemu/spapr-rtas.bin
rm -rf ${PKG}/usr/share/qemu/ppc_rom.bin

# the pxe gpxe images will be symlinks to the images on
# /usr/share/gpxe, as QEMU doesn't know how to look
# for other paths, yet.
pxe_link() {
  ln -s ../gpxe/$2.rom ${PKG}/usr/share/qemu/pxe-$1.rom
}

pxe_link e1000 8086100e
pxe_link ne2k_pci rtl8029
pxe_link pcnet pcnet32
pxe_link rtl8139 rtl8139
pxe_link virtio virtio-net
ln -s ../vgabios/VGABIOS-lgpl-latest.bin  ${PKG}/usr/share/qemu/vgabios.bin
ln -s ../vgabios/VGABIOS-lgpl-latest.cirrus.bin ${PKG}/usr/share/qemu/vgabios-cirrus.bin
ln -s ../vgabios/VGABIOS-lgpl-latest.qxl.bin ${PKG}/usr/share/qemu/vgabios-qxl.bin
ln -s ../vgabios/VGABIOS-lgpl-latest.stdvga.bin ${PKG}/usr/share/qemu/vgabios-stdvga.bin
ln -s ../vgabios/VGABIOS-lgpl-latest.vmware.bin ${PKG}/usr/share/qemu/vgabios-vmware.bin
ln -s ../seabios/bios.bin ${PKG}/usr/share/qemu/bios.bin

mkdir -p ${PKG}/lib/systemd/system
install -p -m 0755 ksmctl ${PKG}/lib/systemd/ksmctl || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mv ${PKG}/etc/qemu/target-x86_64.conf ${PKG}/etc/qemu/target-x86_64.conf.new

mkdir -p ${PKG}/usr/sbin
install -p -m 0755 ${CWD}/ksmtuned ${PKG}/usr/sbin/ksmtuned || exit 1

mkdir -p ${PKG}/etc
install -p -m 0644 ${CWD}/ksmtuned.conf ${PKG}/etc/ksmtuned.conf.new || exit 1

mkdir -p ${PKG}/lib/udev/rules.d
install -p -m644 kvm/scripts/65-kvm.rules ${PKG}/lib/udev/rules.d/80-kvm.rules || exit 1
cat > ${PKG}/lib/udev/rules.d/99-qemu-guest-agent.rules <<'EOF'
SUBSYSTEM=="virtio-ports", ATTR{name}=="org.qemu.guest_agent.0", \
  TAG+="systemd" ENV{SYSTEMD_WANTS}="qemu-guest-agent.service"
EOF

mkdir -p ${PKG}/etc/default
cat > ${PKG}/etc/default/ksm.new <<'EOF'
# The maximum number of unswappable kernel pages
# which may be allocated by ksm (0 for unlimited)
# If unset, defaults to half of total memory
# KSM_MAX_KERNEL_PAGES=
EOF

mkdir -p ${PKG}/etc/rc.d
install -pm0755 ${CWD}/rc.kvm \
  ${PKG}/etc/rc.d/rc.kvm.new || exit 1

mkdir -p ${PKG}/var/log/setup
zcat ${CWD}/setup.onlyonce.rckvm.gz \
  > ${PKG}/var/log/setup/setup.onlyonce.rckvm|| exit 1
chmod 0755 ${PKG}/var/log/setup/setup.onlyonce.rckvm || exit 1

install -pm0644 ${CWD}/systemd/*.service ${PKG}/lib/systemd/system/ || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  Changelog COPYING{,.LIB} LICENSE README TODO qemu-doc.html qemu-tech.html \
  ${CWD}/ChangeLog.SB ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi
chmod -x ${PKG}/usr/man/man1/*

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
function free_group_id {
  # Find a free group-ID >= 120 (should be < 1000 so it's not a normal group)
  local FREE_GROUP_ID=120
  while grep --quiet "^.*:.*:${FREE_GROUP_ID}:" etc/group; do
    let FREE_GROUP_ID++
  done
  echo ${FREE_GROUP_ID}
}

# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
  CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

# Set up group.
if ! grep --quiet '^kvm:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
            -g $(free_group_id) \
            kvm 2> /dev/null
fi
EOF

cat >> ${PKG}/install/doinst.sh <<EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

if [ -r etc/rc.d/rc.kvm -a -r etc/rc.d/rc.kvm.new ]; then
  chmod --reference=etc/rc.d/rc.kvm etc/rc.d/rc.kvm.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
if [ -x bin/systemctl ] ; then
  ${CHROOT} /bin/systemctl daemon-reload >/dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{patches,systemd}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/rc.kvm ${CWD}/setup.onlyonce.rc*.gz ${CWD}/ksmctl.c \
    ${CWD}/ksmtuned* ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  install -m0644 ${CWD}/systemd/*.* \
    ${SBDIR}/systemd/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
