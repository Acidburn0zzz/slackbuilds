#!/bin/sh
#-- ca-certificates for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ ca-certificates.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008, 2009, 2010, 2011 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.mozilla.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=ca-certificates
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-2012.1.85}
CAVER="$(echo ${VERSION} | cut -d. -f2-)"
ARCH=noarch
SLKTARGET=${SLKTARGET:-i486}
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

PKIDIR=/etc/pki
SB_CABDIR=/etc/ssl

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=certdata.txt
SRCARCHIVE2=mkcabundle.pl
SRCARCHIVE3=generate-cacerts.pl
SRCARCHIVE4=blacklist.txt
SRCARCHIVE5=certdata2pem.py

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
SF_MIRROR=${SF_MIRROR:-http://prdownloads.sourceforge.net}
DL_URL="${SF_MIRROR}/${NAME}/${SRCARCHIVE}"
FEDORADIST=fedora-dist.sh
FEDORABRANCH=${FEDORABRANCH:-devel}

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || cvs -d :pserver:anonymous@cvs-mirror.mozilla.org:/cvsroot co -p mozilla/security/nss/lib/ckfw/builtins/certdata.txt \
  > ${CWD}/${SRCARCHIVE} || exit 1
#test -r ${CWD}/${SRCARCHIVE} || sh ${CWD}/${FEDORADIST} ${NAME} ${FEDORABRANCH} ${SRCARCHIVE} || exit 1
test -r ${CWD}/${SRCARCHIVE} || ${CWD}/mkcabundle.pl > ${CWD}/${SRCARCHIVE} || exit 1

if ! test -s ${CWD}/${SRCARCHIVE} ;then
  echo "Delete ${CWD}/${SRCARCHIVE} and try again."
  exit 1
fi

RVER="$(grep Revision ${CWD}/${SRCARCHIVE} | awk '{print $7}')"
if [ "${RVER}" != "${CAVER}" ] ;then
  echo "Version mismatch. You have ${RVER} in ${CWD}/${SRCARCHIVE} instead ${CAVER} "
  echo "Remove ${CWD}/${SRCARCHIVE} and try again"
  exit 1
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
mkdir ${SRCDIR} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1

mkdir certs
( cd certs 
  cp ${CWD}/${SRCARCHIVE} ${CWD}/${SRCARCHIVE4} . || exit 1
  python ${CWD}/${SRCARCHIVE5} || exit 1
) || exit 1

( cat <<EOF
# This is a bundle of X.509 certificates of public Certificate
# Authorities.  It was generated from the Mozilla root CA list.
#
# Source: mozilla/security/nss/lib/ckfw/builtins/certdata.txt
#
# Generated from:
EOF
   ident -q ${CWD}/${SRCARCHIVE} | sed '1d;s/^/#/';
   echo '#';

) > ca-bundle.crt || exit 1

( cat <<EOF
# This is a bundle of X.509 certificates of public Certificate
# Authorities.  It was generated from the Mozilla root CA list.
# These certificates are in the OpenSSL "TRUSTED CERTIFICATE"
# format and have trust bits set accordingly.
#
# Source: mozilla/security/nss/lib/ckfw/builtins/certdata.txt
#
# Generated from:
EOF
  ident -q ${CWD}/${SRCARCHIVE} | sed '1d;s/^/#/';
  echo '#';
) > ca-bundle.trust.crt || exit 1

for f in certs/*.crt; do 
  tbits=$(sed -n '/^# openssl-trust/{s/^.*=//;p;}' ${f})
  case ${tbits} in
    *serverAuth*) openssl x509 -text -in "${f}" >> ca-bundle.crt ;;
  esac
  if [ -n "${tbits}" ]; then
    targs=""
    for t in ${tbits}; do
      targs="${targs} -addtrust ${t}"
    done
      openssl x509 -text -in "${f}" -trustout ${targs} >> ca-bundle.trust.crt || exit 1
  fi
done

mkdir java
( cd java
  test -s ../ca-bundle.crt || exit 1
  /usr/bin/perl ${CWD}/${SRCARCHIVE3} /usr/bin/gkeytool ../ca-bundle.crt || exit 1
  touch -r ${CWD}/${SRCARCHIVE} cacerts
  test -s cacerts || exit 1
) || exit 1

mkdir -p ${PKG}/${SB_CABDIR}/certs ${PKG}/${PKIDIR}
ln -s ../ssl ${PKG}/${PKIDIR}/tls
install -p -m 644 ./ca-bundle.crt \
  ${PKG}/${SB_CABDIR}/certs/ca-bundle.crt.new || exit 1
install -p -m 644 ./ca-bundle.trust.crt \
  ${PKG}/${SB_CABDIR}/certs/ca-bundle.trust.crt.new || exit 1
ln -s certs/ca-bundle.crt ${PKG}/${SB_CABDIR}/cert.pem

# Install Java cacerts file.
mkdir -p -m 700 ${PKG}/${PKIDIR}/java
install -p -m 644 java/cacerts ${PKG}/${PKIDIR}/java/cacerts.new || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/${FEDORADIST} ${CWD}/${SRCARCHIVE2} ${CWD}/${SRCARCHIVE3} \
                 ${CWD}/${SRCARCHIVE4} ${CWD}/${SRCARCHIVE5} ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
