From a75a1635a9771c0c4c536fb609caf63d166d4552 Mon Sep 17 00:00:00 2001
From: Heinemann JÃ¼rgen (Undefined) <nospam __AT. hjcms __DOT. de>
Date: Wed, 04 May 2011 05:27:00 +0000
Subject: Mi 4. Mai 11:36:27 CEST 2011

---
diff --git a/.gitignore b/.gitignore
index 680b94a..8d22e86 100644
--- a/.gitignore
+++ b/.gitignore
@@ -9,3 +9,9 @@ qx11grab.spec
 ctags
 testcmd.sh
 tags
+.kdev4
+*.kdev4
+.kdev4
+*.kdev4
+.kdev4
+*.kdev4
diff --git a/cmake.sh b/cmake.sh
index e9d83c8..57268a3 100755
--- a/cmake.sh
+++ b/cmake.sh
@@ -1,53 +1,22 @@
 #!/bin/sh
 #################################################################
-# Author: Juergen Heinemann http://www.hjcms.de, (C) 2007-2010
+# Author: Juergen Heinemann http://www.hjcms.de, (C) 2007-2011
 #
 # Copyright: See COPYING file that comes with this distribution
 #################################################################
 
-debug_build_target=$HOME/hjcms/qx11grab/build
-
-enable_kde4_support=0
-
-MY_CFLAGS="-O3 -mtune=athlon-xp -march=i686 -pedantic"
-
-function runcmake() {
-  if test $enable_kde4_support -eq 1 ; then
-    cmake \
-      -DCMAKE_CXX_FLAGS:STRING="$MY_CFLAGS" \
-      -DCMAKE_C_FLAGS:STRING="$MY_CFLAGS" \
-      -DCMAKE_INSTALL_PREFIX:PATH=/usr \
-      -DCMAKE_BUILD_TYPE:STRING=Debug \
-      -DQTIDY_ENABLE_FPIE:BOOL=ON \
-      -DCMAKE_SKIP_RPATH:BOOL=ON \
-      -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
-      -DAUTOMOC4_EXECUTABLE:FILEPATH=$(which automoc4) \
-      -DAutomoc4_DIR:PATH=$(dirname /usr/*/cmake/automoc4/Automoc4Config.cmake) \
-      ../
-  else
-    cmake \
-      -DCMAKE_CXX_FLAGS:STRING="$MY_CFLAGS" \
-      -DCMAKE_C_FLAGS:STRING="$MY_CFLAGS" \
-      -DCMAKE_INSTALL_PREFIX:PATH=/usr \
-      -DCMAKE_BUILD_TYPE:STRING=Debug \
-      -DQTIDY_ENABLE_FPIE:BOOL=ON \
-      -DCMAKE_SKIP_RPATH:BOOL=ON \
-      -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
-      -DDISABLE_KDE_SUPPORT:BOOL=ON \
-      ../
-  fi
-}
-
-echo "cmake"
-
-if test "$PWD" = "${debug_build_target}" ; then
-  if test -f cmake_install.cmake ; then
-    rm -rf ${debug_build_target}/*
-  fi
-  runcmake
-else
-  mkdir -p build
-  pushd build
-    runcmake
-  popd
+if test -f $HOME/hjcms/projectconfigurations.txt ; then
+. $HOME/hjcms/projectconfigurations.txt
 fi
+
+cmake -Wdev \
+	-DCMAKE_CXX_FLAGS:STRING="${CFLAGS:-"-O2"}" \
+	-DCMAKE_INSTALL_PREFIX:PATH=/usr \
+	-DCMAKE_BUILD_TYPE:STRING=Debug \
+	-DXHTMLDBG_BUILD_VERBOSE:BOOL=ON \
+	-DCMAKE_SKIP_RPATH:BOOL=ON \
+	-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
+	-DXHTMLDBG_EXPERIMENTAL:BOOL=ON \
+	-DPHONON_STL_INCLUDE_DIR:PATH=/usr/include/KDE \
+	-DAUTOMOC4_EXECUTABLE:FILEPATH=$(which automoc4) \
+	-DCPACK_PACKAGE_INSTALL_DIRECTORY:PATH="$INSTALL_DESTDIR" $@ ../
diff --git a/qx11grab.desktop.cmake b/qx11grab.desktop.cmake
index 029165b..de86553 100644
--- a/qx11grab.desktop.cmake
+++ b/qx11grab.desktop.cmake
@@ -11,4 +11,5 @@ StartupNotify=false
 X-KDE-StartupNotify=true
 X-DBUS-ServiceName=@QX11GRAB_DBUS_DOMAIN_NAME@
 X-DBUS-ServiceType=Unique
+X-KDE-autostart-after=plasma
 X-KDE-AutoEmbed=false
diff --git a/src/audiodevice.cpp b/src/audiodevice.cpp
index 42164ca..fe33fe9 100644
--- a/src/audiodevice.cpp
+++ b/src/audiodevice.cpp
@@ -38,67 +38,67 @@
 #include <QtGui/QVBoxLayout>
 
 AudioDevice::AudioDevice ( QWidget * parent )
-    : QWidget ( parent )
+        : QWidget ( parent )
 {
-  setObjectName ( QLatin1String ( "audiodevice" ) );
-  setContentsMargins ( 0, 2, 0, 2 );
-
-  QVBoxLayout* vLayout = new QVBoxLayout ( this );
-  vLayout->setContentsMargins ( 0, 2, 0, 2 );
-
-  QGroupBox* audioGroup = new QGroupBox ( trUtf8 ( "Audio Settings" ), this );
-  audioGroup->setFlat ( true );
-  QGridLayout* gridLayout = new QGridLayout ( audioGroup );
-
-  m_swap_alsa = new QRadioButton ( trUtf8 ( "Advanced Linux Sound Architecture (Alsa)" ), audioGroup );
-  gridLayout->addWidget ( m_swap_alsa, 0, 0, 1, 1 );
-
-  m_swap_oss = new QRadioButton ( trUtf8 ( "Open Sound System (OSS)" ), audioGroup );
-  gridLayout->addWidget ( m_swap_oss, 0, 1, 1, 2 );
-  // Setze Alsa als Standard
-  m_swap_alsa->setChecked ( true );
-
-  QLabel* txt0 = new QLabel ( audioGroup );
-  txt0->setText ( trUtf8 ( "Audio Intensifier:" ) );
-  txt0->setAlignment ( ( Qt::AlignRight | Qt::AlignTrailing | Qt::AlignVCenter ) );
-  gridLayout->addWidget ( txt0, 1, 0, 1, 1 );
-
-  intensifier = new QSpinBox ( audioGroup );
-  intensifier->setSingleStep ( 2 );
-  intensifier->setRange ( 0, 512 );
-  intensifier->setValue ( 256 );
-  intensifier->setObjectName ( QLatin1String ( "audio_intensifier" ) );
-  intensifier->setToolTip ( trUtf8 ( "Change Audio Volume (256=normal)" ) );
-  intensifier->setWhatsThis ( trUtf8 ( "Change Audio Amplifier.\nDefault: 256=normal" ) );
-  gridLayout->addWidget ( intensifier, 1, 1, 1, 2 );
-
-  QLabel* txt1 = new QLabel ( audioGroup );
-  txt1->setText ( trUtf8 ( "Audio Capture Device:" ) );
-  txt1->setAlignment ( ( Qt::AlignRight | Qt::AlignTrailing | Qt::AlignVCenter ) );
-  gridLayout->addWidget ( txt1, 2, 0, 1, 1 );
-
-  device = new QLineEdit ( audioGroup );
-  device->setObjectName ( QLatin1String ( "device" ) );
-  device->setWhatsThis ( trUtf8 ( "Change Audio Capture Device\nOSS Default: /dev/dsp or Alsa Default: default" ) );
-  gridLayout->addWidget ( device, 2, 1, 1, 1 );
-
-  findAlsaPCMButton = new QToolButton ( audioGroup );
-  findAlsaPCMButton->setObjectName ( QLatin1String ( "findalsapcmbutton" ) );
-  findAlsaPCMButton->setIcon ( getThemeIcon ( "audio-headset" ) );
-  findAlsaPCMButton->setWhatsThis ( trUtf8 ( "Select ALSA Audio Capture Device" ) );
-  findAlsaPCMButton->setDisabled ( true ); // Standard ist Deaktiviert
-  gridLayout->addWidget ( findAlsaPCMButton, 2, 2, 1, 1 );
-
-  vLayout->addWidget ( audioGroup );
-  vLayout->addStretch ( 1 );
-
-  setLayout ( vLayout );
-
-  connect ( m_swap_alsa, SIGNAL ( toggled ( bool ) ),
-            findAlsaPCMButton, SLOT ( setEnabled ( bool ) ) );
-
-  connect ( findAlsaPCMButton, SIGNAL ( clicked () ),
-            this, SLOT ( getpcmClicked() ) );
+    setObjectName ( QLatin1String ( "audiodevice" ) );
+    setContentsMargins ( 0, 2, 0, 2 );
+
+    QVBoxLayout* vLayout = new QVBoxLayout ( this );
+    vLayout->setContentsMargins ( 0, 2, 0, 2 );
+
+    QGroupBox* audioGroup = new QGroupBox ( trUtf8 ( "Audio Settings" ), this );
+    audioGroup->setFlat ( true );
+    QGridLayout* gridLayout = new QGridLayout ( audioGroup );
+
+    m_swap_alsa = new QRadioButton ( trUtf8 ( "Advanced Linux Sound Architecture (Alsa)" ), audioGroup );
+    gridLayout->addWidget ( m_swap_alsa, 0, 0, 1, 1 );
+
+    m_swap_oss = new QRadioButton ( trUtf8 ( "Open Sound System (OSS)" ), audioGroup );
+    gridLayout->addWidget ( m_swap_oss, 0, 1, 1, 2 );
+    // Setze Alsa als Standard
+    m_swap_alsa->setChecked ( true );
+
+    QLabel* txt0 = new QLabel ( audioGroup );
+    txt0->setText ( trUtf8 ( "Audio Intensifier:" ) );
+    txt0->setAlignment ( ( Qt::AlignRight | Qt::AlignTrailing | Qt::AlignVCenter ) );
+    gridLayout->addWidget ( txt0, 1, 0, 1, 1 );
+
+    intensifier = new QSpinBox ( audioGroup );
+    intensifier->setSingleStep ( 2 );
+    intensifier->setRange ( 0, 512 );
+    intensifier->setValue ( 256 );
+    intensifier->setObjectName ( QLatin1String ( "audio_intensifier" ) );
+    intensifier->setToolTip ( trUtf8 ( "Change Audio Volume (256=normal)" ) );
+    intensifier->setWhatsThis ( trUtf8 ( "Change Audio Amplifier.\nDefault: 256=normal" ) );
+    gridLayout->addWidget ( intensifier, 1, 1, 1, 2 );
+
+    QLabel* txt1 = new QLabel ( audioGroup );
+    txt1->setText ( trUtf8 ( "Audio Capture Device:" ) );
+    txt1->setAlignment ( ( Qt::AlignRight | Qt::AlignTrailing | Qt::AlignVCenter ) );
+    gridLayout->addWidget ( txt1, 2, 0, 1, 1 );
+
+    device = new QLineEdit ( audioGroup );
+    device->setObjectName ( QLatin1String ( "device" ) );
+    device->setWhatsThis ( trUtf8 ( "Change Audio Capture Device\nOSS Default: /dev/dsp or Alsa Default: default" ) );
+    gridLayout->addWidget ( device, 2, 1, 1, 1 );
+
+    findAlsaPCMButton = new QToolButton ( audioGroup );
+    findAlsaPCMButton->setObjectName ( QLatin1String ( "findalsapcmbutton" ) );
+    findAlsaPCMButton->setIcon ( getThemeIcon ( "audio-headset" ) );
+    findAlsaPCMButton->setWhatsThis ( trUtf8 ( "Select ALSA Audio Capture Device" ) );
+    findAlsaPCMButton->setDisabled ( true ); // Standard ist Deaktiviert
+    gridLayout->addWidget ( findAlsaPCMButton, 2, 2, 1, 1 );
+
+    vLayout->addWidget ( audioGroup );
+    vLayout->addStretch ( 1 );
+
+    setLayout ( vLayout );
+
+    connect ( m_swap_alsa, SIGNAL ( toggled ( bool ) ),
+              findAlsaPCMButton, SLOT ( setEnabled ( bool ) ) );
+
+    connect ( findAlsaPCMButton, SIGNAL ( clicked () ),
+              this, SLOT ( getpcmClicked() ) );
 }
 
 /**
@@ -107,16 +107,16 @@ AudioDevice::AudioDevice ( QWidget * parent )
 */
 void AudioDevice::setAlsaRecordingPCM()
 {
-  PicRecordInterface* dialog = new PicRecordInterface ( this );
-  dialog->setCard ( device->text() );
-  if ( dialog->exec() == QDialog::Accepted )
-  {
-    AlsaAudioDevice d = dialog->cardInfo();
-    device->setText ( d.name );
-    device->setToolTip ( d.hw );
-    device->setStatusTip ( d.description );
-  }
-  delete dialog;
+    PicRecordInterface* dialog = new PicRecordInterface ( this );
+    dialog->setCard ( device->text() );
+    if ( dialog->exec() == QDialog::Accepted )
+    {
+        AlsaAudioDevice d = dialog->cardInfo();
+        device->setText ( d.name );
+        device->setToolTip ( d.hw );
+        device->setStatusTip ( d.description );
+    }
+    delete dialog;
 }
 
 /**
@@ -125,8 +125,8 @@ void AudioDevice::setAlsaRecordingPCM()
 */
 void AudioDevice::getpcmClicked()
 {
-  if ( m_swap_alsa->isChecked() )
-    setAlsaRecordingPCM();
+    if ( m_swap_alsa->isChecked() )
+        setAlsaRecordingPCM();
 }
 
 /**
@@ -134,7 +134,7 @@ void AudioDevice::getpcmClicked()
 */
 void AudioDevice::setVolume ( int i )
 {
-  intensifier->setValue ( i );
+    intensifier->setValue ( i );
 }
 
 /**
@@ -142,7 +142,7 @@ void AudioDevice::setVolume ( int i )
 */
 int AudioDevice::getVolume ()
 {
-  return intensifier->value();
+    return intensifier->value();
 }
 
 /**
@@ -150,16 +150,16 @@ int AudioDevice::getVolume ()
 */
 void AudioDevice::setAudioEngine ( const QString &t )
 {
-  if ( t.contains ( QString::fromUtf8 ( "alsa" ) ) )
-  {
-    m_swap_alsa->setChecked ( true );
-    findAlsaPCMButton->setDisabled ( false );
-  }
-  else
-  {
-    m_swap_oss->setChecked ( true );
-    findAlsaPCMButton->setDisabled ( true );
-  }
+    if ( t.contains ( QString::fromUtf8 ( "alsa" ) ) )
+    {
+        m_swap_alsa->setChecked ( true );
+        findAlsaPCMButton->setDisabled ( false );
+    }
+    else
+    {
+        m_swap_oss->setChecked ( true );
+        findAlsaPCMButton->setDisabled ( true );
+    }
 }
 
 /**
@@ -168,7 +168,7 @@ void AudioDevice::setAudioEngine ( const QString &t )
 */
 const QString AudioDevice::getAudioEngine ()
 {
-  return m_swap_alsa->isChecked() ? QLatin1String ( "alsa" ) : QLatin1String ( "oss" );
+    return m_swap_alsa->isChecked() ? QLatin1String ( "alsa" ) : QLatin1String ( "oss" );
 }
 
 /**
@@ -177,7 +177,7 @@ const QString AudioDevice::getAudioEngine ()
 */
 void AudioDevice::setAudioDevice ( const QString &d )
 {
-  device->setText ( d );
+    device->setText ( d );
 }
 
 /**
@@ -186,7 +186,7 @@ void AudioDevice::setAudioDevice ( const QString &d )
 */
 const QString AudioDevice::getAudioDevice ()
 {
-  return device->text();
+    return device->text();
 }
 
 /**
@@ -195,19 +195,19 @@ const QString AudioDevice::getAudioDevice ()
 */
 const QStringList AudioDevice::data()
 {
-  QStringList cmd;
-  if ( device->text().isEmpty() )
-    return cmd;
+    QStringList cmd;
+    if ( device->text().isEmpty() )
+        return cmd;
 
-  if ( m_swap_alsa->isChecked() )
-    cmd << "-f" << "alsa" << "-i" << device->text();
-  else
-    cmd << "-f" << "oss" << "-i" << device->text();
+    if ( m_swap_alsa->isChecked() )
+        cmd << "-f" << "alsa" << "-i" << device->text();
+    else
+        cmd << "-f" << "oss" << "-i" << device->text();
 
-  if ( intensifier->value() != 256 )
-    cmd << "-vol" << QString::number ( intensifier->value() );
+    if ( intensifier->value() != 256 )
+        cmd << "-vol" << QString::number ( intensifier->value() );
 
-  return cmd;
+    return cmd;
 }
 
 AudioDevice::~AudioDevice()
diff --git a/src/defaults.cpp b/src/defaults.cpp
index a6771b3..0648380 100644
--- a/src/defaults.cpp
+++ b/src/defaults.cpp
@@ -43,75 +43,83 @@
 #include <QtGui/QToolButton>
 
 Defaults::Defaults ( QWidget * parent )
-    : QWidget ( parent )
+        : QWidget ( parent )
 {
-  setObjectName ( QLatin1String ( "defaults" ) );
-  setBackgroundRole ( QPalette::Window );
-
-  QGridLayout* gridLayout = new QGridLayout ( this );
-  gridLayout->setContentsMargins ( 2, 2, 2, 2 );
-  gridLayout->setObjectName ( QLatin1String ( "gridLayout" ) );
-
-  QIcon folderIcon = getThemeIcon ( "folder-open" );
-
-  Qt::Alignment labelAlignment = ( Qt::AlignRight | Qt::AlignTrailing | Qt::AlignVCenter );
-
-  // begin: FFmpeg Binary
-  QLabel* txt_ffbinary = new QLabel ( this );
-  txt_ffbinary->setText ( trUtf8 ( "FFmpeg Application:" ) );
-  txt_ffbinary->setAlignment ( labelAlignment );
-  gridLayout->addWidget ( txt_ffbinary, 0, 0, 1, 1 );
-
-  ff_path = new QLineEdit ( this );
-  ff_path->setObjectName ( QLatin1String ( "ff_path" ) );
-  ff_path->setText ( QString::fromUtf8 ( "/usr/bin/ffmpeg" ) );
-  gridLayout->addWidget ( ff_path, 0, 1, 1, 1 );
-
-  QToolButton* setFFmpegBtn = new QToolButton ( this );
-  setFFmpegBtn->setIcon ( folderIcon );
-  gridLayout->addWidget ( setFFmpegBtn, 0, 2, 1, 1 );
-  // end: FFmpeg Binary
-
-  // begin: Output Filename
-  QLabel* txt_outfile = new QLabel ( this );
-  txt_outfile->setText ( trUtf8 ( "Output Filename:" ) );
-  txt_outfile->setAlignment ( labelAlignment );
-  gridLayout->addWidget ( txt_outfile, 1, 0, 1, 1 );
-
-  outputName = new QLineEdit ( this );
-  outputName->setObjectName ( QLatin1String ( "outputName" ) );
-  outputName->setText ( QString::fromUtf8 ( "qx11grab-XXXXXX.avi" ) );
-  gridLayout->addWidget ( outputName, 1, 1, 1, 2 );
-  // end: Output Filename
-
-  // begin: Output Directory
-  QLabel* txt_outdir = new QLabel ( this );
-  txt_outdir->setText ( trUtf8 ( "Output Directory:" ) );
-  txt_outdir->setAlignment ( labelAlignment );
-  gridLayout->addWidget ( txt_outdir, 2, 0, 1, 1 );
-
-  outputDirectory = new QLineEdit ( this );
-  outputDirectory->setObjectName ( QLatin1String ( "tempdir" ) );
-  outputDirectory->setText ( QString::fromUtf8 ( "/tmp" ) );
-  gridLayout->addWidget ( outputDirectory, 2, 1, 1, 1 );
-
-  QToolButton* setOutputBtn = new QToolButton ( this );
-  setOutputBtn->setIcon ( folderIcon );
-  gridLayout->addWidget ( setOutputBtn, 2, 2, 1, 1 );
-  // end: Output Directory
-
-  // begin: Audio Device
-  m_audioDevice = new AudioDevice ( this );
-  gridLayout->addWidget ( m_audioDevice, 3, 0, 1, 3 );
-  // end: Audio Device
-
-  QSpacerItem* spacer  = new QSpacerItem ( 20, 40, QSizePolicy::Minimum, QSizePolicy::Expanding );
-  gridLayout->addItem ( spacer, 6, 0, 1, 2 );
-
-  setLayout ( gridLayout );
-
-  connect ( setFFmpegBtn, SIGNAL ( clicked() ), this, SLOT ( setFFmpegBinary() ) );
-  connect ( setOutputBtn, SIGNAL ( clicked() ), this, SLOT ( setOutpuDirectory() ) );
+    setObjectName ( QLatin1String ( "defaults" ) );
+    setBackgroundRole ( QPalette::Window );
+
+    QGridLayout* gridLayout = new QGridLayout ( this );
+    gridLayout->setContentsMargins ( 2, 2, 2, 2 );
+    gridLayout->setObjectName ( QLatin1String ( "gridLayout" ) );
+
+    QIcon folderIcon = getThemeIcon ( "folder-open" );
+
+    Qt::Alignment labelAlignment = ( Qt::AlignRight | Qt::AlignTrailing | Qt::AlignVCenter );
+
+    int gridRow = 0;
+    // begin: Pulse pasuspender
+    m_setPasuspender = new QCheckBox ( this );
+    m_setPasuspender->setText ( trUtf8 ( "Enable temporarily suspend PulseAudio Server" ) );
+    m_setPasuspender->setToolTip ( trUtf8 ( "if ffmpeg is running tell PulseAudio sound server to temporarily suspend access to the audio devices" ) );
+    gridLayout->addWidget ( m_setPasuspender, gridRow, 0, 1, 3 );
+    // end: Pulse pasuspender
+
+    // begin: FFmpeg Binary
+    QLabel* txt_ffbinary = new QLabel ( this );
+    txt_ffbinary->setText ( trUtf8 ( "FFmpeg Application:" ) );
+    txt_ffbinary->setAlignment ( labelAlignment );
+    gridLayout->addWidget ( txt_ffbinary, ++gridRow, 0, 1, 1 );
+
+    ff_path = new QLineEdit ( this );
+    ff_path->setObjectName ( QLatin1String ( "ff_path" ) );
+    ff_path->setText ( QString::fromUtf8 ( "/usr/bin/ffmpeg" ) );
+    gridLayout->addWidget ( ff_path, gridRow, 1, 1, 1 );
+
+    QToolButton* setFFmpegBtn = new QToolButton ( this );
+    setFFmpegBtn->setIcon ( folderIcon );
+    gridLayout->addWidget ( setFFmpegBtn, gridRow, 2, 1, 1 );
+    // end: FFmpeg Binary
+
+    // begin: Output Filename
+    QLabel* txt_outfile = new QLabel ( this );
+    txt_outfile->setText ( trUtf8 ( "Output Filename:" ) );
+    txt_outfile->setAlignment ( labelAlignment );
+    gridLayout->addWidget ( txt_outfile, ++gridRow, 0, 1, 1 );
+
+    outputName = new QLineEdit ( this );
+    outputName->setObjectName ( QLatin1String ( "outputName" ) );
+    outputName->setText ( QString::fromUtf8 ( "qx11grab-XXXXXX.avi" ) );
+    gridLayout->addWidget ( outputName, gridRow, 1, 1, 2 );
+    // end: Output Filename
+
+    // begin: Output Directory
+    QLabel* txt_outdir = new QLabel ( this );
+    txt_outdir->setText ( trUtf8 ( "Output Directory:" ) );
+    txt_outdir->setAlignment ( labelAlignment );
+    gridLayout->addWidget ( txt_outdir, ++gridRow, 0, 1, 1 );
+
+    outputDirectory = new QLineEdit ( this );
+    outputDirectory->setObjectName ( QLatin1String ( "tempdir" ) );
+    outputDirectory->setText ( QString::fromUtf8 ( "/tmp" ) );
+    gridLayout->addWidget ( outputDirectory, gridRow, 1, 1, 1 );
+
+    QToolButton* setOutputBtn = new QToolButton ( this );
+    setOutputBtn->setIcon ( folderIcon );
+    gridLayout->addWidget ( setOutputBtn, gridRow, 2, 1, 1 );
+    // end: Output Directory
+
+    // begin: Audio Device
+    m_audioDevice = new AudioDevice ( this );
+    gridLayout->addWidget ( m_audioDevice, ++gridRow, 0, 1, 3 );
+    // end: Audio Device
+
+    QSpacerItem* spacer  = new QSpacerItem ( 20, 40, QSizePolicy::Minimum, QSizePolicy::Expanding );
+    gridLayout->addItem ( spacer, ++gridRow, 0, 1, 2 );
+
+    setLayout ( gridLayout );
+
+    connect ( setFFmpegBtn, SIGNAL ( clicked() ), this, SLOT ( setFFmpegBinary() ) );
+    connect ( setOutputBtn, SIGNAL ( clicked() ), this, SLOT ( setOutpuDirectory() ) );
 }
 
 /**
@@ -119,16 +127,16 @@ Defaults::Defaults ( QWidget * parent )
 */
 void Defaults::setFFmpegBinary()
 {
-  QString path ( "/usr/bin" );
-  QStringList filt;
-  filt << trUtf8 ( "FFmpeg %1" ).arg ( "ffmpeg* *ffmpeg" );
-  filt << trUtf8 ( "Other %1" ).arg ( "*" );
+    QString path ( "/usr/bin" );
+    QStringList filt;
+    filt << trUtf8 ( "FFmpeg %1" ).arg ( "ffmpeg* *ffmpeg" );
+    filt << trUtf8 ( "Other %1" ).arg ( "*" );
 
-  path = QFileDialog::getOpenFileName ( this, trUtf8 ( "FFmpeg Binary" ), path, filt.join ( ";;" ) );
+    path = QFileDialog::getOpenFileName ( this, trUtf8 ( "FFmpeg Binary" ), path, filt.join ( ";;" ) );
 
-  QFileInfo db ( path );
-  if ( db.exists() )
-    ff_path->setText ( db.absoluteFilePath() );
+    QFileInfo db ( path );
+    if ( db.exists() )
+        ff_path->setText ( db.absoluteFilePath() );
 }
 
 /**
@@ -136,12 +144,12 @@ void Defaults::setFFmpegBinary()
 */
 void Defaults::setOutpuDirectory()
 {
-  QString path ( "/tmp" );
-  path = QFileDialog::getExistingDirectory ( this, trUtf8 ( "Output Directory" ), path );
+    QString path ( "/tmp" );
+    path = QFileDialog::getExistingDirectory ( this, trUtf8 ( "Output Directory" ), path );
 
-  QFileInfo db ( path );
-  if ( db.isWritable() )
-    outputDirectory->setText ( path );
+    QFileInfo db ( path );
+    if ( db.isWritable() )
+        outputDirectory->setText ( path );
 }
 
 /**
@@ -149,17 +157,18 @@ void Defaults::setOutpuDirectory()
 */
 void Defaults::load ( QSettings * cfg )
 {
-  QList<QLineEdit*> items;
-  items << outputDirectory << outputName << ff_path;
-
-  m_audioDevice->setVolume ( cfg->value ( QLatin1String ( "audio_intensifier" ), 256 ).toUInt() );
-  m_audioDevice->setAudioDevice ( cfg->value ( QLatin1String ( "audio_device" ) ).toString() );
-  m_audioDevice->setAudioEngine ( cfg->value ( QLatin1String ( "audio_engine" ) ).toString() );
-
-  foreach ( QLineEdit* edit, items )
-  {
-    edit->setText ( cfg->value ( edit->objectName(), edit->text() ).toString() );
-  }
+    QList<QLineEdit*> items;
+    items << outputDirectory << outputName << ff_path;
+
+    m_setPasuspender->setChecked( cfg->value ( QLatin1String ( "enable_pulse_pasuspender" ), false ).toBool() );
+    m_audioDevice->setVolume ( cfg->value ( QLatin1String ( "audio_intensifier" ), 256 ).toUInt() );
+    m_audioDevice->setAudioDevice ( cfg->value ( QLatin1String ( "audio_device" ) ).toString() );
+    m_audioDevice->setAudioEngine ( cfg->value ( QLatin1String ( "audio_engine" ) ).toString() );
+
+    foreach ( QLineEdit* edit, items )
+    {
+        edit->setText ( cfg->value ( edit->objectName(), edit->text() ).toString() );
+    }
 }
 
 /**
@@ -167,50 +176,51 @@ void Defaults::load ( QSettings * cfg )
 */
 void Defaults::save ( QSettings * cfg )
 {
-  QList<QLineEdit*> items;
-  items << outputDirectory << outputName << ff_path;
+    QList<QLineEdit*> items;
+    items << outputDirectory << outputName << ff_path;
 
-  cfg->setValue ( QLatin1String ( "audio_engine" ), m_audioDevice->getAudioEngine() );
+    cfg->setValue ( QLatin1String ( "enable_pulse_pasuspender" ), m_setPasuspender->isChecked() );
+    cfg->setValue ( QLatin1String ( "audio_engine" ), m_audioDevice->getAudioEngine() );
 
-  if ( m_audioDevice->getVolume() != 256 )
-    cfg->setValue ( QLatin1String ( "audio_intensifier" ), m_audioDevice->getVolume() );
-  else
-    cfg->remove ( QLatin1String ( "audio_intensifier" ) );
-
-  if ( m_audioDevice->getAudioDevice().isEmpty() )
-    cfg->remove ( QLatin1String ( "audio_device" ) );
-  else
-    cfg->setValue ( QLatin1String ( "audio_device" ), m_audioDevice->getAudioDevice() );
+    if ( m_audioDevice->getVolume() != 256 )
+        cfg->setValue ( QLatin1String ( "audio_intensifier" ), m_audioDevice->getVolume() );
+    else
+        cfg->remove ( QLatin1String ( "audio_intensifier" ) );
 
-  foreach ( QLineEdit* edit, items )
-  {
-    if ( edit->text().isEmpty() )
-      cfg->remove ( edit->objectName() );
+    if ( m_audioDevice->getAudioDevice().isEmpty() )
+        cfg->remove ( QLatin1String ( "audio_device" ) );
     else
-      cfg->setValue ( edit->objectName(), edit->text() );
-  }
+        cfg->setValue ( QLatin1String ( "audio_device" ), m_audioDevice->getAudioDevice() );
+
+    foreach ( QLineEdit* edit, items )
+    {
+        if ( edit->text().isEmpty() )
+            cfg->remove ( edit->objectName() );
+        else
+            cfg->setValue ( edit->objectName(), edit->text() );
+    }
 }
 
 const QString Defaults::binary()
 {
-  return ff_path->text();
+    return ff_path->text();
 }
 
 const QStringList Defaults::audioDeviceData()
 {
-  return  m_audioDevice->data();
+    return  m_audioDevice->data();
 }
 
 const QString Defaults::output()
 {
-  QString p = outputDirectory->text();
-  p.append ( "/" );
-
-  QString outFile = outputName->text();
-  QString timeStamp = QTime::currentTime().toString ( "hhmmss" );
-  outFile.replace ( QRegExp ( "\\b(X{3,})\\b" ), timeStamp );
-  p.append ( outFile );
-  return p;
+    QString p = outputDirectory->text();
+    p.append ( "/" );
+
+    QString outFile = outputName->text();
+    QString timeStamp = QTime::currentTime().toString ( "hhmmss" );
+    outFile.replace ( QRegExp ( "\\b(X{3,})\\b" ), timeStamp );
+    p.append ( outFile );
+    return p;
 }
 
 Defaults::~Defaults()
diff --git a/src/defaults.h b/src/defaults.h
index f601307..594eb0f 100644
--- a/src/defaults.h
+++ b/src/defaults.h
@@ -29,6 +29,7 @@
 #include <QtCore/QStringList>
 
 /* QtGui */
+#include <QtGui/QCheckBox>
 #include <QtGui/QLineEdit>
 #include <QtGui/QWidget>
 
@@ -40,6 +41,7 @@ class Defaults : public QWidget
     Q_CLASSINFO ( "Author", "JÃ¼rgen Heinemann (Undefined)" )
 
   private:
+    QCheckBox* m_setPasuspender;
     QLineEdit* ff_path;
     QLineEdit* outputName;
     QLineEdit* outputDirectory;
diff --git a/src/ffprocess.cpp b/src/ffprocess.cpp
index efb91d1..efe5fad 100644
--- a/src/ffprocess.cpp
+++ b/src/ffprocess.cpp
@@ -36,11 +36,11 @@
 #include <QtGui/QMessageBox>
 
 FFProcess::FFProcess ( QObject *parent, Settings *settings )
-    : QObject ( parent )
-    , cfg ( settings )
-    , xInfo()
+        : QObject ( parent )
+        , cfg ( settings )
+        , xInfo()
 {
-  arguments = QStringList();
+    arguments = QStringList();
 }
 
 /**
@@ -48,7 +48,7 @@ FFProcess::FFProcess ( QObject *parent, Settings *settings )
 */
 const QString FFProcess::application()
 {
-  return cfg->value ( QLatin1String ( "ff_path" ), QLatin1String ( "ffmpeg" ) ).toString();
+    return  cfg->value ( QLatin1String ( "ff_path" ), QLatin1String ( "ffmpeg" ) ).toString();
 }
 
 /**
@@ -56,12 +56,12 @@ const QString FFProcess::application()
 */
 const QString FFProcess::workdir()
 {
-  QString p = cfg->value ( QLatin1String ( "tempdir" ), QLatin1String ( "/tmp" ) ).toString();
-  QDir d ( p );
-  if ( ! d.isReadable() )
-    QMessageBox::warning ( 0x00, trUtf8 ( "Warning" ), trUtf8 ( "Permission Denied: %1." ).arg ( p ) );
+    QString p = cfg->value ( QLatin1String ( "tempdir" ), QLatin1String ( "/tmp" ) ).toString();
+    QDir d ( p );
+    if ( ! d.isReadable() )
+        QMessageBox::warning ( 0x00, trUtf8 ( "Warning" ), trUtf8 ( "Permission Denied: %1." ).arg ( p ) );
 
-  return p;
+    return p;
 }
 
 /**
@@ -69,11 +69,11 @@ const QString FFProcess::workdir()
 */
 bool FFProcess::create ( const QRect &r )
 {
-  if ( r.isValid() )
-    return true;
+    if ( r.isValid() )
+        return true;
 
-  emit errmessage ( trUtf8 ( "Dimension" ), trUtf8 ( "Invalid Window geometry" ) );
-  return false;
+    emit errmessage ( trUtf8 ( "Dimension" ), trUtf8 ( "Invalid Window geometry" ) );
+    return false;
 }
 
 /**
@@ -81,35 +81,37 @@ bool FFProcess::create ( const QRect &r )
 */
 bool FFProcess::start ( const QStringList &cmd )
 {
-  if ( cmd.size() < 3 || application().isEmpty() || workdir().isEmpty() )
-    return false;
+    if (cfg->value ( QLatin1String ( "enable_pulse_pasuspender" ), false ).toBool())
+        QProcess::startDetached ( "pactl", QStringList() << "suspend-source" << "quelle" << "1" );
 
-  QStringList arguments ( cmd );
+    if ( cmd.size() < 3 || application().isEmpty() || workdir().isEmpty() )
+        return false;
 
-  if ( arguments.contains ( application() ) )
-    arguments.removeOne ( application() );
+    QStringList arguments ( cmd );
 
-  m_QProcess = new QProcess ( this );
-  m_QProcess->setWorkingDirectory ( workdir() );
-  m_QProcess->setProcessChannelMode ( QProcess::SeparateChannels );
-  m_QProcess->setReadChannel ( QProcess::StandardOutput );
-  m_QProcess->setStandardErrorFile ( qx11grabLogfile() );
+    if ( arguments.contains ( application() ) )
+        arguments.removeOne ( application() );
 
-  connect ( m_QProcess, SIGNAL ( error ( QProcess::ProcessError ) ),
-            this, SLOT ( errors ( QProcess::ProcessError ) ) );
+    m_QProcess = new QProcess ( this );
+    m_QProcess->setWorkingDirectory ( workdir() );
+    m_QProcess->setProcessChannelMode ( QProcess::SeparateChannels );
+    m_QProcess->setReadChannel ( QProcess::StandardOutput );
+    m_QProcess->setStandardErrorFile ( qx11grabLogfile() );
 
-  connect ( m_QProcess, SIGNAL ( finished ( int, QProcess::ExitStatus ) ),
-            this, SLOT ( exited ( int, QProcess::ExitStatus ) ) );
+    connect ( m_QProcess, SIGNAL ( error ( QProcess::ProcessError ) ),
+              this, SLOT ( errors ( QProcess::ProcessError ) ) );
 
-  connect ( m_QProcess, SIGNAL ( started() ),
-            this, SLOT ( startCheck() ) );
+    connect ( m_QProcess, SIGNAL ( finished ( int, QProcess::ExitStatus ) ),
+              this, SLOT ( exited ( int, QProcess::ExitStatus ) ) );
+
+    connect ( m_QProcess, SIGNAL ( started() ),
+              this, SLOT ( startCheck() ) );
 
 #ifdef QX11GRAB_DEBUG
-  qDebug() << Q_FUNC_INFO << application() << arguments;
+    qDebug() << Q_FUNC_INFO << application() << arguments;
 #endif
-
-  m_QProcess->start ( application(), arguments );
-  return true;
+    m_QProcess->start ( application(), arguments );
+    return true;
 }
 
 /**
@@ -117,17 +119,22 @@ bool FFProcess::start ( const QStringList &cmd )
 */
 bool FFProcess::stop()
 {
-  if ( ! m_QProcess )
-    return false;
+    if ( ! m_QProcess )
+        return false;
 
-  emit message ( trUtf8 ( "shutdown please wait ..." ) );
+    emit message ( trUtf8 ( "shutdown please wait ..." ) );
 
-  // TODO Keine Ahnung was der Aufeinmal hat ???
-  char quit = 'q';
-  m_QProcess->write ( &quit );
-  m_QProcess->closeWriteChannel();
+    // FIXME Wenn der Sound Channel nicht stimmt entsteht ein loop!
+    char q = 'q';
+    if ( ( m_QProcess->write ( &q ) != -1 ) && ( m_QProcess->waitForBytesWritten () ) )
+      m_QProcess->closeWriteChannel();
+    else
+      m_QProcess->kill();
 
-  return isRunning();
+    if (cfg->value ( QLatin1String ( "enable_pulse_pasuspender" ), false ).toBool())
+        QProcess::startDetached ( "pactl", QStringList() << "suspend-source" << "quelle" << "0" );
+
+    return isRunning();
 }
 
 /**
@@ -135,13 +142,13 @@ bool FFProcess::stop()
 */
 bool FFProcess::kill()
 {
-  if ( ! m_QProcess )
-    return false;
+    if ( ! m_QProcess )
+        return false;
 
-  emit message ( trUtf8 ( "force shutdown" ) );
+    emit message ( trUtf8 ( "force shutdown" ) );
 
-  m_QProcess->kill ();
-  return true;
+    m_QProcess->kill ();
+    return true;
 }
 
 /**
@@ -149,35 +156,35 @@ bool FFProcess::kill()
 */
 bool FFProcess::isRunning()
 {
-  if ( ! m_QProcess )
-    return false;
+    if ( ! m_QProcess )
+        return false;
 
-  switch ( m_QProcess->state() )
-  {
+    switch ( m_QProcess->state() )
+    {
     case QProcess::NotRunning:
     {
-      emit down ();
-      return false;
+        emit down ();
+        return false;
     }
 
     case QProcess::Starting:
     {
-      emit running ();
-      return true;
+        emit running ();
+        return true;
     }
 
     case QProcess::Running:
     {
-      emit running ();
-      return true;
+        emit running ();
+        return true;
     }
 
     default:
     {
-      emit down ();
-      return false;
+        emit down ();
+        return false;
+    }
     }
-  }
 }
 
 /**
@@ -185,33 +192,33 @@ bool FFProcess::isRunning()
 */
 void FFProcess::errors ( QProcess::ProcessError err )
 {
-  QString errtxt = m_QProcess->errorString();
-  switch ( err )
-  {
+    QString errtxt = m_QProcess->errorString();
+    switch ( err )
+    {
     case QProcess::FailedToStart:
-      emit errmessage ( trUtf8 ( "Recording" ), trUtf8 ( "FailedToStart (%1) ..." ).arg ( errtxt ) );
-      break;
+        emit errmessage ( trUtf8 ( "Recording" ), trUtf8 ( "FailedToStart (%1) ..." ).arg ( errtxt ) );
+        break;
 
     case QProcess::Crashed:
-      emit errmessage ( trUtf8 ( "Recording" ), trUtf8 ( "Crashed (%1) ..." ).arg ( errtxt ) );
-      break;
+        emit errmessage ( trUtf8 ( "Recording" ), trUtf8 ( "Crashed (%1) ..." ).arg ( errtxt ) );
+        break;
 
     case QProcess::Timedout:
-      emit errmessage ( trUtf8 ( "Recording" ), trUtf8 ( "Timedout (%1) ..." ).arg ( errtxt ) );
-      break;
+        emit errmessage ( trUtf8 ( "Recording" ), trUtf8 ( "Timedout (%1) ..." ).arg ( errtxt ) );
+        break;
 
     case QProcess::WriteError:
-      emit errmessage ( trUtf8 ( "Recording" ), trUtf8 ( "WriteError (%1) ..." ).arg ( errtxt ) );
-      break;
+        emit errmessage ( trUtf8 ( "Recording" ), trUtf8 ( "WriteError (%1) ..." ).arg ( errtxt ) );
+        break;
 
     case QProcess::ReadError:
-      emit errmessage ( trUtf8 ( "Recording" ), trUtf8 ( "ReadError (%1) ..." ).arg ( errtxt ) );
-      break;
+        emit errmessage ( trUtf8 ( "Recording" ), trUtf8 ( "ReadError (%1) ..." ).arg ( errtxt ) );
+        break;
 
     case QProcess::UnknownError:
-      emit errmessage ( trUtf8 ( "Recording" ), trUtf8 ( "UnknownError (%1) ..." ).arg ( errtxt ) );
-      break;
-  }
+        emit errmessage ( trUtf8 ( "Recording" ), trUtf8 ( "UnknownError (%1) ..." ).arg ( errtxt ) );
+        break;
+    }
 }
 
 /**
@@ -219,21 +226,21 @@ void FFProcess::errors ( QProcess::ProcessError err )
 */
 void FFProcess::exited ( int exitCode, QProcess::ExitStatus stat )
 {
-  Q_UNUSED ( exitCode )
+    Q_UNUSED ( exitCode )
 
-  switch ( stat )
-  {
+    switch ( stat )
+    {
     case QProcess::NormalExit:
-      emit message ( trUtf8 ( "Recording finished." ) );
-      break;
+        emit message ( trUtf8 ( "Recording finished." ) );
+        break;
 
     case QProcess::CrashExit:
-      emit message ( trUtf8 ( "Process crashed see logfile %1" ).arg ( qx11grabLogfile() ) );
-      break;
+        emit message ( trUtf8 ( "Process crashed see logfile %1" ).arg ( qx11grabLogfile() ) );
+        break;
 
     default:
-      return;
-  }
+        return;
+    }
 }
 
 /**
@@ -241,8 +248,8 @@ void FFProcess::exited ( int exitCode, QProcess::ExitStatus stat )
 */
 void FFProcess::startCheck()
 {
-  if ( isRunning() )
-    emit message ( trUtf8 ( "Recording started writing to: %1" ).arg ( qx11grabLogfile() ) );
+    if ( isRunning() )
+        emit message ( trUtf8 ( "Recording started writing to: %1" ).arg ( qx11grabLogfile() ) );
 }
 
 FFProcess::~FFProcess()
diff --git a/src/logviewer/logviewer.cpp b/src/logviewer/logviewer.cpp
index b0896c2..3d079ac 100644
--- a/src/logviewer/logviewer.cpp
+++ b/src/logviewer/logviewer.cpp
@@ -41,7 +41,9 @@ LogViewer::LogViewer ( const QFileInfo &log, QWidget * parent )
   setObjectName ( QLatin1String ( "logviewer" ) );
   setWindowTitle ( trUtf8 ( "qx11grab logfile" ) );
   setWindowModality ( Qt::NonModal );
-  setContentsMargins ( 0, 0, 0, 0 );
+  setContentsMargins ( 5, 5, 5, 15 );
+  setMinimumSize ( 350, 200 );
+  setSizeGripEnabled ( true );
 
   QVBoxLayout* vLayout = new QVBoxLayout ( this );
   vLayout->setMargin ( 0 );
diff --git a/src/main.cpp b/src/main.cpp
index c9b4530..3e709f0 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -79,7 +79,7 @@ int main ( int argc, char* argv[] )
   about.setOrganizationDomain ( "hjcms.de" );
 
   KCmdLineArgs::init ( argc, argv, &about );
-  KUniqueApplication app ( true );
+  KApplication app ( true );
 
 #else
 
diff --git a/src/picrecordinterface.cpp b/src/picrecordinterface.cpp
index 312f8b5..490c00d 100644
--- a/src/picrecordinterface.cpp
+++ b/src/picrecordinterface.cpp
@@ -40,105 +40,108 @@ extern "C"
 }
 
 PicRecordInterface::PicRecordInterface ( QWidget * parent )
-    : QDialog ( parent )
+        : QDialog ( parent )
 {
-  setObjectName ( QLatin1String ( "picrecordinterface" ) );
-  setWindowTitle ( trUtf8 ( "ALSA PCM Selection" ) );
-  setMinimumWidth ( 400 );
-  setSizeGripEnabled ( true );
+    setObjectName ( QLatin1String ( "picrecordinterface" ) );
+    setWindowTitle ( trUtf8 ( "ALSA PCM Selection" ) );
+    setMinimumWidth ( 400 );
+    setSizeGripEnabled ( true );
 
-  QVBoxLayout* vLayout = new QVBoxLayout ( this );
+    QVBoxLayout* vLayout = new QVBoxLayout ( this );
 
-  vLayout->addWidget ( new QLabel ( trUtf8 ( "Available Cards:" ) ) );
+    vLayout->addWidget ( new QLabel ( trUtf8 ( "Available Cards:" ) ) );
 
-  deviceList = new QListWidget ( this );
-  vLayout->addWidget ( deviceList );
+    deviceList = new QListWidget ( this );
+    vLayout->addWidget ( deviceList );
 
-  QDialogButtonBox* box = new QDialogButtonBox ( Qt::Horizontal , this );
-  box->setStandardButtons ( ( QDialogButtonBox::Ok | QDialogButtonBox::Cancel ) );
-  box->setCenterButtons ( true );
-  vLayout->addWidget ( box );
+    QDialogButtonBox* box = new QDialogButtonBox ( Qt::Horizontal , this );
+    box->setStandardButtons ( ( QDialogButtonBox::Ok | QDialogButtonBox::Cancel ) );
+    box->setCenterButtons ( true );
+    vLayout->addWidget ( box );
 
-  setLayout ( vLayout );
+    setLayout ( vLayout );
 
-  initRecorderDevices();
+    initRecorderDevices();
 
-  connect ( box, SIGNAL ( accepted () ), this, SLOT ( accept() ) );
-  connect ( box, SIGNAL ( rejected () ), this, SLOT ( reject() ) );
+    connect ( box, SIGNAL ( accepted () ), this, SLOT ( accept() ) );
+    connect ( box, SIGNAL ( rejected () ), this, SLOT ( reject() ) );
 }
 
 void PicRecordInterface::initRecorderDevices()
 {
-  void **hints, **n;
-  char *name;
-  QString hwIndex;
-  QRegExp pattern ( "^.+=" );
-  QRegExp cleaner ( "[\\n\\r]+.+$" );
-  QStringList buffer;
-
-  // zero if success, otherwise a negative error code
-  if ( snd_device_name_hint ( -1, "pcm", &hints ) < 0 )
-  {
-    qWarning ( "no alsa devices available" );
-    return;
-  }
-
-  n = hints;
-  while ( *n != NULL )
-  {
-    name = snd_device_name_get_hint ( *n, "NAME" );
-    if ( ( name != NULL ) && ( snd_device_name_get_hint ( *n, "IOID" ) == NULL ) )
+    void **hints, **n;
+    char *name;
+    QString hwIndex;
+    QRegExp pattern ( "^.+=" );
+    QRegExp cleaner ( "[\\n\\r]+.+$" );
+    QStringList buffer;
+
+    /** @ref http://www.alsa-project.org/alsa-doc/alsa-lib/group___control.html
+    * zero if success, otherwise a negative error code
+    */
+    if ( snd_device_name_hint ( -1, "pcm", &hints ) < 0 )
     {
-      QString cardHint = QString ( name ).split ( "," ).first();
-      QString infoHint = QString ( snd_device_name_get_hint ( *n, "DESC" ) );
-      if ( ! buffer.contains ( cardHint.remove ( pattern ) ) )
-      {
-        int index = snd_card_get_index ( cardHint.toAscii().data() );
-        if ( index >= 0 )
-          hwIndex = QString ( "hw=%1" ).arg ( QString::number ( index ) );
-
-        QListWidgetItem* item = new QListWidgetItem ( deviceList );
-        item->setText ( QString ( "%1 \"%2\" %3" ).arg ( cardHint, infoHint.remove ( cleaner ), hwIndex ) );
-        item->setData ( Qt::UserRole, cardHint );
-        item->setData ( Qt::ToolTipRole, hwIndex );
-        item->setData ( Qt::StatusTipRole, infoHint.remove ( cleaner ) );
-        deviceList->addItem ( item );
-        buffer << cardHint;
-        hwIndex.clear();
-      }
+        qWarning ( "no alsa devices available" );
+        return;
     }
-    ++n;
-  }
-  snd_device_name_free_hint ( hints );
 
-  buffer.clear();
+    n = hints;
+    while ( *n != NULL )
+    {
+        name = snd_device_name_get_hint ( *n, "NAME" );
+        if ( ( name != NULL ) && ( snd_device_name_get_hint ( *n, "IOID" ) == NULL ) )
+        {
+            // qDebug () << Q_FUNC_INFO << QString ( name );
+            QString cardHint = QString ( name ).split ( "," ).first();
+            QString infoHint = QString ( snd_device_name_get_hint ( *n, "DESC" ) );
+            if ( ! buffer.contains ( cardHint.remove ( pattern ) ) )
+            {
+                int index = snd_card_get_index ( cardHint.toAscii().data() );
+                if ( index >= 0 )
+                    hwIndex = QString ( "hw=%1" ).arg ( QString::number ( index ) );
+
+                QListWidgetItem* item = new QListWidgetItem ( deviceList );
+                item->setText ( QString ( "%1 \"%2\" %3" ).arg ( cardHint, infoHint.remove ( cleaner ), hwIndex ) );
+                item->setData ( Qt::UserRole, cardHint );
+                item->setData ( Qt::ToolTipRole, hwIndex );
+                item->setData ( Qt::StatusTipRole, infoHint.remove ( cleaner ) );
+                deviceList->addItem ( item );
+                buffer << cardHint;
+                hwIndex.clear();
+            }
+        }
+        ++n;
+    }
+    snd_device_name_free_hint ( hints );
+
+    buffer.clear();
 }
 
 const QString PicRecordInterface::getCard ()
 {
-  return deviceList->currentItem()->data ( Qt::UserRole ).toString();
+    return deviceList->currentItem()->data ( Qt::UserRole ).toString();
 }
 
 void PicRecordInterface::setCard ( const QString &c )
 {
-  for ( int r = 0; r < deviceList->count(); r++ )
-  {
-    if ( deviceList->item ( r )->data ( Qt::UserRole ).toString() == c )
+    for ( int r = 0; r < deviceList->count(); r++ )
     {
-      deviceList->setCurrentRow ( r );
-      break;
+        if ( deviceList->item ( r )->data ( Qt::UserRole ).toString() == c )
+        {
+            deviceList->setCurrentRow ( r );
+            break;
+        }
     }
-  }
 }
 
 const AlsaAudioDevice PicRecordInterface::cardInfo ()
 {
-  AlsaAudioDevice d;
-  QListWidgetItem* item = deviceList->currentItem();
-  d.name = item->data ( Qt::UserRole ).toString();
-  d.hw = item->data ( Qt::ToolTipRole ).toString();
-  d.description = item->data ( Qt::StatusTipRole ).toString();
-  return d;
+    AlsaAudioDevice d;
+    QListWidgetItem* item = deviceList->currentItem();
+    d.name = item->data ( Qt::UserRole ).toString();
+    d.hw = item->data ( Qt::ToolTipRole ).toString();
+    d.description = item->data ( Qt::StatusTipRole ).toString();
+    return d;
 }
 
 PicRecordInterface::~PicRecordInterface()
--
cgit v0.8.3.1
