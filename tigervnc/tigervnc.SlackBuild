#!/bin/sh
#-- tigervnc for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ tigervnc.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://tigervnc.sourceforge.net/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

SNAPBUILD=${SNAPBUILD:-YES}

NAME=tigervnc
PKG=${PKG:-${TMP}/package-${NAME}}

if [ "${SNAPBUILD}" = "YES" ] ;then
  VERSION=${VERSION:-"$(LC_ALL=C date +%Y%m%d)"}
else
  VERSION=${VERSION:-1.3.9}
fi
XVER=${XVER:-1.5.99.902}
SLKDIST=${SLKDIST:-Slackware}
SLKVER=${SLKVER:-12.2.0}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
if [ -d "/usr/share/xorg-server-source" ] ;then
  XSRCDIR=/usr/share/xorg-server-source
  XSRCSDIR=YES
else
  XSRCDIR=xorg-server-${XVER}
  XSRCSDIR=NO
  XSRCARCHIVE=${XSRCDIR}.tar.bz2
fi
SRCARCHIVE=${SRCDIR}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
SF_MIRROR=${SF_MIRROR:-http://prdownloads.sourceforge.net}
DL_URL="${SF_MIRROR}/${NAME}/${SRCARCHIVE}"
XDL_URL="http://xorg.freedesktop.org/releases/individual/xserver/${XSRCARCHIVE}"
SNAPUPDATE=${NAME}-snapshot.sh
export snap=${VERSION}

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  if [ "${SNAPBUILD}" = "YES" ] ;then
    test -r ${CWD}/${SRCARCHIVE} || sh ${CWD}/${SNAPUPDATE} || exit 1
  else
    test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
  fi
fi
if [ "${XSRCSDIR}" != "YES" ] ;then
  if ! test -r ${XSRCARCHIVE}; then
    test -r ${CWD}/${XSRCARCHIVE} || wget ${DL_OPTS} ${XDL_URL} || exit 1
  fi
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1
if [ "${XSRCSDIR}" != "YES" ] ;then
  if $(file -L ${CWD}/${XSRCARCHIVE} | grep -q ": bzip2"); then
    tar -xjvf ${CWD}/${XSRCARCHIVE} || exit 1
  elif $(file -L ${CWD}/${XSRCARCHIVE} | grep -q ": gzip"); then
    tar -xzvf ${CWD}/${XSRCARCHIVE} || exit 1
  fi
fi

chmod -R u+w,go+r-w,a-s .

mv unix/xserver/hw/vnc hw-vnc
rmdir unix/xserver/hw || exit 1
if [ "${XSRCSDIR}" = "YES" ] ;then
  cp -r ${XSRCDIR}/* unix/xserver/ || exit 1
else
  mv ${XSRCDIR}/* unix/xserver/ || exit 1
fi

mv hw-vnc unix/xserver/hw/vnc || exit 1

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/tapply-patches.sh || exit 1
fi

( cd unix/xserver || exit 1
  if [ "${XSRCSDIR}" != "YES" ] ;then
    if [ -r ${CWD}/apply-patches.sh ]; then
      . ${CWD}/apply-patches.sh || exit 1
    fi
  fi
  patch -p1 -b -fuzz=0 --suffix .vnc < ../xserver16.patch || exit 1
) || exit 1

sed -i 's/AM_GNU_GETTEXT_VERSION.*/AM_GNU_GETTEXT_VERSION([0.17])/' \
  unix/configure.ac || exit 1

export CFLAGS="${SLKCFLAGS}"
export CXXFLAGS="${SLKCFLAGS}"

( cd unix || exit 1
  autoreconf -fiv || exit 1
  ./configure \
    --prefix=/usr \
    --sysconfdir=/etc \
    --localstatedir=/var \
    --infodir=/usr/info \
    --mandir=/usr/man \
    --docdir=/usr/doc/${NAME}-${VERSION} \
    --disable-static \
    --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

    make -j${NJOBS} || make || exit 1
    make install DESTDIR=${PKG} || exit 1
) || exit 1

( cd unix/xserver || exit 1
  autoreconf -fiv || exit 1
./configure \
  --prefix=/usr \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --disable-static \
  --disable-xnest --disable-xvfb --disable-dmx \
  --disable-xwin --disable-xephyr --disable-kdrive --with-pic \
  --disable-xorgcfg --disable-xprint --disable-static \
  --disable-composite --disable-xtrap --enable-xcsecurity \
  --enable-install-libxf86config \
  --disable-xevie \
  --with-default-font-path="/usr/share/fonts/TTF,/usr/share/fonts/OTF,/usr/share/fonts/Type1,/usr/share/fonts/misc,/usr/share/fonts/75dpi/:unscaled" \
  --with-module-dir=/usr/lib/xorg/modules \
  --with-dri-driver-path=/usr/lib/xorg/modules/dri \
  --with-rgb-path=/usr/share/X11/rgb \
  --with-os-vendor="${SLKDIST} Linux Project" \
  --with-builderstring="Build ID: ${NAME} ${VERSION}-${BUILD}" \
  --with-xkb-path=/etc/X11/xkb \
  --with-xkb-output=/var/lib/xkb \
  --enable-glx-tls \
  --disable-dri2 \
  --disable-config-dbus \
  --disable-config-hal \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

    make -j${NJOBS} || make || exit 1
    cd hw/vnc || exit 1
    make install DESTDIR=${PKG} || exit 1
) || exit 1

mkdir -p ${PKG}/etc/rc.d
zcat ${CWD}/rc.vncserver.gz >\
     ${PKG}/etc/rc.d/rc.vncserver.new || exit 1
chmod 0755 ${PKG}/etc/rc.d/rc.vncserver.new || exit 1

mkdir -p ${PKG}/var/log/setup
zcat ${CWD}/setup.onlyonce.rcvncserver.gz > \
     ${PKG}/var/log/setup/setup.onlyonce.rcvncserver || exit 1
chmod 0755 ${PKG}/var/log/setup/setup.onlyonce.rcvncserver || exit 1

mkdir -p ${PKG}/etc/default
cat > ${PKG}/etc/default/vncserver.new << 'EOF'
# The VNCSERVERS variable is a list of display:user pairs.
#
# Uncomment the lines below to start a VNC server on display :2
# as my 'myusername' (adjust this to your own).  You will also
# need to set a VNC password; run 'man vncpasswd' to see how
# to do that.  
#
# DO NOT RUN THIS SERVICE if your local area network is
# untrusted!  For a secure way of using VNC, see
# <URL:http://www.uk.research.att.com/archive/vnc/sshvnc.html>.

# Use "-nolisten tcp" to prevent X connections to your VNC server via TCP.

# Use "-nohttpd" to prevent web-based VNC clients connecting.

# Use "-localhost" to prevent remote VNC clients connecting except when
# doing so through a secure tunnel.  See the "-via" option in the
# `man vncviewer' manual page.

# VNCSERVERS="2:myusername"
# VNCSERVERARGS[2]="-geometry 800x600 -nolisten tcp -nohttpd -localhost"
EOF

rm -f ${PKG}/usr/lib/xorg/modules/extensions/libvnc.la

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
)

mkdir -p ${PKG}/usr/share/applications
cat > ${PKG}/usr/share/applications/vncviewer.desktop <<EOF
[Desktop Entry]
Name=VNC Viewer
Comment=Connect to VNC server and display remote desktop
Exec=/usr/bin/vncviewer
Icon=vnc
Terminal=false
Type=Application
Categories=Network;
StartupWMClass=VNC Viewer: Connection Details
EOF

mkdir -p ${PKG}/usr/share/icons/hicolor/32x32/apps
zcat ${CWD}/${NAME}.png.gz > \
     ${PKG}/usr/share/icons/hicolor/32x32/apps/${NAME}.png

for size in 16x16 24x24 48x48 ;do
  dir=${PKG}/usr/share/icons/hicolor/${size}/apps
  mkdir -p ${dir}
  zcat ${CWD}/vnc-${size}.png.gz > ${dir}/vnc.png
done

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  LICENCE.TXT README WhatsNew ChangeLog ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.vncserver.new:
if [ -e etc/rc.d/rc.vncserver ]; then
  cp -a etc/rc.d/rc.vncserver etc/rc.d/rc.vncserver.new.incoming
  cat etc/rc.d/rc.vncserver.new > etc/rc.d/rc.vncserver.new.incoming
  mv etc/rc.d/rc.vncserver.new.incoming etc/rc.d/rc.vncserver.new
else 
  chmod 0755 etc/rc.d/rc.vncserver.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{patches,tpatches}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/${SNAPUPDATE} ${CWD}/*apply-patches.sh ${CWD}/*.png.gz \
                 ${CWD}/{rc.,setup.onlyonce.rc}*.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.gz \
                 ${SBDIR}/patches/
  install -m0644 ${CWD}/tpatches/*.gz \
                 ${SBDIR}/tpatches/
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^  ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
