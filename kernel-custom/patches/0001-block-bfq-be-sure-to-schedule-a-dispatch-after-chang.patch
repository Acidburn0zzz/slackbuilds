From d70f5933f96e1c5385e4eb38a1e90dedee9b5123 Mon Sep 17 00:00:00 2001
From: Arianna Avanzini <avanzini.arianna@gmail.com>
Date: Tue, 16 Oct 2012 00:51:42 +0200
Subject: [PATCH] block, bfq: be sure to schedule a dispatch after changing
 the group of the active queue.

---
 block/bfq-cgroup.c  |    6 +++++-
 block/bfq-iosched.c |    2 ++
 2 files changed, 7 insertions(+), 1 deletion(-)

diff --git a/block/bfq-cgroup.c b/block/bfq-cgroup.c
index 30f99b9..9cad53e 100644
--- a/block/bfq-cgroup.c
+++ b/block/bfq-cgroup.c
@@ -248,10 +248,11 @@ static struct bfq_group *bfq_find_alloc_group(struct bfq_data *bfqd,
 static void bfq_bfqq_move(struct bfq_data *bfqd, struct bfq_queue *bfqq,
 			  struct bfq_entity *entity, struct bfq_group *bfqg)
 {
-	int busy, resume;
+	int busy, resume, was_active;
 
 	busy = bfq_bfqq_busy(bfqq);
 	resume = !RB_EMPTY_ROOT(&bfqq->sort_list);
+	was_active = (bfqd->active_queue == bfqq);
 
 	BUG_ON(resume && !entity->on_st);
 	BUG_ON(busy && !resume && entity->on_st && bfqq != bfqd->active_queue);
@@ -276,6 +277,9 @@ static void bfq_bfqq_move(struct bfq_data *bfqd, struct bfq_queue *bfqq,
 
 	if (busy && resume)
 		bfq_activate_bfqq(bfqd, bfqq);
+
+	if (was_active && !bfqd->rq_in_driver)
+		bfq_schedule_dispatch(bfqd);
 }
 
 /**
diff --git a/block/bfq-iosched.c b/block/bfq-iosched.c
index a75946b..0189ef0 100644
--- a/block/bfq-iosched.c
+++ b/block/bfq-iosched.c
@@ -134,6 +134,8 @@ struct kmem_cache *bfq_pool;
 #define RQ_BIC(rq)		((struct bfq_io_cq *) (rq)->elv.priv[0])
 #define RQ_BFQQ(rq)		((rq)->elv.priv[1])
 
+static inline void bfq_schedule_dispatch(struct bfq_data *bfqd);
+
 #include "bfq-ioc.c"
 #include "bfq-sched.c"
 #include "bfq-cgroup.c"
-- 
1.7.10.4

