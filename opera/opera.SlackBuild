#!/bin/bash
#-- opera for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ opera.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008, 2009, 2010, 2011 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.opera.com/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=opera
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-11.50-1074}
RVER="$(echo ${VERSION} | cut -d - -f1)"
CRVER=${RVER//.}
# x86 or x86_64
ARCH=${ARCH:-x86_64}
if [ "${ARCH}" = "x86_64" ] ;then
  PARCH=${ARCH}
else
  ARCH=x86
  PARCH=i386
fi
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}.${PARCH}.linux
SRCARCHIVE=${SRCDIR}.tar.xz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
OPERA_MIRROR=${OPERA_MIRROR:-http://ftp.opera.com/pub/opera}
DL_URL="${OPERA_MIRROR}/linux/${CRVER}/${SRCARCHIVE}"
DL_URLB="${OPERA_MIRROR}/linux/${CRVER}b_BETA_/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible, or in /tmp
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL}
for i in $(seq 10) ;do
  test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URLB/_BETA_/$i} || exit 1
done

if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

if [ -f Manifest.md5 ] ;then
  echo "Checking md5..."
  if [ -f Manifest.md5 ] && ! md5sum --quiet -c Manifest.md5 &>/dev/null ;then
    echo "Some files are corrupted, download ${SRCARCHIVE} again."
    exit 1
  fi
fi

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1

sed -i -e 's|@@{PREFIX}/bin/||g;s|@@{SUFFIX}||g;s|@@{_SUFFIX}||g' \
  share/applications/*.desktop || exit 1

mkdir -p ${PKG}/usr/bin
cat > ${PKG}/usr/bin/${NAME} <<'EOF'
#!/bin/sh
# Use this if you don't want to install Opera to any special location,
# but execute it from the extracted package or current location.

OP_ARCH=$(uname -m)
case ${OP_ARCH} in
  x86_64 | ia64 | s390 )
    OP_LIB_DIR="/usr/lib64"
    SECONDARY_LIB_DIR="/usr/lib"
    ;;
  * )
    OP_LIB_DIR="/usr/lib"
    SECONDARY_LIB_DIR="/usr/lib64"
    ;;
esac

if [ ! -x ${OP_LIB_DIR}/opera/opera ]; then
  if [ ! -x ${SECONDARY_LIB_DIR/}opera/opera ]; then
    echo "Error: ${OP_LIB_DIR}/opera/opera not found"
    if [ -d ${SECONDARY_LIB_DIR} ]; then
      echo "       ${SECONDARY_LIB_DIR}/opera/opera not found"
    fi
    exit 1
  fi
  OP_LIB_DIR="${SECONDARY_LIB_DIR}"
fi

# Location of the Opera binaries
export OPERA_BINARYDIR=${OP_LIB_DIR}/opera

export OPERA_DIR=${OPERA_DIR:-/usr/share/opera}
export OPERA_PERSONALDIR=${OPERA_PERSONALDIR:-${HOME}/.opera}
exec "${OPERA_BINARYDIR}/opera" "$@"
EOF

cat > ${PKG}/usr/bin/${NAME}-widget-manager <<'EOF'
#!/bin/sh
exec /usr/bin/opera --widgetmanager "$@"
EOF

chmod 0755 ${PKG}/usr/bin/${NAME}* || exit 1

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}
cp -a lib/${NAME} \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME} || exit 1
chmod 0755 ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/*.so

rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/plugins/README

mkdir -p ${PKG}/usr/share
cp -a share/{icons,mime,${NAME}} \
  ${PKG}/usr/share/ || exit 1

mkdir -p ${PKG}/usr/man/man1
install -m0644 share/man/man1/${NAME}*.1* \
  ${PKG}/usr/man/man1/ || exit 1

mkdir -p ${PKG}/usr/share/applications
desktop-file-install --vendor="" \
  --dir ${PKG}/usr/share/applications \
  --remove-key="TryExec" \
  --add-mime-type="application/x-shockwave-flash" \
  share/applications/${NAME}-browser.desktop || exit 1

desktop-file-install --vendor="" \
  --dir ${PKG}/usr/share/applications \
  --remove-key="TryExec" \
  share/applications/${NAME}-widget-{installer,manager}.desktop || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  share/doc/${NAME}/* ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required


cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database /usr/share/applications >/dev/null 2>&1
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/gtk-update-icon-cache ${_kde4_iconsdir}/hicolor >/dev/null 2>&1
fi
if [ -x usr/bin/update-mime-database ]; then
  \${CHROOT} /usr/bin/update-mime-database /usr/share/mime &> /dev/null
fi
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
