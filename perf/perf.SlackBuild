#!/bin/sh
#-- perf for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ perf.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008, 2009, 2010 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://kernel.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=linux
NAME=perf
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-2.6.37}
SVER="$( echo ${VERSION} | cut -d . -f 1-2 )"
PVER="$( echo ${VERSION} | cut -d . -f 1-3 )"
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable manpages
SB_DOC=${SB_DOC:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2
SSRCARCHIVE=${SRCARCHIVE}.sign
PSRCARCHIVE=patch-${VERSION}.bz2
PSSRCARCHIVE=${PSRCARCHIVE}.sign

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
KERNEL_MIRROR=${KERNEL_MIRROR:-http://www.kernel.org/pub}
DL_URL="${KERNEL_MIRROR}/linux/kernel/v${SVER}"

# Test if needs a patch.
[ "$( echo ${VERSION} | cut -d . -f 4 )" ] && export SB_PATCH=YES

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done
if [ "${SB_PATCH}" = "YES" ] ;then
  for file in ${PSRCARCHIVE} ${PSSRCARCHIVE} ;do
    test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
  done
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi
unset ARCH CFLAGS CXXFLAGS CPPFLAGS

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
if [ -x /usr/bin/filterdiff ] ;then
  unset _tarpattern _filterdiff
  for _pattern in {Makefile,tools/perf,include,lib,"arch/*/include"}; do
    _tarpattern="${_tarpattern} ${SRCDIR}/${_pattern}"
    _filterdiff="${_filterdiff} -i ${_pattern}/*"
  done
  tar --wildcards -xvf ${CWD}/${SRCARCHIVE} ${_tarpattern} || exit 1
else
  tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ "${SB_PATCH}" = "YES" ] ;then
  echo "Applying upstream patch"
  if [ -x /usr/bin/filterdiff ] ;then
    filterdiff -p1 ${_filterdiff} -z ${CWD}/${PSRCARCHIVE} > ${SRCDIR}.patch || exit 1
    patch -p1 -i ${SRCDIR}.patch || exit 1
  else
    bzcat ${CWD}/${PSRCARCHIVE} | patch -p1 || exit 1
  fi
  echo "Upstream patches succeeded."
fi

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

cd tools/perf || exit 1

sed -i \
  -e 's:-Werror::' \
  -e 's:-ggdb3::' \
  -e 's:-fstack-protector-all::' \
  -e 's:^LDFLAGS =:EXTLIBS +=:' \
  -e '/\(PERL\|PYTHON\)_EMBED_LDOPTS/s:ALL_LDFLAGS +=:EXTLIBS +=:' \
  -e '/-x c - /s:\$(ALL_LDFLAGS):\0 $(EXTLIBS):' \
  -e '/^ALL_CFLAGS =/s:$: $(CFLAGS_OPTIMIZE):' \
  -e '/^ALL_LDFLAGS =/s:$: $(LDFLAGS_OPTIMIZE):' \
  -e '/^STRIP/s|strip|true|g' \
  -e 's|$(HOME)|/usr|g' \
  -e '/^mandir/s|share/man|man|g' \
  -e "/^lib =/s|=.*$|= lib${LIBDIRSUFFIX}|g" \
  Makefile || exit 1

export prefix=/usr
export mandir=/usr/man
export PERF_DEBUG=1
export CFLAGS_OPTIMIZE="${SLKCFLAGS}"
export LDFLAGS_OPTIMIZE="${LDFLAGS}"
export HAVE_CPLUS_DEMANGLE=1
export V=1
export STRIP=/bin/true

make -j${NJOBS} all || make all || exit $?
make install DESTDIR=${PKG} || exit $?

if [ "${SB_DOC}" = "YES" ] ;then
  make -j${NJOBS} man || make man || exit $?
  make install-man DESTDIR=${PKG} || exit $?
fi

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  CREDITS ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
