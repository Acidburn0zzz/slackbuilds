# vim: noexpandtab:ts=4:sts=4

"""Menu Generator for Fluxbox

Generates a menu for Fluxbox using the freedesktop.org standards

Usage: fluxbox-chinfo-xdg-menu [options]

Options:
  -h, --help              show this help
  -t ..., --theme=...     what icon theme you want to use
  --with-icons            put icons for applications in the menu

This script was modifed for use with fluxbox-chinfo-menu by Phantom X
"""

__author__ = "Rudolf Kastl , Antonio Gomes, Michael Rice, Phantom X"
__version__ = "$Revision: 13 $"
__date__ = "$Date: 2010/01/20 21:50:10 $"
__license__ = "GPL"


import os,re,sys,glob,getopt
import xdg.Menu,xdg.DesktopEntry,xdg.IconTheme
from os.path import isfile

def usage():
	print __doc__

def checkWm(entry, wm="fluxbox"):
	if entry.DesktopEntry.getOnlyShowIn() != []:
		entry.Show = False
	if entry.DesktopEntry.getNotShowIn() != []:
		if isinstance(entry, xdg.Menu.MenuEntry):
			if wm in entry.DesktopEntry.getNotShowIn():
				entry.Show = False
			else:
				entry.Show = True 
	
def findIcon(icon, theme):
	"""Finds the path and filename for the given icon name
		e.g. gaim --> /usr/share/pixmaps/gaim.png
		e.g. fart.png --> /usr/share/pixmaps/fart.png
	"""
	retval=str(xdg.IconTheme.getIconPath(icon, 48, theme,["png","xpm"]))
	if retval == "None":
		retval=""

	return (retval + "").encode('utf8')

def parseMenu(menu,wm,use_icons,theme,depth=1):
	if use_icons:
		print "%s[submenu] (%s) <%s> " % ( (depth*"\t"), menu.getName().encode('utf8'),  findIcon(menu.getIcon(), theme) )
	else:
		print "%s[submenu] (%s) " % ( (depth*"\t"), menu.getName().encode('utf8'), )
	depth += 1
	for entry in menu.getEntries():
		if isinstance(entry, xdg.Menu.Menu):
			parseMenu(entry,wm,use_icons,theme,depth)
		elif isinstance(entry, xdg.Menu.MenuEntry):
			checkWm(entry,wm)
			if entry.Show == False: continue
			if use_icons:
				print "%s[exec] (%s) {%s} <%s> " % ( (depth*"\t"), entry.DesktopEntry.getName().encode("utf8"), entry.DesktopEntry.getExec(), findIcon(entry.DesktopEntry.getIcon(), theme) )
			else:
				print "%s[exec] (%s) {%s} " % ( (depth*"\t"), entry.DesktopEntry.getName().encode("utf8"), entry.DesktopEntry.getExec() )
		elif isinstance(entry,xdg.Menu.Separator):
			print "%s[separator]" % (depth*"\t")
		elif isinstance(entry.xdg.Menu.Header):
			print "%s%s" % ( (depth*"\t"), entry.Name )
	depth -= 1
	print "%s[end]" % (depth*"\t")

def main(argv):
# Setting the default values
	wm = "fluxbox"
	file = sys.stdout
	use_icons = False
	theme = "gnome"
	lang = os.getenv("LANG","C")

	do_submenu = True
	use_stdout = True

	try:
		opts, args = getopt.getopt(argv, "h", ["help","with-icons","theme="])

	except getopt.GetoptError:
		usage()
		sys.exit(2)
	for opt, arg in opts:
		if opt in ("-h", "--help"):
			usage()
			sys.exit()
		elif opt == '--with-icons':
			use_icons = True
		elif opt in ("-t", "--theme"):
			theme = arg

	menu=xdg.Menu.parse()
# is done automatically now
#	menu.setLocale(lang)

	parseMenu(menu,wm,use_icons,theme)

#	print menu
if __name__ == "__main__":
	main(sys.argv[1:])
