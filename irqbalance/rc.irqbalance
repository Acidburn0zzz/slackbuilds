#! /bin/sh
#
# irqbalance       Start/Stop irq balancing daemon
#
# chkconfig: 2345 13 87
# description: The irqbalance daemon will distribute interrupts across  \
#              the cpus on a multiprocessor system with the purpose of \
#              spreading the load. \
# processname: irqbalance


# This is an interactive program, we need the current locale

# Check that we're a priviledged user
[ $(id -u) = 0 ] || exit 0

exec="/usr/sbin/irqbalance"
prog=$(basename $exec)

[ -f ${exec} ] || exit 0

# fetch configuration if it exists
# ONESHOT=yes says to wait for a minute, then look at the interrupt
# load and balance it once; after balancing exit and do not change
# it again.
# The default is to keep rebalancing once every 10 seconds.
ONESHOT=
[ -f /etc/default/irqbalance ] && . /etc/default/irqbalance
case "${ONESHOT}" in
  y*|Y*|on|--oneshot) ONESHOT=--oneshot ;;
  *) ONESHOT= ;;
esac

lockfile=/var/lock/subsys/${prog}

pidfile=/var/run/irqbalance.pid

RETVAL=0

PID=$(/sbin/pidof -o %PPID ${exec})

start() {
  if [ -n "${ONESHOT}" -a -f ${pidfile} ]; then
    exit 0
  fi
  echo -n "Starting ${prog}: "
  if [ -n "${IRQ_AFFINITY_MASK}" ]; then
    export IRQBALANCE_BANNED_CPUS=${IRQ_AFFINITY_MASK}
  fi
  if [ -z "${PID}" ] ;then 
    ${exec} ${ONESHOT} ${IRQ_AFFINITY}
    RETVAL=$?
  else
    RETVAL=1
  fi
  if [ ${RETVAL} -eq 0 ] && touch ${lockfile} ; then
    echo -e "\t\t\t\t\t\t[  OK  ]\r"
  else
    echo -e "\t\t\t\t\t\t[FAILED]\r"
  fi
  return ${RETVAL}
}


stop() {
  echo -n "Stopping ${prog}: "
  if [ -n "${PID}" ] ;then
    kill ${PID} &>/dev/null
    RETVAL=$?
  else
    RETVAL=1
  fi
  if [ ${RETVAL} -eq 0 ] && rm -f ${lockfile} ; then
    echo -e "\t\t\t\t\t\t[  OK  ]\r"
  else
    echo -e "\t\t\t\t\t\t[FAILED]\r"
  fi
  [ -f ${pidfile} ] && rm -f ${pidfile}
  return ${RETVAL}
}

restart() {
  stop
  unset PID
  start
}

# See how we were called.
case "$1" in
  start|stop)
    $1
    ;;
  stop)
    stop
    ;;
  status)
    if [ -f ${lockfile} ]; then
      echo "${prog} is running in pid $(/sbin/pidof ${prog})."
    else
      echo "${prog} is not running."
    fi
    ;;
  restart|reload)
    restart
    ;;
  condrestart)
    [ -f ${lockfile} ] && restart || :
    ;;
  *)
    echo $"Usage: $0 {start|stop|status|restart|reload|condrestart}"
    exit 1
    ;;
esac
