#!/bin/sh
#
# description:  mpd client which submits information about tracks being played to Last.fm
# processname:  mpdscribble

unset MPDSCRIBBLE_HTTP
[ -e /etc/default/mpdscribble ] && . /etc/default/mpdscribble

MPDSCRIBBLE_HTTP=${MPDSCRIBBLE_HTTP:-curl}
if [ -x "/usr/bin/mpdscribble-${MPDSCRIBBLE_HTTP}" ] ; then
  exec="/usr/bin/mpdscribble-${MPDSCRIBBLE_HTTP}"
else
  exec="/usr/bin/mpdscribble-curl"
fi
prog=$(basename ${exec} | cut -d- -f1 )
lockfile=/var/lock/subsys/${prog}
pidfile=/var/run/${prog}/${prog}.pid

[ -f /etc/${prog}.conf ] || exit 0
[ -x "${exec}" ] || exit 0

RETVAL=0

PID=$(/sbin/pidof -o %PPID ${exec})

start() {
  echo -n "Starting ${prog}: "
  if [ -z "${PID}" ] ;then 
    ${exec} --pidfile ${pidfile} 2>/dev/null
    RETVAL=$?
  else
    RETVAL=1
  fi
  if [ ${RETVAL} -eq 0 ] && touch ${lockfile} ; then
    echo -e "\t\t\t\t\t\t[  OK  ]\r"
  else
    echo -e "\t\t\t\t\t\t[FAILED]\r"
  fi
  return ${RETVAL}
}

stop() {
  echo -n "Stopping ${prog}: "
  if [ -n "${PID}" ] ;then
    kill ${PID} &>/dev/null
    RETVAL=$?
  else
    RETVAL=1
  fi
  if [ ${RETVAL} -eq 0 ] && rm -f ${lockfile} ; then
    echo -e "\t\t\t\t\t\t[  OK  ]\r"
  else
    echo -e "\t\t\t\t\t\t[FAILED]\r"
  fi
  return ${RETVAL}
}

restart() {
  stop
  unset PID
  start
}

# See how we were called.
case "$1" in
  start|stop)
    $1
    ;;
  force-reload|restart|reload)
    restart
    ;;
  status|fdrstatus)
    if [ -f ${lockfile} ]; then
      echo "${prog} is running in pid ${PID}."
    else
      echo "${prog} is not running."
    fi
    ;;
  condrestart)
    if  [ ! -f ${lockfile} ]; then restart ;fi
    ;;
  *)
    echo "Usage: $0 {start|stop|status|restart|condrestart|reload|force-reload}"
    exit 2
    ;;
esac

exit ${RETVAL}
