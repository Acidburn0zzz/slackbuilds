#!/bin/sh
#-- perl for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ perl.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008, 2009, 2010 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.perl.org/

# If want similar features with Slackware default perl package, install these after:
# perl-compress-raw-bzip2 >= 2.020
# perl-dbd-mysql >= 4.013
# perl-dbi >= 1.609
# perl-io-compress-bzip2 >= 2.005
# perl-uri >= 1.40
# perl-xml-parser > 2.36
# perl-xml-simple > 2.18

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

if [ -x /usr/bin/perl ]; then
  echo "Perl detected."
  echo
  echo "Remove your existing perl first."
  echo
  exit 1
fi

NAME=perl
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-5.12.0}
SSVER=$(echo ${VERSION} | cut -d. -f1)
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
SLKDIST=${SLKDIST:-Slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www.cpan.org/src/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

# Configure Compress::Zlib to use system zlib
sed -i \
  -e '/^BUILD_ZLIB/s|True|False|' \
  -e '/^INCLUDE/s|\./zlib-src|/usr/include|' \
  -e "/^LIB/s|\./zlib-src|/usr/lib${LIBDIRSUFFIX}|" \
  cpan/Compress-Raw-Zlib/config.in || exit 1

./Configure -de \
  -Dprefix=/usr \
  -Dvendorprefix=/usr \
  -Dcccdlflags='-fPIC' \
  -Dinstallprefix=/usr \
  -Dlibpth="/usr/local/lib${LIBDIRSUFFIX} /usr/lib${LIBDIRSUFFIX} /lib${LIBDIRSUFFIX}" \
  -Doptimize="${SLKCFLAGS}" \
  -Dusethreads -Duseithreads \
  -Dpager='/usr/bin/less -isr' \
  -Dinc_version_list='5.12.0' \
  -Dcf_by="${SLKDIST}" \
  -Darchname=${SLKTARGET}-linux || exit 1

# Kludge for gcc-4.2.4's needlessly changed output:
cat makefile | grep -v '\<command-line\>' > foo
mv foo makefile
cat x2p/makefile | grep -v '\<command-line\>' > foo
mv foo x2p/makefile

make -j${NJOBS} || make || exit 1
make install DESTDIR=${PKG} || exit 1

BARCHLIB="${PKG}/usr/lib${LIBDIRSUFFIX}/perl${SSVER}/${VERSION}/${SLKTARGET}-linux-thread-multi"
BPRIVLIB="${PKG}/usr/lib${LIBDIRSUFFIX}/perl${SSVER}/${VERSION}"
BVENDORARCH="${PKG}/usr/lib${LIBDIRSUFFIX}/perl${SSVER}/vendor_perl/${VERSION}/${SLKTARGET}-linux-thread-multi"

mkdir -p ${BVENDORARCH}/auto

# Symlinks that replace hard links
ln -sf perl${VERSION} ${PKG}/usr/bin/perl
ln -sf c2ph ${PKG}/usr/bin/pstruct
ln -sf s2p ${PKG}/usr/bin/psed

install -p -m 755 utils/pl2pm ${PKG}/usr/bin/pl2pm

for i in \
  asm/termios.h syscall.h syslimits.h syslog.h \
  sys/ioctl.h sys/socket.h sys/time.h wait.h
do
  LD_LIBRARY_PATH="${BARCHLIB}/CORE" \
  PERL5LIB="${BARCHLIB}:${BPRIVLIB}" \
  ${PKG}/usr/bin/perl ${PKG}/usr/bin/h2ph -a -d ${BARCHLIB} ${i} || /bin/true
done

install -pm0644 ${CWD}/perl-5.8.0-libnet.cfg ${BPRIVLIB}/Net/libnet.cfg || exit 1

find ${PKG} -name '*NDBM*' | xargs rm -rfv
find ${PKG} -type f -name '*.bs' -empty | xargs rm -f 

# Install sample cgi scripts (this used to happen automatically?),
# cleanup binary paths and make cgi files executable
cgidir=${BPRIVLIB}/CGI/eg/
mkdir -p ${cgidir}
cp -a lib/CGI/eg/* ${cgidir}
( cd ${cgidir}
  cgifiles='*.cgi make_links.pl RunMeFirst'
  sed -i 's|/usr/local/bin/perl|/usr/bin/perl|g' ${cgifiles}
  chmod +x ${cgifiles}
)

chmod -R u+w ${PKG}/*

rm -f ${BPRIVLIB}/ExtUtils/xsubpp
ln -s ../../../../bin/xsubpp ${BPRIVLIB}/ExtUtils/xsubpp

rm -f ${BARCHLIB}/.packlist

# for now, remove Bzip2:
find ${PKG} -name Bzip2 | xargs rm -rf
find ${PKG} -name '*B*zip2*'| xargs rm -f

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# This file shouldn't get clobbered:
if [ -r ${BARCHLIB}/perllocal.pod ]; then
  mv ${BARCHLIB}/perllocal.pod ${BARCHLIB}/perllocal.pod.new
fi

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS Artistic Copying INSTALL MANIFEST README README.cn \
  README.jp README.ko README.micro README.tw ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
# Fix some manpages to be UTF-8
( cd ${PKG}/usr/man/man1
  for i in perl588delta.1 perldelta.1 ; do
    iconv -f MS-ANSI -t UTF-8 ${i} --output new-${i}
    rm -f ${i}
    mv new-${i} ${i}
  done
  ln -sf c2ph.1 pstruct.1
  ln -sf s2p.1 psed.1
)
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find usr/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/*.cfg ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/* \
                 ${SBDIR}/patches/
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
