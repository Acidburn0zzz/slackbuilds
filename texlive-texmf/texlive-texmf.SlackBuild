#!/bin/sh
#-- texlive-texmf for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ texlive-texmf.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008, 2009, 2010 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://tug.org/texlive/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=texlive-texmf
DNAME=texlive-texmf-doc
PKGF=${PKGF:-${TMP}/package-${NAME}}
PKG=${PKGF}/${NAME}
DPKG=${PKGF}/${DNAME}

VERSION=${VERSION:-2007}
PTVER=${PTVER:-2.5}
ARCH=noarch
SLKTARGET=${SLKTARGET:-i486}
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
DPKGNAME=${DNAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to package docs
SB_DOCS=${SB_DOCS:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

# Needs to match texlive package
SB_TEXMF_MAIN=${SB_TEXMF_MAIN:-/usr/share/texmf}
SB_TEXMF_CONF=${SB_TEXMF_CONF:-/etc/texmf}
SB_TEXMF_VAR=${SB_TEXMF_VAR:-/var/lib/texmf}
SB_TEXMF_VENDOR=${SB_TEXMF_VENDOR:-/usr/share/texmf}
SB_TEXMF_LOCAL=${SB_TEXMF_LOCAL:-/usr/local/share/texmf}

SB_TXTDIR=${CWD}/txt
SB_UPDIR=${CWD}/updates

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=texlive.texmf-${VERSION}.tar.lzma
SRCARCHIVEV=texlive.texmf-var-${VERSION}.zip
SRCARCHIVEPT=ptex-texmf-${PTVER}.tar.gz
SRCARCHIVEPL=platex209.tar.bz2
SRCARCHIVEDJ=dvipsk-jfontimage.tar.bz2

SRCDIRC1=envlab
SRCDIRC2=perltex
SRCDIRC3=achemso
SRCDIRC4=IEEEconf
SRCARCHIVEC="${SRCDIRC1}.zip ${SRCDIRC2}.zip ${SRCDIRC3}.zip ${SRCDIRC4}.zip"

SRCARCHIVET1=texlive.${VERSION}.ls-R
SRCARCHIVET2=texlive.var.${VERSION}.ls-R
# missing files (note - Fedora installs this with a patch)
SRCARCHIVET3=dvips-config.generic
# TeXLive package list included in Source0
SRCARCHIVET4=texlive.${VERSION}.zip.list
SRCARCHIVET5=fmtutil-ptex.cnf

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
SF_MIRROR=${SF_MIRROR:-http://prdownloads.sourceforge.net}
DL_URL="${SF_MIRROR}/${NAME}/${SRCARCHIVE}"
DL_URLPT="ftp://ftp.ascii.co.jp/pub/TeX/ascii-ptex/tetex/${SRCARCHIVEPT}"
DL_URLPL="ftp://ftp.ascii.co.jp/pub/TeX/ascii-ptex/platex/${SRCARCHIVEPL}"
DL_URLC="ftp://dante.ctan.org/tex-archive/macros/latex/contrib"
FEDORACVS=fedora-cvs.sh
FEDORABRANCH=${FEDORABRANCH:-devel}

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || sh ${CWD}/${FEDORACVS} ${NAME} ${FEDORABRANCH} ${SRCARCHIVE} || exit 1
test -r ${CWD}/${SRCARCHIVEV} || sh ${CWD}/${FEDORACVS} ${NAME} ${FEDORABRANCH} ${SRCARCHIVEV} || exit 1
test -r ${CWD}/${SRCARCHIVEPT} || ${DL_PROG} ${DL_OPTS} ${DL_URLPT} || exit 1
test -r ${CWD}/${SRCARCHIVEPL} || ${DL_PROG} ${DL_OPTS} ${DL_URLPTL} || exit 1
test -r ${CWD}/${SRCARCHIVEDJ} || sh ${CWD}/${FEDORACVS} ${NAME} ${FEDORABRANCH} ${SRCARCHIVEDJ} || exit 1
mkdir -p ${SB_TXTDIR}
for file in ${SRCARCHIVEC} ;do
  test -r ${SB_UPDIR}/${file} || ${DL_PROG} -P ${SB_UPDIR} ${DL_OPTS} ${DL_URLC}/${file} || exit 1
done
mkdir -p ${SB_UPDIR}
for file in ${SRCARCHIVEC} ;do
  test -r ${SB_UPDIR}/${file} || ${DL_PROG} -P ${SB_UPDIR} ${DL_OPTS} ${DL_URLC}/${file} || exit 1
done

if [ -d ${PKGF} ]; then
  # Clean up a previous build
  rm -rf ${PKGF}
fi
mkdir -p ${PKG} ${DPKG}

cd ${TMP}
rm -rf ${SRCDIR}
mkdir -p ${SRCDIR}
cd ${SRCDIR} || exit 1
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1

for file in ${SRCARCHIVEC} ;do
  unzip ${SB_UPDIR}/${file} || exit 1
done

mkdir texmf-var
unzip -d texmf-var ${CWD}/${SRCARCHIVEV} || exit 1
install -p -m644 ${SB_TXTDIR}/${SRCARCHIVET3} \
  texmf-var/dvips/config/config.generic || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

cat ${SB_TXTDIR}/${SRCARCHIVET4} > ${SRCARCHIVET4} || exit 1

# we use web2c/fmutil.cnf for defaults
rm -f texmf/fmtutil/*

# these we do not want
# - they are owned by main package in /usr/bin
rm -rf texmf/scripts/tetex
rm -rf texmf/scripts/thumbpdf
rm -rf texmf/scripts/pdfcrop

# Japanese pTeX
# set platex to Japanese pLaTeX. original one is moved to platex-pl
( cd texmf-dist/tex/platex/config || exit 
  for i in *.ini ; do
    mv ${i} $(basename ${i} .ini)-pl.ini
  done
) || exit 1
sed \
  -e s/^platex/platex-pl/g \
  -e s/^pdfplatex/pdfplatex-pl/g \
  -e s/platex\.ini/platex\-pl\.ini/g \
  -i texmf/web2c/fmtutil.cnf
# add japanese ptex fmtutil configuration
cat texmf/web2c/fmtutil.cnf ${SB_TXTDIR}/${SRCARCHIVET5} \
  > texmf/web2c/fmtutil.cnf-ptex || exit 1
mv texmf/web2c/fmtutil.cnf-ptex texmf/web2c/fmtutil.cnf || exit 1

tar xvf ${CWD}/${SRCARCHIVEPT} || exit 1
for i in doc fonts jbibtex ptex ; do
  cp -a ptex-texmf/${i} texmf/ || exit 1
done
mkdir -p texmf/doc/ptex/ptex-texmf
# Convert Japanese documents to UTF-8
for i in COPYRIGHT COPYRIGHT.jis Changes.txt README.txt ; do
  iconv -f ISO-2022-JP -t UTF-8 ptex-texmf/${i} \
    -o texmf/doc/ptex/ptex-texmf/${i}
done

rm -rf ptex-texmf
# Prepare platex209
tar xvf ${CWD}/${SRCARCHIVEPL} -C texmf/ptex || exit 1
cat > texmf/ptex/platex209/plplain.ini << EOF
\input plplain.tex \dump
EOF
# Prepare pdvips fonts
mkdir pdvipsk-font
tar xvf ${CWD}/${SRCARCHIVEDJ} -C pdvipsk-font || exit 1
cp -a pdvipsk-font/usr/share/texmf/fonts/* texmf/fonts || exit 1
rm -rf pdvipsk-font
# Prepare texmf.cnf
zcat ${SB_PATCHDIR}/texlive-2007-texmf.cnf-ptex.patch.gz | patch -p0 -E --backup --verbose || exit 1

# setup texmf.cnf properly
( cd texmf/web2c || exit 1
  sed -i "s?^TEXMFMAIN =.*?TEXMFMAIN = ${SB_TEXMF_MAIN}?" texmf.cnf || exit 1
  sed -i "s?^TEXMFDIST =.*?TEXMFDIST = ${SB_TEXMF_MAIN}?" texmf.cnf || exit 1
  sed -i "s?^TEXMFSYSVAR =.*?TEXMFSYSVAR = ${SB_TEXMF_VAR}?" texmf.cnf || exit 1
  sed -i "s?^TEXMFSYSCONFIG =.*?TEXMFSYSCONFIG = ${SB_TEXMF_CONF}?" texmf.cnf || exit 1
  sed -i "s?^TEXMFVENDOR =.*?TEXMFVENDOR = ${SB_TEXMF_VENDOR}?" texmf.cnf || exit 1
  sed -i 's?^TEXMF =.*?TEXMF = {$TEXMFCONFIG,$TEXMFVAR,$TEXMFHOME,$TEXMFSYSCONFIG,!!$TEXMFSYSVAR,!!$TEXMFLOCAL,!!$TEXMFMAIN,!!$TEXMFDIST}?' texmf.cnf || exit 1
  sed -i "s?^TEXMFLOCAL =.*?TEXMFLOCAL = ${SB_TEXMF_LOCAL}?" texmf.cnf || exit 1
  sed -i "s?^TEXMFMAIN .*?TEXMFMAIN     = ${SB_TEXMF_MAIN}?" context.cnf || exit 1
  sed -i "s?^VARTEXMF .*?VARTEXMF      = ${SB_TEXMF_VAR}?" context.cnf || exit 1
  sed -i "s?^TEXMFVENDOR .*?TEXMFVENDOR   = ${SB_TEXMF_VENDOR}?" context.cnf || exit 1
) || exit 1

# nuke these
rm -f texmf/web2c/texmf.cnf-4WIN
rm -f texmf/web2c/texmf.cnf.orig
rm -f texmf/texdoctk/texdocrc-win32.defaults
rm -f texmf/ptex/platex/base/.cvsignore
rm -f texmf-dist/doc/latex/newlfm/*.bat
rm -f texmf-dist/doc/generic/t2/etc/rumkidx/*.bat
rm -f texmf-dist/tex/plain/cyrplain/makefmts.bat

mkdir -p texmf-var/fonts/map/{dvipdfm,dvips,pdftex}/updmap

# for ghosting
touch texmf-var/fonts/map/dvipdfm/updmap/{dvipdfm_dl14.map,dvipdfm.map,dvipdfm_ndl14.map}
touch texmf-var/fonts/map/dvips/updmap/{builtin35.map,ps2pk.map,psfonts_pk.map,download35.map,psfonts.map,psfonts_t1.map}
touch texmf-var/fonts/map/pdftex/updmap/{pdftex_dl14.map,pdftex.map,pdftex_ndl14.map}

# We really don't want these imho
rm -rf texmf-dist/fonts/pk && mkdir texmf-dist/fonts/pk
rm -rf texmf/doc/man
rm -rf texmf-dist/doc/man
rm -rf texmf-dist/scripts/context/stubs/mswin

# We want these but in the right place
mv texmf/doc/info/tds.info .

# now nuke the info dir
rm -rf texmf/doc/info
rm -rf texmf-dist/doc/info

# Create symlinks for Euler fonts
( cd texmf-dist/tex/latex/amsfonts || exit 1
  for i in ex f r s ; do
    ln -sf ueu${i}.fd Ueu${i}.fd
  done
)

# fix the bloody permissions - Grrrr
chmod 644 \
  texmf-dist/scripts/oberdiek/pdfatfi.pl texmf-dist/doc/generic/enctex/unimap.py \
  texmf-dist/doc/latex/minitoc/{emk,fmk,imk,pmk,rmk,tmk,xmk} texmf-dist/doc/latex/multibib/bibtexall \
  texmf-dist/doc/generic/pstricks-add/examples/{dataI.dat,dataII.dat}
chmod 755 texmf-var/{tex,dvipdfm,dvipdfm/config,dvips,dvips/config} texmf-var/tex \
  texmf-var/tex/{plain,plain/config,context,context/config,generic,generic/config}

# fix the ConTeXt ruby scripts
for ruby in $(find texmf-dist/scripts/context/ruby/ -name *.rb) \
  texmf-dist/scripts/context/stubs/unix/* \
  ; do
  if [ $(head -1 ${ruby} | grep -c "^#!") -eq 1 ]; then
    chmod 755 ${ruby}
  else
    chmod 644 ${ruby}
  fi
done

# fix references to nonexistent cm-super fonts
for i in $(find . -name *.map) ; do
  if [ $(grep -c cm-super ${i}) != 0 ]; then
    mv ${i} ${i}.old
    grep -v cm-super ${i}.old > ${i} || :
    rm -f ${i}.old
  fi
done

# fix empty documentation files
echo "%%%" >> texmf-dist/doc/latex/mathpazo/mapppl.tex
echo "%%%" >> texmf-dist/doc/latex/mathpazo/mapzplm.tex

# these should be in scripts with symlink to current location
mkdir -p texmf/scripts/hyphen/sh
( cd texmf/tex/generic/hyphen/ || exit 1
  install -p -m755 bahyph.sh ../../../scripts/hyphen/sh/ || exit 1
  rm -f bahyph.sh
  ln -s ../../../scripts/hyphen/sh/bahyph.sh .
) || exit 1

# these files owned by binary texlive package
rm -f texmf/web2c/pdfetex-pl.pool
rm -f texmf/web2c/pdfetex.pool

# these files owned by binary texlive-fonts package
rm -f texmf/web2c/{mktex.opt,mktexdir,mktexdir.opt,mktexnam,mktexnam.opt,mktexupd}

# these files owned by binary texlive-dvips package
rm -rf texmf/dvips/base

# remove ttf2pk stuff from bin-ttfutils
rm -f texmf/doc/man/man1/ttf2pk.1
rm -rf texmf/doc/ttf2pk/
rm -rf texmf/fonts/enc/ttf2pk/
rm -rf texmf/fonts/map/ttf2pk/
rm -rf texmf/fonts/sfd/
rm -rf texmf/ttf2pk/

#remove ubbold.fd (#458150)
rm -f texmf/tex/latex/jknapltx/ubbold.fd

# build envlab
rm -f texmf-dist/tex/latex/envlab/*
rm -f texmf-dist/doc/latex/envlab/*
( cd ${SRCDIRC1} || exit 1
  latex envlab.ins || exit 1
  install -p -m 644 *.sty ../texmf-dist/tex/latex/envlab/ || exit 1
  install -p -m 644 *.pdf ../texmf-dist/doc/latex/envlab/ || exit 1
  install -p -m 644 README ../texmf-dist/doc/latex/envlab/ || exit 1
) || exit 1

# build perltex
rm -f texmf-dist/tex/latex/perltex/*
rm -f texmf-dist/doc/latex/perltex/*
( cd ${SRCDIRC2} || exit 1
  latex perltex.ins || exit 1
  sed -i 's,^#! /usr/bin/env perl$,#!/usr/bin/perl,' perltex.pl
  install -p -m 644 *.sty ../texmf-dist/tex/latex/perltex/ || exit 1
  install -p -m 644 *.pdf ../texmf-dist/doc/latex/perltex/ || exit 1
  install -p -m 644 README ../texmf-dist/doc/latex/perltex/ || exit 1
) || exit 1

# build achemso
rm -f texmf-dist/tex/latex/achemso/*
rm -f texmf-dist/doc/latex/achemso/*
( cd ${SRCDIRC3} || exit 1
  latex achemso.ins || exit 1
  install -p -m 644 *.sty ../texmf-dist/tex/latex/achemso/ || exit 1
  install -p -m 644 *.cls ../texmf-dist/tex/latex/achemso/ || exit 1
  install -p -m 644 *.bst ../texmf-dist/tex/latex/achemso/ || exit 1
  install -p -m 644 *.cfg ../texmf-dist/tex/latex/achemso/ || exit 1
  install -p -m 644 *.pdf ../texmf-dist/doc/latex/achemso/ || exit 1
  install -p -m 644 README ../texmf-dist/doc/latex/achemso/ || exit 1
) || exit 1

# build IEEEconf
mkdir -p texmf-dist/tex/latex/IEEEconf
mkdir -p texmf-dist/doc/latex/IEEEconf
( cd ${SRCDIRC4} || exit 1
  latex IEEEconf.ins || exit 1
  install -p -m 644 *.cls ../texmf-dist/tex/latex/IEEEconf/ || exit 1
  install -p -m 644 *.pdf ../texmf-dist/doc/latex/IEEEconf/ || exit 1
  install -p -m 644 README ../texmf-dist/doc/latex/IEEEconf/ || exit 1
) || exit 1

mkdir -p ${PKG}/usr/info
install -p -m644 tds.info ${PKG}/usr/info/ || exit 1

# install the texmf
mkdir -p ${PKG}/${SB_TEXMF_MAIN#\/}
mkdir -p ${PKG}/${SB_TEXMF_VAR#\/}
mkdir -p ${PKG}/${SB_TEXMF_VENDOR#\/}

cp -a ${SB_TXTDIR}/${SRCARCHIVET1} \
  ${PKG}/${SB_TEXMF_MAIN#\/}/default.ls-R
cp -a ${SB_TXTDIR}/${SRCARCHIVET2} \
  ${PKG}/${SB_TEXMF_VAR#\/}/default.ls-R

# ghostscript cmap required for dvipdfmx
if [ -d "/usr/share/ghostscript/$(gs --version| cut -d . -f 1-2)/Resource/CMap" ] ; then
  cmap_dir="/usr/share/ghostscript/ghostscript/"$(gs --version| cut -d . -f 1-2)"/Resource/CMap/"
elif [ -d "/usr/share/ghostscript/ghostscript/Resource/CMap" ] ; then
  cmap_dir="/usr/share/ghostscript/ghostscript/Resource/CMap/"
fi
if [ z"${cmap_dir}" != 'z' ]; then
  sed -i 's?^CMAPFONTS = .*?CMAPFONTS = .;$TEXMF/fonts/cmap//;'"${cmap_dir}"'?' \
    texmf/web2c/texmf.cnf
fi

cp -a texmf/* ${PKG}/${SB_TEXMF_MAIN}
cp -a texmf-var/* ${PKG}/${SB_TEXMF_VAR}
cp -a texmf-dist/* ${PKG}/${SB_TEXMF_VENDOR}

install -d -m755 ${PKG}/${SB_TEXMF_MAIN}/fonts/{cmap,sfd,type3,type42}

# move the configuration files and symlink them
mkdir -p ${PKG}/${SB_TEXMF_CONF}/web2c
mv ${PKG}/${SB_TEXMF_MAIN}/web2c/mktex.cnf \
  ${PKG}/${SB_TEXMF_CONF}/web2c/mktex.cnf || exit 1
for file in $(ls ${PKG}/${SB_TEXMF_CONF#\/}/web2c/ | egrep 'c(nf|fg)$'); do
  filename="$(basename ${file})"
  ln -sf ${SB_TEXMF_CONF}/web2c/${filename} ${PKG}/${SB_TEXMF_MAIN}/web2c/
done

if [ -x /usr/bin/texhash ]; then
  texhash ${PKG}/${SB_TEXMF_MAIN}
  mv ${PKG}/${SB_TEXMF_MAIN}/ls-R ${PKG}/${SB_TEXMF_MAIN}/default.ls-R
  texhash ${PKG}/${SB_TEXMF_VAR}
  mv ${PKG}/${SB_TEXMF_VAR}/ls-R ${PKG}/${SB_TEXMF_VAR}/default.ls-R
else
  install -p -m644 ${SB_TXTDIR}/${SRCARCHIVET1} ${PKG}/${SB_TEXMF_MAIN}/default.ls-R
  install -p -m644 ${SB_TXTDIR}/${SRCARCHIVET2} ${PKG}/${SB_TEXMF_VAR}/default.ls-R
fi
touch ${PKG}/${SB_TEXMF_MAIN}/ls-R
touch ${PKG}/${SB_TEXMF_VAR}/ls-R
mkdir -p ${PKG}/${SB_TEXMF_VENDOR}/{doc,tex}/{generic,latex}
mkdir -p ${PKG}/${SB_TEXMF_VENDOR}/fonts
touch ${PKG}/${SB_TEXMF_VENDOR}/ls-R
touch ${PKG}/${SB_TEXMF_CONF}/ls-R

# remove xdvi files, now packaged separately
rm -rf ${PKG}/${SB_TEXMF_VAR}/xdvi

# remove dvipdfmx files
rm ${PKG}/${SB_TEXMF_MAIN}/dvipdfm/{dvipdfmx.cfg,EUC-UCS2,README,UniKSCms-UCS2-H,UniKSCms-UCS2-V}

# remove win32 dvipdfm file
rm ${PKG}/${SB_TEXMF_MAIN}/dvipdfm/config/config-win32

# remove preview, it's now packaged separately (#425805)
rm -rf ${PKG}/${SB_TEXMF_MAIN}/tex/latex/preview/
rm -rf ${PKG}/${SB_TEXMF_MAIN}/doc/latex/preview/

# remove binaries from splitindex (#476636)
rm -rf ${PKG}/${SB_TEXMF_MAIN}/doc/latex/splitindex/*i386* \
${PKG}/${SB_TEXMF_MAIN}/doc/latex/splitindex/*.exe \
${PKG}/${SB_TEXMF_MAIN}/doc/latex/splitindex/*.class

# remove $TEXMFMAIN/tex/texinfo to not to clash with texinfo (#226488)
rm -rf ${PKG}/${SB_TEXMF_MAIN}/tex/texinfo/

# remove dvipdfm configuration file
rm -rf ${PKG}/${SB_TEXMF_MAIN}/dvipdfm

# install perltex
mkdir -p ${PKG}/usr/bin
install -p -m755 perltex/perltex.pl ${PKG}/usr/bin/perltex || exit 1
# generate perltex man page (#541085)
mkdir -p ${PKG}/usr/man/man1
install -p -m644 perltex/perltex.1 ${PKG}/usr/man/man1/ || exit 1

# fix permissions of /var/lib/texmf/web2c
chmod 755 ${PKG}/${SB_TEXMF_VAR}/web2c

mkdir -p ${PKG}/etc/rpm
cat > ${PKG}/etc/rpm/macros.texlive.new <<EOF
# macros to keep trees in texlive consistent
%_texmf_main     ${SB_TEXMF_MAIN}
%_texmf_vendor   ${SB_TEXMF_VENDOR}
%_texmf_var      ${SB_TEXMF_LOCAL}
%_texmf_conf     ${SB_TEXMF_CONF}
EOF

for file in ${PKG}/${SB_TEXMF_CONF}/web2c/*.conf \
  ${PKG}/${SB_TEXMF_VAR}/web2c/mktex.cnf
  do
  mv ${file} ${file}.new
done

if [ "${SB_DOCS}" = "YES" ] ;then
  mkdir -p ${DPKG}/${SB_TEXMF_MAIN}/doc
  mv ${PKG}/${SB_TEXMF_MAIN}/doc/* ${DPKG}/${SB_TEXMF_MAIN}/doc/ || exit 1
fi
rm -rf ${PKG}/${SB_TEXMF_MAIN}/doc/*

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  ${SB_TXTDIR}/${SRCARCHIVET4} ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *.info*
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required | sed "s|_VERSION_|${VERSION}|g" \
  > ${PKG}/install/slack-required
mkdir -p ${DPKG}/install
cat ${CWD}/slack-desc.doc > ${DPKG}/install/slack-desc
cat ${CWD}/slack-required.doc | sed "s|_VERSION_|${VERSION}|g" \
  > ${DPKG}/install/slack-required

SB_TEXMF_MAIN=${SB_TEXMF_MAIN:-/usr/share/texmf}
SB_TEXMF_CONF=${SB_TEXMF_CONF:-/etc/texmf}
SB_TEXMF_VAR=${SB_TEXMF_VAR:-/var/lib/texmf}

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
# Install the info files for this package
if [ -x usr/bin/install-info ] ; then
  \${CHROOT} /usr/bin/install-info --info-dir=/usr/info usr/info/tds.info.gz 2>/dev/null
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find var/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<EOF
if [ -x usr/bin/texconfig-sys ] ; then
  \${CHROOT} /usr/bin/texconfig-sys rehash 2>/dev/null || :
fi
if [ ! -x usr/bin/texhash ]; then
  \${CHROOT} cat ${SB_TEXMF_MAIN}/default.ls-R > ${SB_TEXMF_MAIN}/ls-R
  \${CHROOT} cat ${SB_TEXMF_VAR}/default.ls-R  > ${SB_TEXMF_VAR}/ls-R
else
  if [ -x usr/bin/texconfig-sys ] ; then
    \${CHROOT} /usr/bin/texconfig-sys rehash 2>/dev/null || :
  fi
fi
EOF

cat > ${DPKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -x usr/bin/texconfig-sys ] ; then
  \${CHROOT} /usr/bin/texconfig-sys rehash 2>/dev/null || :
fi
EOF
sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc ${DPKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc* ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/${FEDORACVS} ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.gz \
                 ${SBDIR}/patches/
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

if [ "${SB_DOCS}" = "YES" ] ;then
  DROOTCOMMANDS="set -o errexit -o xtrace ; cd ${DPKG} ;
    /bin/chown --recursive root:root .  ;"

  DROOTCOMMANDS="${DROOTCOMMANDS}
    /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${DPKGNAME}.${PKGFORMAT} "

  if test ${UID} = 0; then
    eval ${DROOTCOMMANDS}
    set +o xtrace
  elif test "$(type -t fakeroot)" = 'file'; then
    echo -e "\e[1mEntering fakeroot environment.\e[0m"
    echo ${DROOTCOMMANDS} | fakeroot
  else
    echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
    /bin/su -c "${DROOTCOMMANDS}"
  fi
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKGF} ]; then
    rm -rf ${PKGF} && echo "${PKGF} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
